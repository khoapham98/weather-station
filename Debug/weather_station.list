
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001894  08001894  00002894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001960  08001960  00003084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001960  08001960  00002960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001968  08001968  00003084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001968  08001968  00002968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800196c  0800196c  0000296c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08001970  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000084  080019f4  00003084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080019f4  00003200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000209d  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ab0  00000000  00000000  00005151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c8  00000000  00000000  00005c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001f3  00000000  00000000  00005ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c0b  00000000  00000000  000060c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000474b  00000000  00000000  00007cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d77  00000000  00000000  0000c419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008f190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000de4  00000000  00000000  0008f1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0008ffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800187c 	.word	0x0800187c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800187c 	.word	0x0800187c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <LCD_gotoxy>:
/*
	1 <= row <= 2
	1 <= column <= 40
 */
void LCD_gotoxy(uint8_t row, uint8_t column)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	460a      	mov	r2, r1
 800029a:	71fb      	strb	r3, [r7, #7]
 800029c:	4613      	mov	r3, r2
 800029e:	71bb      	strb	r3, [r7, #6]
	if (row == 1)
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d10a      	bne.n	80002bc <LCD_gotoxy+0x2c>
	{
		set_cursor_position((column - 1) * row);
 80002a6:	79bb      	ldrb	r3, [r7, #6]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	79fa      	ldrb	r2, [r7, #7]
 80002ae:	fb12 f303 	smulbb	r3, r2, r3
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f827 	bl	8000308 <set_cursor_position>
		LCD_gotoxy(2, 1);
		LCD_print_String("BACK TO 1ST LINE");
		delay_ms(3000);
		LCD_ClrScr();
	}
}
 80002ba:	e01d      	b.n	80002f8 <LCD_gotoxy+0x68>
	else if (row == 2)
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d106      	bne.n	80002d0 <LCD_gotoxy+0x40>
		set_cursor_position(column + 63);
 80002c2:	79bb      	ldrb	r3, [r7, #6]
 80002c4:	333f      	adds	r3, #63	@ 0x3f
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 f81d 	bl	8000308 <set_cursor_position>
}
 80002ce:	e013      	b.n	80002f8 <LCD_gotoxy+0x68>
		LCD_gotoxy(1, 1);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2001      	movs	r0, #1
 80002d4:	f7ff ffdc 	bl	8000290 <LCD_gotoxy>
		LCD_print_String("INVALID NUMBER");
 80002d8:	4809      	ldr	r0, [pc, #36]	@ (8000300 <LCD_gotoxy+0x70>)
 80002da:	f000 f840 	bl	800035e <LCD_print_String>
		LCD_gotoxy(2, 1);
 80002de:	2101      	movs	r1, #1
 80002e0:	2002      	movs	r0, #2
 80002e2:	f7ff ffd5 	bl	8000290 <LCD_gotoxy>
		LCD_print_String("BACK TO 1ST LINE");
 80002e6:	4807      	ldr	r0, [pc, #28]	@ (8000304 <LCD_gotoxy+0x74>)
 80002e8:	f000 f839 	bl	800035e <LCD_print_String>
		delay_ms(3000);
 80002ec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002f0:	f000 fd4e 	bl	8000d90 <delay_ms>
		LCD_ClrScr();
 80002f4:	f000 f87f 	bl	80003f6 <LCD_ClrScr>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	08001894 	.word	0x08001894
 8000304:	080018a4 	.word	0x080018a4

08000308 <set_cursor_position>:

void set_cursor_position(uint8_t cmd)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
	LCD_WriteCMD(cmd | POS);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000318:	b2db      	uxtb	r3, r3
 800031a:	4618      	mov	r0, r3
 800031c:	f000 f899 	bl	8000452 <LCD_WriteCMD>
	delay_us(40);
 8000320:	2028      	movs	r0, #40	@ 0x28
 8000322:	f000 fd53 	bl	8000dcc <delay_us>
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <scroll_left>:

void scroll_left()
{
 800032e:	b580      	push	{r7, lr}
 8000330:	b082      	sub	sp, #8
 8000332:	af00      	add	r7, sp, #0
	for (int i = 0; i < 16; i++)
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e009      	b.n	800034e <scroll_left+0x20>
	{
		delay_ms(300);
 800033a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800033e:	f000 fd27 	bl	8000d90 <delay_ms>
		LCD_WriteCMD(0x18);
 8000342:	2018      	movs	r0, #24
 8000344:	f000 f885 	bl	8000452 <LCD_WriteCMD>
	for (int i = 0; i < 16; i++)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3301      	adds	r3, #1
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2b0f      	cmp	r3, #15
 8000352:	ddf2      	ble.n	800033a <scroll_left+0xc>
	}
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <LCD_print_String>:

void LCD_print_String(char* str, ...)
{
 800035e:	b40f      	push	{r0, r1, r2, r3}
 8000360:	b580      	push	{r7, lr}
 8000362:	b0a4      	sub	sp, #144	@ 0x90
 8000364:	af00      	add	r7, sp, #0
	va_list list;
	va_start(list, str);
 8000366:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800036a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char print_buf[128] = { 0 };
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2280      	movs	r2, #128	@ 0x80
 8000372:	2100      	movs	r1, #0
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fded 	bl	8000f54 <memset>
	vsprintf(print_buf, str, list);
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000380:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fddb 	bl	8000f40 <vsiprintf>
	int size = strlen(print_buf);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff27 	bl	80001e0 <strlen>
 8000392:	4603      	mov	r3, r0
 8000394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for (int i = 0; i < size; i++)
 8000398:	2300      	movs	r3, #0
 800039a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800039e:	e00c      	b.n	80003ba <LCD_print_String+0x5c>
	{
		LCD_print_Char(print_buf[i]);
 80003a0:	1d3a      	adds	r2, r7, #4
 80003a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003a6:	4413      	add	r3, r2
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f813 	bl	80003d6 <LCD_print_Char>
	for (int i = 0; i < size; i++)
 80003b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80003b4:	3301      	adds	r3, #1
 80003b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80003ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80003be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80003c2:	429a      	cmp	r2, r3
 80003c4:	dbec      	blt.n	80003a0 <LCD_print_String+0x42>
	}
	va_end(list);
}
 80003c6:	bf00      	nop
 80003c8:	bf00      	nop
 80003ca:	3790      	adds	r7, #144	@ 0x90
 80003cc:	46bd      	mov	sp, r7
 80003ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003d2:	b004      	add	sp, #16
 80003d4:	4770      	bx	lr

080003d6 <LCD_print_Char>:

void LCD_print_Char(uint8_t ch)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	4603      	mov	r3, r0
 80003de:	71fb      	strb	r3, [r7, #7]
	LCD_WriteDATA(ch);
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f817 	bl	8000416 <LCD_WriteDATA>
	delay_us(40);
 80003e8:	2028      	movs	r0, #40	@ 0x28
 80003ea:	f000 fcef 	bl	8000dcc <delay_us>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <LCD_ClrScr>:

void LCD_ClrScr()
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
	/* clear display */
	LCD_WriteCMD(0x01);
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 f829 	bl	8000452 <LCD_WriteCMD>
	delay_ms(2);
 8000400:	2002      	movs	r0, #2
 8000402:	f000 fcc5 	bl	8000d90 <delay_ms>

	/* return home */
	LCD_WriteCMD(0x02);
 8000406:	2002      	movs	r0, #2
 8000408:	f000 f823 	bl	8000452 <LCD_WriteCMD>
	delay_ms(2);
 800040c:	2002      	movs	r0, #2
 800040e:	f000 fcbf 	bl	8000d90 <delay_ms>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}

08000416 <LCD_WriteDATA>:

void LCD_WriteDATA(uint8_t data)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	71fb      	strb	r3, [r7, #7]
	uint8_t high_bits = data & 0xF0;
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	f023 030f 	bic.w	r3, r3, #15
 8000426:	73fb      	strb	r3, [r7, #15]
	uint8_t low_bits = data << 4;
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	73bb      	strb	r3, [r7, #14]
	write_4bits(high_bits | DATA);
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4618      	mov	r0, r3
 8000438:	f000 f823 	bl	8000482 <write_4bits>
	write_4bits(low_bits | DATA);
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f81c 	bl	8000482 <write_4bits>
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <LCD_WriteCMD>:

void LCD_WriteCMD(uint8_t data)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b084      	sub	sp, #16
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	71fb      	strb	r3, [r7, #7]
	uint8_t high_bits = data & 0xF0;
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	f023 030f 	bic.w	r3, r3, #15
 8000462:	73fb      	strb	r3, [r7, #15]
	uint8_t low_bits = data << 4;
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	011b      	lsls	r3, r3, #4
 8000468:	73bb      	strb	r3, [r7, #14]
	write_4bits(high_bits | CMD);
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f808 	bl	8000482 <write_4bits>
	write_4bits(low_bits | CMD);
 8000472:	7bbb      	ldrb	r3, [r7, #14]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f804 	bl	8000482 <write_4bits>
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <write_4bits>:

void write_4bits(uint8_t data)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	71fb      	strb	r3, [r7, #7]
	/* make sure EN bit is low before send new data */
	master_transmit(data & ~ENABLE);
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	f023 0304 	bic.w	r3, r3, #4
 8000492:	b2db      	uxtb	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f81b 	bl	80004d0 <master_transmit>
	delay_us(25);
 800049a:	2019      	movs	r0, #25
 800049c:	f000 fc96 	bl	8000dcc <delay_us>

	/* send data with EN = 1 and EN = 0*/
	master_transmit(data | ENABLE);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f811 	bl	80004d0 <master_transmit>
	delay_us(25);
 80004ae:	2019      	movs	r0, #25
 80004b0:	f000 fc8c 	bl	8000dcc <delay_us>
	master_transmit(data & ~ENABLE);
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f023 0304 	bic.w	r3, r3, #4
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f807 	bl	80004d0 <master_transmit>
	delay_us(25);
 80004c2:	2019      	movs	r0, #25
 80004c4:	f000 fc82 	bl	8000dcc <delay_us>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <master_transmit>:

void master_transmit(uint8_t data)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b089      	sub	sp, #36	@ 0x24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80004da:	4b31      	ldr	r3, [pc, #196]	@ (80005a0 <master_transmit+0xd0>)
 80004dc:	61fb      	str	r3, [r7, #28]
	uint16_t* I2C_SR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x14);
 80004de:	4b31      	ldr	r3, [pc, #196]	@ (80005a4 <master_transmit+0xd4>)
 80004e0:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_SR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x18);
 80004e2:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <master_transmit+0xd8>)
 80004e4:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_DR  = (uint16_t*) (I2C1_BASE_ADDR + 0x10);
 80004e6:	4b31      	ldr	r3, [pc, #196]	@ (80005ac <master_transmit+0xdc>)
 80004e8:	613b      	str	r3, [r7, #16]

	/* wait until bus is free */
	while (((*I2C_SR2 >> 1) & 1) == 1);
 80004ea:	bf00      	nop
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1f7      	bne.n	80004ec <master_transmit+0x1c>

	/* generate START condition */
	*I2C_CR1 |= 1 << 8;
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000504:	b29a      	uxth	r2, r3
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	801a      	strh	r2, [r3, #0]

	/* wait for START condition is generated */
	while ((*I2C_SR1 & 1) == 0);
 800050a:	bf00      	nop
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f9      	beq.n	800050c <master_transmit+0x3c>

	/* send slave address */
	volatile uint16_t tmp = *I2C_SR1;
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	81fb      	strh	r3, [r7, #14]
	*I2C_DR = (0x27 << 1) | WRITE;
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	224e      	movs	r2, #78	@ 0x4e
 8000522:	801a      	strh	r2, [r3, #0]

	/* wait until the slave address is sent and slave response ACK */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 8000524:	bf00      	nop
 8000526:	69bb      	ldr	r3, [r7, #24]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	085b      	lsrs	r3, r3, #1
 800052c:	b29b      	uxth	r3, r3
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f7      	beq.n	8000526 <master_transmit+0x56>
	tmp = *I2C_SR1;
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	81fb      	strh	r3, [r7, #14]
	tmp = *I2C_SR2;
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	81fb      	strh	r3, [r7, #14]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 8000542:	bf00      	nop
 8000544:	69bb      	ldr	r3, [r7, #24]
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	09db      	lsrs	r3, r3, #7
 800054a:	b29b      	uxth	r3, r3
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f7      	beq.n	8000544 <master_transmit+0x74>

	/* send data or instruction */
	*I2C_DR = data | BACKLIGHT;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	b2db      	uxtb	r3, r3
 800055c:	461a      	mov	r2, r3
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty and transfer finished */
	while ((((*I2C_SR1 >> 7) & 1) == 0) && (((*I2C_SR1 >> 2) & 1) == 0));
 8000562:	bf00      	nop
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	09db      	lsrs	r3, r3, #7
 800056a:	b29b      	uxth	r3, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	2b00      	cmp	r3, #0
 8000572:	d107      	bne.n	8000584 <master_transmit+0xb4>
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	089b      	lsrs	r3, r3, #2
 800057a:	b29b      	uxth	r3, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0ef      	beq.n	8000564 <master_transmit+0x94>

	/* generate STOP condition */
	*I2C_CR1 |= 1 << 9;
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800058c:	b29a      	uxth	r2, r3
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	801a      	strh	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	3724      	adds	r7, #36	@ 0x24
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40005400 	.word	0x40005400
 80005a4:	40005414 	.word	0x40005414
 80005a8:	40005418 	.word	0x40005418
 80005ac:	40005410 	.word	0x40005410

080005b0 <LCD_Init>:

void LCD_Init()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	/* after power on, wait for more than 40ms after VCC rises to 2.7 V */
	delay_ms(50);
 80005b4:	2032      	movs	r0, #50	@ 0x32
 80005b6:	f000 fbeb 	bl	8000d90 <delay_ms>

	/* function set */
	write_4bits(0x03 << 4);
 80005ba:	2030      	movs	r0, #48	@ 0x30
 80005bc:	f7ff ff61 	bl	8000482 <write_4bits>
	delay_ms(5);
 80005c0:	2005      	movs	r0, #5
 80005c2:	f000 fbe5 	bl	8000d90 <delay_ms>
	write_4bits(0x03 << 4);
 80005c6:	2030      	movs	r0, #48	@ 0x30
 80005c8:	f7ff ff5b 	bl	8000482 <write_4bits>
	delay_us(110);
 80005cc:	206e      	movs	r0, #110	@ 0x6e
 80005ce:	f000 fbfd 	bl	8000dcc <delay_us>
	write_4bits(0x03 << 4);
 80005d2:	2030      	movs	r0, #48	@ 0x30
 80005d4:	f7ff ff55 	bl	8000482 <write_4bits>
	delay_us(110);
 80005d8:	206e      	movs	r0, #110	@ 0x6e
 80005da:	f000 fbf7 	bl	8000dcc <delay_us>
	write_4bits(0x02 << 4);
 80005de:	2020      	movs	r0, #32
 80005e0:	f7ff ff4f 	bl	8000482 <write_4bits>
	delay_us(110);
 80005e4:	206e      	movs	r0, #110	@ 0x6e
 80005e6:	f000 fbf1 	bl	8000dcc <delay_us>

	/* select 4-bit operation and select 2 line display */
	LCD_WriteCMD(0x28);
 80005ea:	2028      	movs	r0, #40	@ 0x28
 80005ec:	f7ff ff31 	bl	8000452 <LCD_WriteCMD>
	delay_us(40);
 80005f0:	2028      	movs	r0, #40	@ 0x28
 80005f2:	f000 fbeb 	bl	8000dcc <delay_us>

	/* Display ON & display cursor */
	LCD_WriteCMD(0x0C);
 80005f6:	200c      	movs	r0, #12
 80005f8:	f7ff ff2b 	bl	8000452 <LCD_WriteCMD>
	delay_us(40);
 80005fc:	2028      	movs	r0, #40	@ 0x28
 80005fe:	f000 fbe5 	bl	8000dcc <delay_us>

	/* clear display */
	LCD_WriteCMD(0x01);
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff ff25 	bl	8000452 <LCD_WriteCMD>
	delay_ms(2);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fbc1 	bl	8000d90 <delay_ms>

	/* entry mode set */
	LCD_WriteCMD(0x06);
 800060e:	2006      	movs	r0, #6
 8000610:	f7ff ff1f 	bl	8000452 <LCD_WriteCMD>
	delay_us(40);
 8000614:	2028      	movs	r0, #40	@ 0x28
 8000616:	f000 fbd9 	bl	8000dcc <delay_us>

	/* display shift to the right */
	LCD_WriteCMD(0x1C);
 800061a:	201c      	movs	r0, #28
 800061c:	f7ff ff19 	bl	8000452 <LCD_WriteCMD>
	delay_us(40);
 8000620:	2028      	movs	r0, #40	@ 0x28
 8000622:	f000 fbd3 	bl	8000dcc <delay_us>

	/* return home */
	LCD_WriteCMD(0x02);
 8000626:	2002      	movs	r0, #2
 8000628:	f7ff ff13 	bl	8000452 <LCD_WriteCMD>
	delay_ms(2);
 800062c:	2002      	movs	r0, #2
 800062e:	f000 fbaf 	bl	8000d90 <delay_ms>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <I2C1_Init>:
	GND: GND
	PB8: SCL
	PB9: SDA
 */
void I2C1_Init()
{
 8000638:	b480      	push	{r7}
 800063a:	b08b      	sub	sp, #44	@ 0x2c
 800063c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <I2C1_Init+0xcc>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000646:	4a2f      	ldr	r2, [pc, #188]	@ (8000704 <I2C1_Init+0xcc>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	@ 0x30
 800064e:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <I2C1_Init+0xcc>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 800065a:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <I2C1_Init+0xd0>)
 800065c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRH = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 800065e:	4b2b      	ldr	r3, [pc, #172]	@ (800070c <I2C1_Init+0xd4>)
 8000660:	623b      	str	r3, [r7, #32]
	uint32_t* GPIOB_OTYPER = (uint32_t*) (GPIOB_BASE_ADDR + 0x04);
 8000662:	4b2b      	ldr	r3, [pc, #172]	@ (8000710 <I2C1_Init+0xd8>)
 8000664:	61fb      	str	r3, [r7, #28]

	/* Configure PB8 & PB9 at AF */
	*GPIOB_MODER &= ~(0xf << (8 * 2));
 8000666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000670:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << (8 * 2)) | (0b10 << (9 * 2));
 8000672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f443 2220 	orr.w	r2, r3, #655360	@ 0xa0000
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800067c:	601a      	str	r2, [r3, #0]

	*GPIOB_OTYPER |= (1 << 8) | (1 << 9);
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	601a      	str	r2, [r3, #0]

	/* Select AF04 */
	*GPIOB_AFRH &= ~(0xff << 0);
 800068a:	6a3b      	ldr	r3, [r7, #32]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000692:	6a3b      	ldr	r3, [r7, #32]
 8000694:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= (4 << 0) | (4 << 4);
 8000696:	6a3b      	ldr	r3, [r7, #32]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f043 0244 	orr.w	r2, r3, #68	@ 0x44
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <I2C1_Init+0xcc>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006aa:	4a16      	ldr	r2, [pc, #88]	@ (8000704 <I2C1_Init+0xcc>)
 80006ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <I2C1_Init+0xcc>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <I2C1_Init+0xdc>)
 80006c0:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_CR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x04);
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <I2C1_Init+0xe0>)
 80006c4:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_CCR = (uint16_t*) (I2C1_BASE_ADDR + 0x1C);
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <I2C1_Init+0xe4>)
 80006c8:	613b      	str	r3, [r7, #16]
	uint16_t* I2C_TRISE = (uint16_t*) (I2C1_BASE_ADDR + 0x20);
 80006ca:	4b15      	ldr	r3, [pc, #84]	@ (8000720 <I2C1_Init+0xe8>)
 80006cc:	60fb      	str	r3, [r7, #12]

	/* configure I2C clock frequency = 16MHz */
	*I2C_CR2 |= 16 << 0;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	801a      	strh	r2, [r3, #0]

	/* configure SCL to generate 100kHz */
	*I2C_CCR = 80;
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	2250      	movs	r2, #80	@ 0x50
 80006e0:	801a      	strh	r2, [r3, #0]

	/* Set rise time */
	*I2C_TRISE = 16 + 1;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2211      	movs	r2, #17
 80006e6:	801a      	strh	r2, [r3, #0]

	/* enable I2C */
	*I2C_CR1 |= 1 << 0;
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	801a      	strh	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	372c      	adds	r7, #44	@ 0x2c
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400
 800070c:	40020424 	.word	0x40020424
 8000710:	40020404 	.word	0x40020404
 8000714:	40005400 	.word	0x40005400
 8000718:	40005404 	.word	0x40005404
 800071c:	4000541c 	.word	0x4000541c
 8000720:	40005420 	.word	0x40005420

08000724 <main>:
uint8_t data[5] = { 0 };
time_t time;
date_t date;

int main()
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af04      	add	r7, sp, #16
//	DHT11_Init();
	TIM2_Init();
 800072a:	f000 fb69 	bl	8000e00 <TIM2_Init>
	I2C1_Init();
 800072e:	f7ff ff83 	bl	8000638 <I2C1_Init>
	LCD_Init();
 8000732:	f7ff ff3d 	bl	80005b0 <LCD_Init>
	LCD_ClrScr();
 8000736:	f7ff fe5e 	bl	80003f6 <LCD_ClrScr>
	RTC_Init();
 800073a:	f000 f9c1 	bl	8000ac0 <RTC_Init>
//		if (check_sum(data) == 1)
//		{
//			LCD_gotoxy(1, 1);
//			LCD_print_String("HUMI : %d.%d %cRH  -  TEMP : %d.%d %cC", data[0], data[1], 0x25, data[2], data[3], 0xDF);
//		}
		time = get_time();
 800073e:	f000 f8c5 	bl	80008cc <get_time>
 8000742:	4602      	mov	r2, r0
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <main+0x94>)
 8000746:	4611      	mov	r1, r2
 8000748:	7019      	strb	r1, [r3, #0]
 800074a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800074e:	7059      	strb	r1, [r3, #1]
 8000750:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8000754:	709a      	strb	r2, [r3, #2]
		date = get_date();
 8000756:	4c19      	ldr	r4, [pc, #100]	@ (80007bc <main+0x98>)
 8000758:	463b      	mov	r3, r7
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f834 	bl	80007c8 <get_date>
 8000760:	463b      	mov	r3, r7
 8000762:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		LCD_gotoxy(2, 1);
 800076a:	2101      	movs	r1, #1
 800076c:	2002      	movs	r0, #2
 800076e:	f7ff fd8f 	bl	8000290 <LCD_gotoxy>
		LCD_print_String("%s %d%s, %d  -  %d:%02d:%02d", months[date.month - 1], date.day, date.suffix, date.year, time.hour, time.minute, time.second);
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <main+0x98>)
 8000774:	7a1b      	ldrb	r3, [r3, #8]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a11      	ldr	r2, [pc, #68]	@ (80007c0 <main+0x9c>)
 800077a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <main+0x98>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461e      	mov	r6, r3
 8000784:	4b0d      	ldr	r3, [pc, #52]	@ (80007bc <main+0x98>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4a0c      	ldr	r2, [pc, #48]	@ (80007bc <main+0x98>)
 800078a:	8952      	ldrh	r2, [r2, #10]
 800078c:	4610      	mov	r0, r2
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <main+0x94>)
 8000790:	7812      	ldrb	r2, [r2, #0]
 8000792:	4614      	mov	r4, r2
 8000794:	4a08      	ldr	r2, [pc, #32]	@ (80007b8 <main+0x94>)
 8000796:	7852      	ldrb	r2, [r2, #1]
 8000798:	4615      	mov	r5, r2
 800079a:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <main+0x94>)
 800079c:	7892      	ldrb	r2, [r2, #2]
 800079e:	9203      	str	r2, [sp, #12]
 80007a0:	9502      	str	r5, [sp, #8]
 80007a2:	9401      	str	r4, [sp, #4]
 80007a4:	9000      	str	r0, [sp, #0]
 80007a6:	4632      	mov	r2, r6
 80007a8:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <main+0xa0>)
 80007aa:	f7ff fdd8 	bl	800035e <LCD_print_String>
		scroll_left();
 80007ae:	f7ff fdbe 	bl	800032e <scroll_left>
		time = get_time();
 80007b2:	bf00      	nop
 80007b4:	e7c3      	b.n	800073e <main+0x1a>
 80007b6:	bf00      	nop
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	200000a4 	.word	0x200000a4
 80007c0:	20000000 	.word	0x20000000
 80007c4:	080018b8 	.word	0x080018b8

080007c8 <get_date>:

char* months[12] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
char* suffix[4]  = { "st", "nd", "rd", "th" };

date_t get_date()
{
 80007c8:	b490      	push	{r4, r7}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint32_t* RTC_DR  = (uint32_t*) (RTC_BASE_ADDR + 0x04);
 80007d0:	4b38      	ldr	r3, [pc, #224]	@ (80008b4 <get_date+0xec>)
 80007d2:	61fb      	str	r3, [r7, #28]
	uint32_t* RTC_ISR  = (uint32_t*) (RTC_BASE_ADDR + 0x0C);
 80007d4:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <get_date+0xf0>)
 80007d6:	61bb      	str	r3, [r7, #24]
	while (((*RTC_ISR >> 5) & 1) == 0);
 80007d8:	bf00      	nop
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d0f8      	beq.n	80007da <get_date+0x12>
	date_t _date;
	_date.day   = (((*RTC_DR >> 4) & 0b11) * 10) + ((*RTC_DR >> 0) & 0xf);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	091b      	lsrs	r3, r3, #4
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4413      	add	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	733b      	strb	r3, [r7, #12]
	_date.month = (((*RTC_DR >> 12) & 0b1) * 10) + ((*RTC_DR >> 8) & 0xf);
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	0b1b      	lsrs	r3, r3, #12
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	b2da      	uxtb	r2, r3
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	753b      	strb	r3, [r7, #20]
	_date.year  = (((*RTC_DR >> 20) & 0xf) * 10) + ((*RTC_DR >> 16) & 0xf) + 2000;
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	0d1b      	lsrs	r3, r3, #20
 8000844:	b29b      	uxth	r3, r3
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	b29b      	uxth	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	b29a      	uxth	r2, r3
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	0c1b      	lsrs	r3, r3, #16
 800085c:	b29b      	uxth	r3, r3
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	b29b      	uxth	r3, r3
 8000864:	4413      	add	r3, r2
 8000866:	b29b      	uxth	r3, r3
 8000868:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800086c:	b29b      	uxth	r3, r3
 800086e:	82fb      	strh	r3, [r7, #22]
	if (_date.day == 1)
 8000870:	7b3b      	ldrb	r3, [r7, #12]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d102      	bne.n	800087c <get_date+0xb4>
	{
		_date.suffix = "st";
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <get_date+0xf4>)
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	e00d      	b.n	8000898 <get_date+0xd0>
	}
	else if (_date.day == 2)
 800087c:	7b3b      	ldrb	r3, [r7, #12]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d102      	bne.n	8000888 <get_date+0xc0>
	{
		_date.suffix = "nd";
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <get_date+0xf8>)
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	e007      	b.n	8000898 <get_date+0xd0>
	}
	else if (_date.day == 3)
 8000888:	7b3b      	ldrb	r3, [r7, #12]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d102      	bne.n	8000894 <get_date+0xcc>
	{
		_date.suffix = "rd";
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <get_date+0xfc>)
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	e001      	b.n	8000898 <get_date+0xd0>
	}
	else
	{
		_date.suffix = "th";
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <get_date+0x100>)
 8000896:	613b      	str	r3, [r7, #16]
	}
	return _date;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	461c      	mov	r4, r3
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80008a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc90      	pop	{r4, r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40002804 	.word	0x40002804
 80008b8:	4000280c 	.word	0x4000280c
 80008bc:	08001908 	.word	0x08001908
 80008c0:	0800190c 	.word	0x0800190c
 80008c4:	08001910 	.word	0x08001910
 80008c8:	08001914 	.word	0x08001914

080008cc <get_time>:

time_t get_time()
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
	uint32_t* RTC_TR  = (uint32_t*) (RTC_BASE_ADDR + 0x00);
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <get_time+0xd0>)
 80008d4:	60fb      	str	r3, [r7, #12]
	uint32_t* RTC_ISR  = (uint32_t*) (RTC_BASE_ADDR + 0x0C);
 80008d6:	4b32      	ldr	r3, [pc, #200]	@ (80009a0 <get_time+0xd4>)
 80008d8:	60bb      	str	r3, [r7, #8]
	while (((*RTC_ISR >> 5) & 1) == 0);
 80008da:	bf00      	nop
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	095b      	lsrs	r3, r3, #5
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d0f8      	beq.n	80008dc <get_time+0x10>
	time_t _time;
	_time.second = (((*RTC_TR >> 4)  & 0b111) * 10) + ((*RTC_TR >> 0 ) & 0xf);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	461a      	mov	r2, r3
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	b2da      	uxtb	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 030f 	and.w	r3, r3, #15
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b2db      	uxtb	r3, r3
 8000912:	70bb      	strb	r3, [r7, #2]
	_time.minute = (((*RTC_TR >> 12) & 0b111) * 10) + ((*RTC_TR >> 8 ) & 0xf);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	0b1b      	lsrs	r3, r3, #12
 800091a:	b2db      	uxtb	r3, r3
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	b2db      	uxtb	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	0092      	lsls	r2, r2, #2
 8000926:	4413      	add	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 030f 	and.w	r3, r3, #15
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4413      	add	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	707b      	strb	r3, [r7, #1]
	_time.hour   = (((*RTC_TR >> 20) & 0b11 ) * 10) + ((*RTC_TR >> 16) & 0xf);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	0d1b      	lsrs	r3, r3, #20
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f003 0303 	and.w	r3, r3, #3
 800094c:	b2db      	uxtb	r3, r3
 800094e:	461a      	mov	r2, r3
 8000950:	0092      	lsls	r2, r2, #2
 8000952:	4413      	add	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	0c1b      	lsrs	r3, r3, #16
 800095e:	b2db      	uxtb	r3, r3
 8000960:	f003 030f 	and.w	r3, r3, #15
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4413      	add	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	703b      	strb	r3, [r7, #0]
	return _time;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	463a      	mov	r2, r7
 8000970:	6812      	ldr	r2, [r2, #0]
 8000972:	4611      	mov	r1, r2
 8000974:	8019      	strh	r1, [r3, #0]
 8000976:	3302      	adds	r3, #2
 8000978:	0c12      	lsrs	r2, r2, #16
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	2300      	movs	r3, #0
 800097e:	793a      	ldrb	r2, [r7, #4]
 8000980:	f362 0307 	bfi	r3, r2, #0, #8
 8000984:	797a      	ldrb	r2, [r7, #5]
 8000986:	f362 230f 	bfi	r3, r2, #8, #8
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40002800 	.word	0x40002800
 80009a0:	4000280c 	.word	0x4000280c

080009a4 <update_date>:

void update_date(uint8_t* date)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	char* DATE = __DATE__;
 80009ac:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <update_date+0xa4>)
 80009ae:	613b      	str	r3, [r7, #16]
	int date_size = strlen(DATE);
 80009b0:	6938      	ldr	r0, [r7, #16]
 80009b2:	f7ff fc15 	bl	80001e0 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 12; i++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	e015      	b.n	80009ec <update_date+0x48>
	{
		if (strstr(DATE, months[i]) != NULL)
 80009c0:	4a22      	ldr	r2, [pc, #136]	@ (8000a4c <update_date+0xa8>)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	4619      	mov	r1, r3
 80009ca:	6938      	ldr	r0, [r7, #16]
 80009cc:	f000 faca 	bl	8000f64 <strstr>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d007      	beq.n	80009e6 <update_date+0x42>
		{
			date[0] = ++i;
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3301      	adds	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	701a      	strb	r2, [r3, #0]
			break;
 80009e4:	e005      	b.n	80009f2 <update_date+0x4e>
	for (int i = 0; i < 12; i++)
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3301      	adds	r3, #1
 80009ea:	61fb      	str	r3, [r7, #28]
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	2b0b      	cmp	r3, #11
 80009f0:	dde6      	ble.n	80009c0 <update_date+0x1c>
		}
	}

	int index = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
	for (int i = 3; i < date_size; i++)
 80009f6:	2303      	movs	r3, #3
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e01b      	b.n	8000a34 <update_date+0x90>
	{
		if (DATE[i] >= '0' && DATE[i] <= '9')
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a06:	d912      	bls.n	8000a2e <update_date+0x8a>
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b39      	cmp	r3, #57	@ 0x39
 8000a12:	d80c      	bhi.n	8000a2e <update_date+0x8a>
		{
			date[index++] = DATE[i] - 48;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	1c59      	adds	r1, r3, #1
 8000a20:	61b9      	str	r1, [r7, #24]
 8000a22:	4619      	mov	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	440b      	add	r3, r1
 8000a28:	3a30      	subs	r2, #48	@ 0x30
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < date_size; i++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbdf      	blt.n	80009fc <update_date+0x58>
		}
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08001918 	.word	0x08001918
 8000a4c:	20000000 	.word	0x20000000

08000a50 <update_time>:

void update_time(uint8_t* time)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	char* TIME = __TIME__;
 8000a58:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <update_time+0x6c>)
 8000a5a:	60fb      	str	r3, [r7, #12]
	int time_size = strlen(TIME);
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff fbbf 	bl	80001e0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < time_size; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	e01b      	b.n	8000aa8 <update_time+0x58>
	{
		if (TIME[i] >= '0' && TIME[i] <= '9')
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a7a:	d912      	bls.n	8000aa2 <update_time+0x52>
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b39      	cmp	r3, #57	@ 0x39
 8000a86:	d80c      	bhi.n	8000aa2 <update_time+0x52>
		{
			time[index++] = TIME[i] - 48;
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	1c59      	adds	r1, r3, #1
 8000a94:	6179      	str	r1, [r7, #20]
 8000a96:	4619      	mov	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	440b      	add	r3, r1
 8000a9c:	3a30      	subs	r2, #48	@ 0x30
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < time_size; i++)
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbdf      	blt.n	8000a70 <update_time+0x20>
		}
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	08001924 	.word	0x08001924

08000ac0 <RTC_Init>:

void RTC_Init()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0
	uint32_t* RTC_TR  = (uint32_t*) (RTC_BASE_ADDR + 0x00);
 8000ac6:	4b6b      	ldr	r3, [pc, #428]	@ (8000c74 <RTC_Init+0x1b4>)
 8000ac8:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t* RTC_DR  = (uint32_t*) (RTC_BASE_ADDR + 0x04);
 8000aca:	4b6b      	ldr	r3, [pc, #428]	@ (8000c78 <RTC_Init+0x1b8>)
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t* RTC_PRER = (uint32_t*) (RTC_BASE_ADDR + 0x10);
 8000ace:	4b6b      	ldr	r3, [pc, #428]	@ (8000c7c <RTC_Init+0x1bc>)
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t* RTC_ISR  = (uint32_t*) (RTC_BASE_ADDR + 0x0C);
 8000ad2:	4b6b      	ldr	r3, [pc, #428]	@ (8000c80 <RTC_Init+0x1c0>)
 8000ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t* RTC_WPR  = (uint32_t*) (RTC_BASE_ADDR + 0x24);
 8000ad6:	4b6b      	ldr	r3, [pc, #428]	@ (8000c84 <RTC_Init+0x1c4>)
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* PWR_CR   = (uint32_t*) (PWR_BASE_ADDR + 0x00);
 8000ada:	4b6b      	ldr	r3, [pc, #428]	@ (8000c88 <RTC_Init+0x1c8>)
 8000adc:	623b      	str	r3, [r7, #32]
	uint32_t* RCC_APB1ENR = (uint32_t*) (RCC_BASE_ADDR + 0x40);
 8000ade:	4b6b      	ldr	r3, [pc, #428]	@ (8000c8c <RTC_Init+0x1cc>)
 8000ae0:	61fb      	str	r3, [r7, #28]
	uint32_t* RCC_BDCR = (uint32_t*) (RCC_BASE_ADDR + 0x70);
 8000ae2:	4b6b      	ldr	r3, [pc, #428]	@ (8000c90 <RTC_Init+0x1d0>)
 8000ae4:	61bb      	str	r3, [r7, #24]
	uint32_t* RCC_CSR  = (uint32_t*) (RCC_BASE_ADDR + 0x74);
 8000ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8000c94 <RTC_Init+0x1d4>)
 8000ae8:	617b      	str	r3, [r7, #20]

	/* enable write access to RTC registers */
	*RCC_APB1ENR |= 1 << 28;
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	601a      	str	r2, [r3, #0]
	*PWR_CR |= 1 << 8;
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000afe:	6a3b      	ldr	r3, [r7, #32]
 8000b00:	601a      	str	r2, [r3, #0]

	/* enable LSI crystal */
	*RCC_CSR |= 1 << 0;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f043 0201 	orr.w	r2, r3, #1
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]

	/* wait until LSI is ready */
	while (((*RCC_CSR >> 1) & 1) == 0);
 8000b0e:	bf00      	nop
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f8      	beq.n	8000b10 <RTC_Init+0x50>

	/* select LSI for RTC and enable RTC clock */
	*RCC_BDCR &= ~(0b11 << 8);
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	601a      	str	r2, [r3, #0]
	*RCC_BDCR |= 0b10 << 8;
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	601a      	str	r2, [r3, #0]
	*RCC_BDCR |= 1 << 15;
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	601a      	str	r2, [r3, #0]

	/* unlock the write protection */
	*RTC_WPR = 0xCA;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	22ca      	movs	r2, #202	@ 0xca
 8000b46:	601a      	str	r2, [r3, #0]
	*RTC_WPR = 0x53;
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	2253      	movs	r2, #83	@ 0x53
 8000b4c:	601a      	str	r2, [r3, #0]

	/* enter Init mode */
	*RTC_ISR |= 1 << 7;
 8000b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b58:	601a      	str	r2, [r3, #0]

	/* wait until RTC is in Init mode */
	while (((*RTC_ISR >> 6) & 1) == 0);
 8000b5a:	bf00      	nop
 8000b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	099b      	lsrs	r3, r3, #6
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f8      	beq.n	8000b5c <RTC_Init+0x9c>

	/* configure ck_apre for calendar and ck_spre for sub secound counter */
	*RTC_PRER = (124 << 16) | 255;
 8000b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000c98 <RTC_Init+0x1d8>)
 8000b6e:	601a      	str	r2, [r3, #0]

	/* configure time and date for RTC */
	uint8_t time[6] = { 0 };
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	809a      	strh	r2, [r3, #4]
	update_time(time);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff66 	bl	8000a50 <update_time>
	*RTC_TR = (time[0] << 20) | (time[1] << 16) | (time[2] << 12) | (time[3] << 8) | (time[4] << 4) | time[5];
 8000b84:	7b3b      	ldrb	r3, [r7, #12]
 8000b86:	051a      	lsls	r2, r3, #20
 8000b88:	7b7b      	ldrb	r3, [r7, #13]
 8000b8a:	041b      	lsls	r3, r3, #16
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	031b      	lsls	r3, r3, #12
 8000b92:	431a      	orrs	r2, r3
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	7c3b      	ldrb	r3, [r7, #16]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	7c7a      	ldrb	r2, [r7, #17]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba8:	601a      	str	r2, [r3, #0]

	uint8_t date[7] = { 0 };
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	f8c3 2003 	str.w	r2, [r3, #3]
	update_date(date);
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fef4 	bl	80009a4 <update_date>
	*RTC_DR &= ~0xffff;
 8000bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0c1b      	lsrs	r3, r3, #16
 8000bc2:	041b      	lsls	r3, r3, #16
 8000bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bc6:	6013      	str	r3, [r2, #0]
	if (date[6] == 0)
 8000bc8:	7abb      	ldrb	r3, [r7, #10]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d120      	bne.n	8000c10 <RTC_Init+0x150>
	{
		*RTC_DR = (date[4] << 20) | (date[5] << 16) | ((date[0] / 10) << 12) | ((date[0] % 10) << 8) | date[1];
 8000bce:	7a3b      	ldrb	r3, [r7, #8]
 8000bd0:	051a      	lsls	r2, r3, #20
 8000bd2:	7a7b      	ldrb	r3, [r7, #9]
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	793b      	ldrb	r3, [r7, #4]
 8000bda:	4930      	ldr	r1, [pc, #192]	@ (8000c9c <RTC_Init+0x1dc>)
 8000bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8000be0:	08db      	lsrs	r3, r3, #3
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	031b      	lsls	r3, r3, #12
 8000be6:	ea42 0003 	orr.w	r0, r2, r3
 8000bea:	793a      	ldrb	r2, [r7, #4]
 8000bec:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <RTC_Init+0x1dc>)
 8000bee:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf2:	08d9      	lsrs	r1, r3, #3
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	4303      	orrs	r3, r0
 8000c04:	797a      	ldrb	r2, [r7, #5]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	e023      	b.n	8000c58 <RTC_Init+0x198>
	}
	else
	{
		*RTC_DR = (date[5] << 20) | (date[6] << 16) | ((date[0] / 10) << 12) | ((date[0] % 10) << 8) | (date[1] << 4) | date[2];
 8000c10:	7a7b      	ldrb	r3, [r7, #9]
 8000c12:	051a      	lsls	r2, r3, #20
 8000c14:	7abb      	ldrb	r3, [r7, #10]
 8000c16:	041b      	lsls	r3, r3, #16
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	793b      	ldrb	r3, [r7, #4]
 8000c1c:	491f      	ldr	r1, [pc, #124]	@ (8000c9c <RTC_Init+0x1dc>)
 8000c1e:	fba1 1303 	umull	r1, r3, r1, r3
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	031b      	lsls	r3, r3, #12
 8000c28:	ea42 0003 	orr.w	r0, r2, r3
 8000c2c:	793a      	ldrb	r2, [r7, #4]
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <RTC_Init+0x1dc>)
 8000c30:	fba3 1302 	umull	r1, r3, r3, r2
 8000c34:	08d9      	lsrs	r1, r3, #3
 8000c36:	460b      	mov	r3, r1
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	ea40 0203 	orr.w	r2, r0, r3
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	011b      	lsls	r3, r3, #4
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	461a      	mov	r2, r3
 8000c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c56:	601a      	str	r2, [r3, #0]
	}
	/* exit the Init mode to finish the sequence */
	*RTC_ISR &= ~(1 << 7);
 8000c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c62:	601a      	str	r2, [r3, #0]

	/* re-active the write protection */
	*RTC_WPR = 0xFF;
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	22ff      	movs	r2, #255	@ 0xff
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	@ 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40002800 	.word	0x40002800
 8000c78:	40002804 	.word	0x40002804
 8000c7c:	40002810 	.word	0x40002810
 8000c80:	4000280c 	.word	0x4000280c
 8000c84:	40002824 	.word	0x40002824
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	40023840 	.word	0x40023840
 8000c90:	40023870 	.word	0x40023870
 8000c94:	40023874 	.word	0x40023874
 8000c98:	007c00ff 	.word	0x007c00ff
 8000c9c:	cccccccd 	.word	0xcccccccd

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf6:	f000 f8f9 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	@ (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f000 f92e 	bl	8000f90 <__errno>
 8000d34:	4603      	mov	r3, r0
 8000d36:	220c      	movs	r2, #12
 8000d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20020000 	.word	0x20020000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	200000b0 	.word	0x200000b0
 8000d68:	20000200 	.word	0x20000200

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <delay_ms+0x38>)
 8000d9a:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 8000dae:	bf00      	nop
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d8fa      	bhi.n	8000db0 <delay_ms+0x20>
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40000024 	.word	0x40000024

08000dcc <delay_us>:

void delay_us(uint16_t us)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000dd6:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <delay_us+0x30>)
 8000dd8:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	801a      	strh	r2, [r3, #0]
	while (*TIM2_CNT < us);
 8000de0:	bf00      	nop
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8fa      	bhi.n	8000de2 <delay_us+0x16>
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40000024 	.word	0x40000024

08000e00 <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <TIM2_Init+0x84>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e84 <TIM2_Init+0x84>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <TIM2_Init+0x84>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 8000e22:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e26:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <TIM2_Init+0x88>)
 8000e2a:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <TIM2_Init+0x8c>)
 8000e2e:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000e30:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <TIM2_Init+0x90>)
 8000e32:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_EGR = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <TIM2_Init+0x94>)
 8000e36:	607b      	str	r3, [r7, #4]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	f023 0310 	bic.w	r3, r3, #16
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	220f      	movs	r2, #15
 8000e4a:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e52:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2200      	movs	r2, #0
 8000e58:	801a      	strh	r2, [r3, #0]

	*TIM2_EGR |= 1 << 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	801a      	strh	r2, [r3, #0]

	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	801a      	strh	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40000028 	.word	0x40000028
 8000e8c:	4000002c 	.word	0x4000002c
 8000e90:	40000024 	.word	0x40000024
 8000e94:	40000014 	.word	0x40000014

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9c:	f7ff ff66 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f000 f869 	bl	8000f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fc2b 	bl	8000724 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000edc:	08001970 	.word	0x08001970
  ldr r2, =_sbss
 8000ee0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ee4:	20000200 	.word	0x20000200

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000030 	.word	0x20000030
 8000f10:	200000b4 	.word	0x200000b4

08000f14 <_vsiprintf_r>:
 8000f14:	b510      	push	{r4, lr}
 8000f16:	b09a      	sub	sp, #104	@ 0x68
 8000f18:	2400      	movs	r4, #0
 8000f1a:	9100      	str	r1, [sp, #0]
 8000f1c:	9104      	str	r1, [sp, #16]
 8000f1e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000f22:	9105      	str	r1, [sp, #20]
 8000f24:	9102      	str	r1, [sp, #8]
 8000f26:	4905      	ldr	r1, [pc, #20]	@ (8000f3c <_vsiprintf_r+0x28>)
 8000f28:	9103      	str	r1, [sp, #12]
 8000f2a:	4669      	mov	r1, sp
 8000f2c:	9419      	str	r4, [sp, #100]	@ 0x64
 8000f2e:	f000 f9af 	bl	8001290 <_svfiprintf_r>
 8000f32:	9b00      	ldr	r3, [sp, #0]
 8000f34:	701c      	strb	r4, [r3, #0]
 8000f36:	b01a      	add	sp, #104	@ 0x68
 8000f38:	bd10      	pop	{r4, pc}
 8000f3a:	bf00      	nop
 8000f3c:	ffff0208 	.word	0xffff0208

08000f40 <vsiprintf>:
 8000f40:	4613      	mov	r3, r2
 8000f42:	460a      	mov	r2, r1
 8000f44:	4601      	mov	r1, r0
 8000f46:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <vsiprintf+0x10>)
 8000f48:	6800      	ldr	r0, [r0, #0]
 8000f4a:	f7ff bfe3 	b.w	8000f14 <_vsiprintf_r>
 8000f4e:	bf00      	nop
 8000f50:	20000034 	.word	0x20000034

08000f54 <memset>:
 8000f54:	4402      	add	r2, r0
 8000f56:	4603      	mov	r3, r0
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d100      	bne.n	8000f5e <memset+0xa>
 8000f5c:	4770      	bx	lr
 8000f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f62:	e7f9      	b.n	8000f58 <memset+0x4>

08000f64 <strstr>:
 8000f64:	780a      	ldrb	r2, [r1, #0]
 8000f66:	b570      	push	{r4, r5, r6, lr}
 8000f68:	b96a      	cbnz	r2, 8000f86 <strstr+0x22>
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d109      	bne.n	8000f84 <strstr+0x20>
 8000f70:	460c      	mov	r4, r1
 8000f72:	4605      	mov	r5, r0
 8000f74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f6      	beq.n	8000f6a <strstr+0x6>
 8000f7c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000f80:	429e      	cmp	r6, r3
 8000f82:	d0f7      	beq.n	8000f74 <strstr+0x10>
 8000f84:	3001      	adds	r0, #1
 8000f86:	7803      	ldrb	r3, [r0, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ef      	bne.n	8000f6c <strstr+0x8>
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	e7ec      	b.n	8000f6a <strstr+0x6>

08000f90 <__errno>:
 8000f90:	4b01      	ldr	r3, [pc, #4]	@ (8000f98 <__errno+0x8>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000034 	.word	0x20000034

08000f9c <__libc_init_array>:
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000fd4 <__libc_init_array+0x38>)
 8000fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8000fd8 <__libc_init_array+0x3c>)
 8000fa2:	1b64      	subs	r4, r4, r5
 8000fa4:	10a4      	asrs	r4, r4, #2
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	42a6      	cmp	r6, r4
 8000faa:	d109      	bne.n	8000fc0 <__libc_init_array+0x24>
 8000fac:	4d0b      	ldr	r5, [pc, #44]	@ (8000fdc <__libc_init_array+0x40>)
 8000fae:	4c0c      	ldr	r4, [pc, #48]	@ (8000fe0 <__libc_init_array+0x44>)
 8000fb0:	f000 fc64 	bl	800187c <_init>
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	10a4      	asrs	r4, r4, #2
 8000fb8:	2600      	movs	r6, #0
 8000fba:	42a6      	cmp	r6, r4
 8000fbc:	d105      	bne.n	8000fca <__libc_init_array+0x2e>
 8000fbe:	bd70      	pop	{r4, r5, r6, pc}
 8000fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fc4:	4798      	blx	r3
 8000fc6:	3601      	adds	r6, #1
 8000fc8:	e7ee      	b.n	8000fa8 <__libc_init_array+0xc>
 8000fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fce:	4798      	blx	r3
 8000fd0:	3601      	adds	r6, #1
 8000fd2:	e7f2      	b.n	8000fba <__libc_init_array+0x1e>
 8000fd4:	08001968 	.word	0x08001968
 8000fd8:	08001968 	.word	0x08001968
 8000fdc:	08001968 	.word	0x08001968
 8000fe0:	0800196c 	.word	0x0800196c

08000fe4 <__retarget_lock_acquire_recursive>:
 8000fe4:	4770      	bx	lr

08000fe6 <__retarget_lock_release_recursive>:
 8000fe6:	4770      	bx	lr

08000fe8 <_free_r>:
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4605      	mov	r5, r0
 8000fec:	2900      	cmp	r1, #0
 8000fee:	d041      	beq.n	8001074 <_free_r+0x8c>
 8000ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ff4:	1f0c      	subs	r4, r1, #4
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	bfb8      	it	lt
 8000ffa:	18e4      	addlt	r4, r4, r3
 8000ffc:	f000 f8e0 	bl	80011c0 <__malloc_lock>
 8001000:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <_free_r+0x90>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	b933      	cbnz	r3, 8001014 <_free_r+0x2c>
 8001006:	6063      	str	r3, [r4, #4]
 8001008:	6014      	str	r4, [r2, #0]
 800100a:	4628      	mov	r0, r5
 800100c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001010:	f000 b8dc 	b.w	80011cc <__malloc_unlock>
 8001014:	42a3      	cmp	r3, r4
 8001016:	d908      	bls.n	800102a <_free_r+0x42>
 8001018:	6820      	ldr	r0, [r4, #0]
 800101a:	1821      	adds	r1, r4, r0
 800101c:	428b      	cmp	r3, r1
 800101e:	bf01      	itttt	eq
 8001020:	6819      	ldreq	r1, [r3, #0]
 8001022:	685b      	ldreq	r3, [r3, #4]
 8001024:	1809      	addeq	r1, r1, r0
 8001026:	6021      	streq	r1, [r4, #0]
 8001028:	e7ed      	b.n	8001006 <_free_r+0x1e>
 800102a:	461a      	mov	r2, r3
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	b10b      	cbz	r3, 8001034 <_free_r+0x4c>
 8001030:	42a3      	cmp	r3, r4
 8001032:	d9fa      	bls.n	800102a <_free_r+0x42>
 8001034:	6811      	ldr	r1, [r2, #0]
 8001036:	1850      	adds	r0, r2, r1
 8001038:	42a0      	cmp	r0, r4
 800103a:	d10b      	bne.n	8001054 <_free_r+0x6c>
 800103c:	6820      	ldr	r0, [r4, #0]
 800103e:	4401      	add	r1, r0
 8001040:	1850      	adds	r0, r2, r1
 8001042:	4283      	cmp	r3, r0
 8001044:	6011      	str	r1, [r2, #0]
 8001046:	d1e0      	bne.n	800100a <_free_r+0x22>
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	6053      	str	r3, [r2, #4]
 800104e:	4408      	add	r0, r1
 8001050:	6010      	str	r0, [r2, #0]
 8001052:	e7da      	b.n	800100a <_free_r+0x22>
 8001054:	d902      	bls.n	800105c <_free_r+0x74>
 8001056:	230c      	movs	r3, #12
 8001058:	602b      	str	r3, [r5, #0]
 800105a:	e7d6      	b.n	800100a <_free_r+0x22>
 800105c:	6820      	ldr	r0, [r4, #0]
 800105e:	1821      	adds	r1, r4, r0
 8001060:	428b      	cmp	r3, r1
 8001062:	bf04      	itt	eq
 8001064:	6819      	ldreq	r1, [r3, #0]
 8001066:	685b      	ldreq	r3, [r3, #4]
 8001068:	6063      	str	r3, [r4, #4]
 800106a:	bf04      	itt	eq
 800106c:	1809      	addeq	r1, r1, r0
 800106e:	6021      	streq	r1, [r4, #0]
 8001070:	6054      	str	r4, [r2, #4]
 8001072:	e7ca      	b.n	800100a <_free_r+0x22>
 8001074:	bd38      	pop	{r3, r4, r5, pc}
 8001076:	bf00      	nop
 8001078:	200001fc 	.word	0x200001fc

0800107c <sbrk_aligned>:
 800107c:	b570      	push	{r4, r5, r6, lr}
 800107e:	4e0f      	ldr	r6, [pc, #60]	@ (80010bc <sbrk_aligned+0x40>)
 8001080:	460c      	mov	r4, r1
 8001082:	6831      	ldr	r1, [r6, #0]
 8001084:	4605      	mov	r5, r0
 8001086:	b911      	cbnz	r1, 800108e <sbrk_aligned+0x12>
 8001088:	f000 fba4 	bl	80017d4 <_sbrk_r>
 800108c:	6030      	str	r0, [r6, #0]
 800108e:	4621      	mov	r1, r4
 8001090:	4628      	mov	r0, r5
 8001092:	f000 fb9f 	bl	80017d4 <_sbrk_r>
 8001096:	1c43      	adds	r3, r0, #1
 8001098:	d103      	bne.n	80010a2 <sbrk_aligned+0x26>
 800109a:	f04f 34ff 	mov.w	r4, #4294967295
 800109e:	4620      	mov	r0, r4
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
 80010a2:	1cc4      	adds	r4, r0, #3
 80010a4:	f024 0403 	bic.w	r4, r4, #3
 80010a8:	42a0      	cmp	r0, r4
 80010aa:	d0f8      	beq.n	800109e <sbrk_aligned+0x22>
 80010ac:	1a21      	subs	r1, r4, r0
 80010ae:	4628      	mov	r0, r5
 80010b0:	f000 fb90 	bl	80017d4 <_sbrk_r>
 80010b4:	3001      	adds	r0, #1
 80010b6:	d1f2      	bne.n	800109e <sbrk_aligned+0x22>
 80010b8:	e7ef      	b.n	800109a <sbrk_aligned+0x1e>
 80010ba:	bf00      	nop
 80010bc:	200001f8 	.word	0x200001f8

080010c0 <_malloc_r>:
 80010c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010c4:	1ccd      	adds	r5, r1, #3
 80010c6:	f025 0503 	bic.w	r5, r5, #3
 80010ca:	3508      	adds	r5, #8
 80010cc:	2d0c      	cmp	r5, #12
 80010ce:	bf38      	it	cc
 80010d0:	250c      	movcc	r5, #12
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	4606      	mov	r6, r0
 80010d6:	db01      	blt.n	80010dc <_malloc_r+0x1c>
 80010d8:	42a9      	cmp	r1, r5
 80010da:	d904      	bls.n	80010e6 <_malloc_r+0x26>
 80010dc:	230c      	movs	r3, #12
 80010de:	6033      	str	r3, [r6, #0]
 80010e0:	2000      	movs	r0, #0
 80010e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80011bc <_malloc_r+0xfc>
 80010ea:	f000 f869 	bl	80011c0 <__malloc_lock>
 80010ee:	f8d8 3000 	ldr.w	r3, [r8]
 80010f2:	461c      	mov	r4, r3
 80010f4:	bb44      	cbnz	r4, 8001148 <_malloc_r+0x88>
 80010f6:	4629      	mov	r1, r5
 80010f8:	4630      	mov	r0, r6
 80010fa:	f7ff ffbf 	bl	800107c <sbrk_aligned>
 80010fe:	1c43      	adds	r3, r0, #1
 8001100:	4604      	mov	r4, r0
 8001102:	d158      	bne.n	80011b6 <_malloc_r+0xf6>
 8001104:	f8d8 4000 	ldr.w	r4, [r8]
 8001108:	4627      	mov	r7, r4
 800110a:	2f00      	cmp	r7, #0
 800110c:	d143      	bne.n	8001196 <_malloc_r+0xd6>
 800110e:	2c00      	cmp	r4, #0
 8001110:	d04b      	beq.n	80011aa <_malloc_r+0xea>
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	4639      	mov	r1, r7
 8001116:	4630      	mov	r0, r6
 8001118:	eb04 0903 	add.w	r9, r4, r3
 800111c:	f000 fb5a 	bl	80017d4 <_sbrk_r>
 8001120:	4581      	cmp	r9, r0
 8001122:	d142      	bne.n	80011aa <_malloc_r+0xea>
 8001124:	6821      	ldr	r1, [r4, #0]
 8001126:	1a6d      	subs	r5, r5, r1
 8001128:	4629      	mov	r1, r5
 800112a:	4630      	mov	r0, r6
 800112c:	f7ff ffa6 	bl	800107c <sbrk_aligned>
 8001130:	3001      	adds	r0, #1
 8001132:	d03a      	beq.n	80011aa <_malloc_r+0xea>
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	442b      	add	r3, r5
 8001138:	6023      	str	r3, [r4, #0]
 800113a:	f8d8 3000 	ldr.w	r3, [r8]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	bb62      	cbnz	r2, 800119c <_malloc_r+0xdc>
 8001142:	f8c8 7000 	str.w	r7, [r8]
 8001146:	e00f      	b.n	8001168 <_malloc_r+0xa8>
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	1b52      	subs	r2, r2, r5
 800114c:	d420      	bmi.n	8001190 <_malloc_r+0xd0>
 800114e:	2a0b      	cmp	r2, #11
 8001150:	d917      	bls.n	8001182 <_malloc_r+0xc2>
 8001152:	1961      	adds	r1, r4, r5
 8001154:	42a3      	cmp	r3, r4
 8001156:	6025      	str	r5, [r4, #0]
 8001158:	bf18      	it	ne
 800115a:	6059      	strne	r1, [r3, #4]
 800115c:	6863      	ldr	r3, [r4, #4]
 800115e:	bf08      	it	eq
 8001160:	f8c8 1000 	streq.w	r1, [r8]
 8001164:	5162      	str	r2, [r4, r5]
 8001166:	604b      	str	r3, [r1, #4]
 8001168:	4630      	mov	r0, r6
 800116a:	f000 f82f 	bl	80011cc <__malloc_unlock>
 800116e:	f104 000b 	add.w	r0, r4, #11
 8001172:	1d23      	adds	r3, r4, #4
 8001174:	f020 0007 	bic.w	r0, r0, #7
 8001178:	1ac2      	subs	r2, r0, r3
 800117a:	bf1c      	itt	ne
 800117c:	1a1b      	subne	r3, r3, r0
 800117e:	50a3      	strne	r3, [r4, r2]
 8001180:	e7af      	b.n	80010e2 <_malloc_r+0x22>
 8001182:	6862      	ldr	r2, [r4, #4]
 8001184:	42a3      	cmp	r3, r4
 8001186:	bf0c      	ite	eq
 8001188:	f8c8 2000 	streq.w	r2, [r8]
 800118c:	605a      	strne	r2, [r3, #4]
 800118e:	e7eb      	b.n	8001168 <_malloc_r+0xa8>
 8001190:	4623      	mov	r3, r4
 8001192:	6864      	ldr	r4, [r4, #4]
 8001194:	e7ae      	b.n	80010f4 <_malloc_r+0x34>
 8001196:	463c      	mov	r4, r7
 8001198:	687f      	ldr	r7, [r7, #4]
 800119a:	e7b6      	b.n	800110a <_malloc_r+0x4a>
 800119c:	461a      	mov	r2, r3
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	42a3      	cmp	r3, r4
 80011a2:	d1fb      	bne.n	800119c <_malloc_r+0xdc>
 80011a4:	2300      	movs	r3, #0
 80011a6:	6053      	str	r3, [r2, #4]
 80011a8:	e7de      	b.n	8001168 <_malloc_r+0xa8>
 80011aa:	230c      	movs	r3, #12
 80011ac:	6033      	str	r3, [r6, #0]
 80011ae:	4630      	mov	r0, r6
 80011b0:	f000 f80c 	bl	80011cc <__malloc_unlock>
 80011b4:	e794      	b.n	80010e0 <_malloc_r+0x20>
 80011b6:	6005      	str	r5, [r0, #0]
 80011b8:	e7d6      	b.n	8001168 <_malloc_r+0xa8>
 80011ba:	bf00      	nop
 80011bc:	200001fc 	.word	0x200001fc

080011c0 <__malloc_lock>:
 80011c0:	4801      	ldr	r0, [pc, #4]	@ (80011c8 <__malloc_lock+0x8>)
 80011c2:	f7ff bf0f 	b.w	8000fe4 <__retarget_lock_acquire_recursive>
 80011c6:	bf00      	nop
 80011c8:	200001f4 	.word	0x200001f4

080011cc <__malloc_unlock>:
 80011cc:	4801      	ldr	r0, [pc, #4]	@ (80011d4 <__malloc_unlock+0x8>)
 80011ce:	f7ff bf0a 	b.w	8000fe6 <__retarget_lock_release_recursive>
 80011d2:	bf00      	nop
 80011d4:	200001f4 	.word	0x200001f4

080011d8 <__ssputs_r>:
 80011d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011dc:	688e      	ldr	r6, [r1, #8]
 80011de:	461f      	mov	r7, r3
 80011e0:	42be      	cmp	r6, r7
 80011e2:	680b      	ldr	r3, [r1, #0]
 80011e4:	4682      	mov	sl, r0
 80011e6:	460c      	mov	r4, r1
 80011e8:	4690      	mov	r8, r2
 80011ea:	d82d      	bhi.n	8001248 <__ssputs_r+0x70>
 80011ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80011f4:	d026      	beq.n	8001244 <__ssputs_r+0x6c>
 80011f6:	6965      	ldr	r5, [r4, #20]
 80011f8:	6909      	ldr	r1, [r1, #16]
 80011fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011fe:	eba3 0901 	sub.w	r9, r3, r1
 8001202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001206:	1c7b      	adds	r3, r7, #1
 8001208:	444b      	add	r3, r9
 800120a:	106d      	asrs	r5, r5, #1
 800120c:	429d      	cmp	r5, r3
 800120e:	bf38      	it	cc
 8001210:	461d      	movcc	r5, r3
 8001212:	0553      	lsls	r3, r2, #21
 8001214:	d527      	bpl.n	8001266 <__ssputs_r+0x8e>
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff ff52 	bl	80010c0 <_malloc_r>
 800121c:	4606      	mov	r6, r0
 800121e:	b360      	cbz	r0, 800127a <__ssputs_r+0xa2>
 8001220:	6921      	ldr	r1, [r4, #16]
 8001222:	464a      	mov	r2, r9
 8001224:	f000 fae6 	bl	80017f4 <memcpy>
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800122e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001232:	81a3      	strh	r3, [r4, #12]
 8001234:	6126      	str	r6, [r4, #16]
 8001236:	6165      	str	r5, [r4, #20]
 8001238:	444e      	add	r6, r9
 800123a:	eba5 0509 	sub.w	r5, r5, r9
 800123e:	6026      	str	r6, [r4, #0]
 8001240:	60a5      	str	r5, [r4, #8]
 8001242:	463e      	mov	r6, r7
 8001244:	42be      	cmp	r6, r7
 8001246:	d900      	bls.n	800124a <__ssputs_r+0x72>
 8001248:	463e      	mov	r6, r7
 800124a:	6820      	ldr	r0, [r4, #0]
 800124c:	4632      	mov	r2, r6
 800124e:	4641      	mov	r1, r8
 8001250:	f000 faa6 	bl	80017a0 <memmove>
 8001254:	68a3      	ldr	r3, [r4, #8]
 8001256:	1b9b      	subs	r3, r3, r6
 8001258:	60a3      	str	r3, [r4, #8]
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	4433      	add	r3, r6
 800125e:	6023      	str	r3, [r4, #0]
 8001260:	2000      	movs	r0, #0
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001266:	462a      	mov	r2, r5
 8001268:	f000 fad2 	bl	8001810 <_realloc_r>
 800126c:	4606      	mov	r6, r0
 800126e:	2800      	cmp	r0, #0
 8001270:	d1e0      	bne.n	8001234 <__ssputs_r+0x5c>
 8001272:	6921      	ldr	r1, [r4, #16]
 8001274:	4650      	mov	r0, sl
 8001276:	f7ff feb7 	bl	8000fe8 <_free_r>
 800127a:	230c      	movs	r3, #12
 800127c:	f8ca 3000 	str.w	r3, [sl]
 8001280:	89a3      	ldrh	r3, [r4, #12]
 8001282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001286:	81a3      	strh	r3, [r4, #12]
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	e7e9      	b.n	8001262 <__ssputs_r+0x8a>
	...

08001290 <_svfiprintf_r>:
 8001290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001294:	4698      	mov	r8, r3
 8001296:	898b      	ldrh	r3, [r1, #12]
 8001298:	061b      	lsls	r3, r3, #24
 800129a:	b09d      	sub	sp, #116	@ 0x74
 800129c:	4607      	mov	r7, r0
 800129e:	460d      	mov	r5, r1
 80012a0:	4614      	mov	r4, r2
 80012a2:	d510      	bpl.n	80012c6 <_svfiprintf_r+0x36>
 80012a4:	690b      	ldr	r3, [r1, #16]
 80012a6:	b973      	cbnz	r3, 80012c6 <_svfiprintf_r+0x36>
 80012a8:	2140      	movs	r1, #64	@ 0x40
 80012aa:	f7ff ff09 	bl	80010c0 <_malloc_r>
 80012ae:	6028      	str	r0, [r5, #0]
 80012b0:	6128      	str	r0, [r5, #16]
 80012b2:	b930      	cbnz	r0, 80012c2 <_svfiprintf_r+0x32>
 80012b4:	230c      	movs	r3, #12
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	b01d      	add	sp, #116	@ 0x74
 80012be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	616b      	str	r3, [r5, #20]
 80012c6:	2300      	movs	r3, #0
 80012c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80012ca:	2320      	movs	r3, #32
 80012cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80012d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80012d4:	2330      	movs	r3, #48	@ 0x30
 80012d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001474 <_svfiprintf_r+0x1e4>
 80012da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80012de:	f04f 0901 	mov.w	r9, #1
 80012e2:	4623      	mov	r3, r4
 80012e4:	469a      	mov	sl, r3
 80012e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012ea:	b10a      	cbz	r2, 80012f0 <_svfiprintf_r+0x60>
 80012ec:	2a25      	cmp	r2, #37	@ 0x25
 80012ee:	d1f9      	bne.n	80012e4 <_svfiprintf_r+0x54>
 80012f0:	ebba 0b04 	subs.w	fp, sl, r4
 80012f4:	d00b      	beq.n	800130e <_svfiprintf_r+0x7e>
 80012f6:	465b      	mov	r3, fp
 80012f8:	4622      	mov	r2, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	4638      	mov	r0, r7
 80012fe:	f7ff ff6b 	bl	80011d8 <__ssputs_r>
 8001302:	3001      	adds	r0, #1
 8001304:	f000 80a7 	beq.w	8001456 <_svfiprintf_r+0x1c6>
 8001308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800130a:	445a      	add	r2, fp
 800130c:	9209      	str	r2, [sp, #36]	@ 0x24
 800130e:	f89a 3000 	ldrb.w	r3, [sl]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 809f 	beq.w	8001456 <_svfiprintf_r+0x1c6>
 8001318:	2300      	movs	r3, #0
 800131a:	f04f 32ff 	mov.w	r2, #4294967295
 800131e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001322:	f10a 0a01 	add.w	sl, sl, #1
 8001326:	9304      	str	r3, [sp, #16]
 8001328:	9307      	str	r3, [sp, #28]
 800132a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800132e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001330:	4654      	mov	r4, sl
 8001332:	2205      	movs	r2, #5
 8001334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001338:	484e      	ldr	r0, [pc, #312]	@ (8001474 <_svfiprintf_r+0x1e4>)
 800133a:	f7fe ff59 	bl	80001f0 <memchr>
 800133e:	9a04      	ldr	r2, [sp, #16]
 8001340:	b9d8      	cbnz	r0, 800137a <_svfiprintf_r+0xea>
 8001342:	06d0      	lsls	r0, r2, #27
 8001344:	bf44      	itt	mi
 8001346:	2320      	movmi	r3, #32
 8001348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800134c:	0711      	lsls	r1, r2, #28
 800134e:	bf44      	itt	mi
 8001350:	232b      	movmi	r3, #43	@ 0x2b
 8001352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001356:	f89a 3000 	ldrb.w	r3, [sl]
 800135a:	2b2a      	cmp	r3, #42	@ 0x2a
 800135c:	d015      	beq.n	800138a <_svfiprintf_r+0xfa>
 800135e:	9a07      	ldr	r2, [sp, #28]
 8001360:	4654      	mov	r4, sl
 8001362:	2000      	movs	r0, #0
 8001364:	f04f 0c0a 	mov.w	ip, #10
 8001368:	4621      	mov	r1, r4
 800136a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800136e:	3b30      	subs	r3, #48	@ 0x30
 8001370:	2b09      	cmp	r3, #9
 8001372:	d94b      	bls.n	800140c <_svfiprintf_r+0x17c>
 8001374:	b1b0      	cbz	r0, 80013a4 <_svfiprintf_r+0x114>
 8001376:	9207      	str	r2, [sp, #28]
 8001378:	e014      	b.n	80013a4 <_svfiprintf_r+0x114>
 800137a:	eba0 0308 	sub.w	r3, r0, r8
 800137e:	fa09 f303 	lsl.w	r3, r9, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	9304      	str	r3, [sp, #16]
 8001386:	46a2      	mov	sl, r4
 8001388:	e7d2      	b.n	8001330 <_svfiprintf_r+0xa0>
 800138a:	9b03      	ldr	r3, [sp, #12]
 800138c:	1d19      	adds	r1, r3, #4
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	9103      	str	r1, [sp, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfbb      	ittet	lt
 8001396:	425b      	neglt	r3, r3
 8001398:	f042 0202 	orrlt.w	r2, r2, #2
 800139c:	9307      	strge	r3, [sp, #28]
 800139e:	9307      	strlt	r3, [sp, #28]
 80013a0:	bfb8      	it	lt
 80013a2:	9204      	strlt	r2, [sp, #16]
 80013a4:	7823      	ldrb	r3, [r4, #0]
 80013a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80013a8:	d10a      	bne.n	80013c0 <_svfiprintf_r+0x130>
 80013aa:	7863      	ldrb	r3, [r4, #1]
 80013ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80013ae:	d132      	bne.n	8001416 <_svfiprintf_r+0x186>
 80013b0:	9b03      	ldr	r3, [sp, #12]
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	9203      	str	r2, [sp, #12]
 80013b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80013bc:	3402      	adds	r4, #2
 80013be:	9305      	str	r3, [sp, #20]
 80013c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001484 <_svfiprintf_r+0x1f4>
 80013c4:	7821      	ldrb	r1, [r4, #0]
 80013c6:	2203      	movs	r2, #3
 80013c8:	4650      	mov	r0, sl
 80013ca:	f7fe ff11 	bl	80001f0 <memchr>
 80013ce:	b138      	cbz	r0, 80013e0 <_svfiprintf_r+0x150>
 80013d0:	9b04      	ldr	r3, [sp, #16]
 80013d2:	eba0 000a 	sub.w	r0, r0, sl
 80013d6:	2240      	movs	r2, #64	@ 0x40
 80013d8:	4082      	lsls	r2, r0
 80013da:	4313      	orrs	r3, r2
 80013dc:	3401      	adds	r4, #1
 80013de:	9304      	str	r3, [sp, #16]
 80013e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013e4:	4824      	ldr	r0, [pc, #144]	@ (8001478 <_svfiprintf_r+0x1e8>)
 80013e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80013ea:	2206      	movs	r2, #6
 80013ec:	f7fe ff00 	bl	80001f0 <memchr>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d036      	beq.n	8001462 <_svfiprintf_r+0x1d2>
 80013f4:	4b21      	ldr	r3, [pc, #132]	@ (800147c <_svfiprintf_r+0x1ec>)
 80013f6:	bb1b      	cbnz	r3, 8001440 <_svfiprintf_r+0x1b0>
 80013f8:	9b03      	ldr	r3, [sp, #12]
 80013fa:	3307      	adds	r3, #7
 80013fc:	f023 0307 	bic.w	r3, r3, #7
 8001400:	3308      	adds	r3, #8
 8001402:	9303      	str	r3, [sp, #12]
 8001404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001406:	4433      	add	r3, r6
 8001408:	9309      	str	r3, [sp, #36]	@ 0x24
 800140a:	e76a      	b.n	80012e2 <_svfiprintf_r+0x52>
 800140c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001410:	460c      	mov	r4, r1
 8001412:	2001      	movs	r0, #1
 8001414:	e7a8      	b.n	8001368 <_svfiprintf_r+0xd8>
 8001416:	2300      	movs	r3, #0
 8001418:	3401      	adds	r4, #1
 800141a:	9305      	str	r3, [sp, #20]
 800141c:	4619      	mov	r1, r3
 800141e:	f04f 0c0a 	mov.w	ip, #10
 8001422:	4620      	mov	r0, r4
 8001424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001428:	3a30      	subs	r2, #48	@ 0x30
 800142a:	2a09      	cmp	r2, #9
 800142c:	d903      	bls.n	8001436 <_svfiprintf_r+0x1a6>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0c6      	beq.n	80013c0 <_svfiprintf_r+0x130>
 8001432:	9105      	str	r1, [sp, #20]
 8001434:	e7c4      	b.n	80013c0 <_svfiprintf_r+0x130>
 8001436:	fb0c 2101 	mla	r1, ip, r1, r2
 800143a:	4604      	mov	r4, r0
 800143c:	2301      	movs	r3, #1
 800143e:	e7f0      	b.n	8001422 <_svfiprintf_r+0x192>
 8001440:	ab03      	add	r3, sp, #12
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	462a      	mov	r2, r5
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <_svfiprintf_r+0x1f0>)
 8001448:	a904      	add	r1, sp, #16
 800144a:	4638      	mov	r0, r7
 800144c:	f3af 8000 	nop.w
 8001450:	1c42      	adds	r2, r0, #1
 8001452:	4606      	mov	r6, r0
 8001454:	d1d6      	bne.n	8001404 <_svfiprintf_r+0x174>
 8001456:	89ab      	ldrh	r3, [r5, #12]
 8001458:	065b      	lsls	r3, r3, #25
 800145a:	f53f af2d 	bmi.w	80012b8 <_svfiprintf_r+0x28>
 800145e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001460:	e72c      	b.n	80012bc <_svfiprintf_r+0x2c>
 8001462:	ab03      	add	r3, sp, #12
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	462a      	mov	r2, r5
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <_svfiprintf_r+0x1f0>)
 800146a:	a904      	add	r1, sp, #16
 800146c:	4638      	mov	r0, r7
 800146e:	f000 f879 	bl	8001564 <_printf_i>
 8001472:	e7ed      	b.n	8001450 <_svfiprintf_r+0x1c0>
 8001474:	0800192d 	.word	0x0800192d
 8001478:	08001937 	.word	0x08001937
 800147c:	00000000 	.word	0x00000000
 8001480:	080011d9 	.word	0x080011d9
 8001484:	08001933 	.word	0x08001933

08001488 <_printf_common>:
 8001488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800148c:	4616      	mov	r6, r2
 800148e:	4698      	mov	r8, r3
 8001490:	688a      	ldr	r2, [r1, #8]
 8001492:	690b      	ldr	r3, [r1, #16]
 8001494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001498:	4293      	cmp	r3, r2
 800149a:	bfb8      	it	lt
 800149c:	4613      	movlt	r3, r2
 800149e:	6033      	str	r3, [r6, #0]
 80014a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80014a4:	4607      	mov	r7, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	b10a      	cbz	r2, 80014ae <_printf_common+0x26>
 80014aa:	3301      	adds	r3, #1
 80014ac:	6033      	str	r3, [r6, #0]
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	0699      	lsls	r1, r3, #26
 80014b2:	bf42      	ittt	mi
 80014b4:	6833      	ldrmi	r3, [r6, #0]
 80014b6:	3302      	addmi	r3, #2
 80014b8:	6033      	strmi	r3, [r6, #0]
 80014ba:	6825      	ldr	r5, [r4, #0]
 80014bc:	f015 0506 	ands.w	r5, r5, #6
 80014c0:	d106      	bne.n	80014d0 <_printf_common+0x48>
 80014c2:	f104 0a19 	add.w	sl, r4, #25
 80014c6:	68e3      	ldr	r3, [r4, #12]
 80014c8:	6832      	ldr	r2, [r6, #0]
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	42ab      	cmp	r3, r5
 80014ce:	dc26      	bgt.n	800151e <_printf_common+0x96>
 80014d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80014d4:	6822      	ldr	r2, [r4, #0]
 80014d6:	3b00      	subs	r3, #0
 80014d8:	bf18      	it	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	0692      	lsls	r2, r2, #26
 80014de:	d42b      	bmi.n	8001538 <_printf_common+0xb0>
 80014e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80014e4:	4641      	mov	r1, r8
 80014e6:	4638      	mov	r0, r7
 80014e8:	47c8      	blx	r9
 80014ea:	3001      	adds	r0, #1
 80014ec:	d01e      	beq.n	800152c <_printf_common+0xa4>
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	6922      	ldr	r2, [r4, #16]
 80014f2:	f003 0306 	and.w	r3, r3, #6
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf02      	ittt	eq
 80014fa:	68e5      	ldreq	r5, [r4, #12]
 80014fc:	6833      	ldreq	r3, [r6, #0]
 80014fe:	1aed      	subeq	r5, r5, r3
 8001500:	68a3      	ldr	r3, [r4, #8]
 8001502:	bf0c      	ite	eq
 8001504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001508:	2500      	movne	r5, #0
 800150a:	4293      	cmp	r3, r2
 800150c:	bfc4      	itt	gt
 800150e:	1a9b      	subgt	r3, r3, r2
 8001510:	18ed      	addgt	r5, r5, r3
 8001512:	2600      	movs	r6, #0
 8001514:	341a      	adds	r4, #26
 8001516:	42b5      	cmp	r5, r6
 8001518:	d11a      	bne.n	8001550 <_printf_common+0xc8>
 800151a:	2000      	movs	r0, #0
 800151c:	e008      	b.n	8001530 <_printf_common+0xa8>
 800151e:	2301      	movs	r3, #1
 8001520:	4652      	mov	r2, sl
 8001522:	4641      	mov	r1, r8
 8001524:	4638      	mov	r0, r7
 8001526:	47c8      	blx	r9
 8001528:	3001      	adds	r0, #1
 800152a:	d103      	bne.n	8001534 <_printf_common+0xac>
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001534:	3501      	adds	r5, #1
 8001536:	e7c6      	b.n	80014c6 <_printf_common+0x3e>
 8001538:	18e1      	adds	r1, r4, r3
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	2030      	movs	r0, #48	@ 0x30
 800153e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001542:	4422      	add	r2, r4
 8001544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800154c:	3302      	adds	r3, #2
 800154e:	e7c7      	b.n	80014e0 <_printf_common+0x58>
 8001550:	2301      	movs	r3, #1
 8001552:	4622      	mov	r2, r4
 8001554:	4641      	mov	r1, r8
 8001556:	4638      	mov	r0, r7
 8001558:	47c8      	blx	r9
 800155a:	3001      	adds	r0, #1
 800155c:	d0e6      	beq.n	800152c <_printf_common+0xa4>
 800155e:	3601      	adds	r6, #1
 8001560:	e7d9      	b.n	8001516 <_printf_common+0x8e>
	...

08001564 <_printf_i>:
 8001564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001568:	7e0f      	ldrb	r7, [r1, #24]
 800156a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800156c:	2f78      	cmp	r7, #120	@ 0x78
 800156e:	4691      	mov	r9, r2
 8001570:	4680      	mov	r8, r0
 8001572:	460c      	mov	r4, r1
 8001574:	469a      	mov	sl, r3
 8001576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800157a:	d807      	bhi.n	800158c <_printf_i+0x28>
 800157c:	2f62      	cmp	r7, #98	@ 0x62
 800157e:	d80a      	bhi.n	8001596 <_printf_i+0x32>
 8001580:	2f00      	cmp	r7, #0
 8001582:	f000 80d1 	beq.w	8001728 <_printf_i+0x1c4>
 8001586:	2f58      	cmp	r7, #88	@ 0x58
 8001588:	f000 80b8 	beq.w	80016fc <_printf_i+0x198>
 800158c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001594:	e03a      	b.n	800160c <_printf_i+0xa8>
 8001596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800159a:	2b15      	cmp	r3, #21
 800159c:	d8f6      	bhi.n	800158c <_printf_i+0x28>
 800159e:	a101      	add	r1, pc, #4	@ (adr r1, 80015a4 <_printf_i+0x40>)
 80015a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015a4:	080015fd 	.word	0x080015fd
 80015a8:	08001611 	.word	0x08001611
 80015ac:	0800158d 	.word	0x0800158d
 80015b0:	0800158d 	.word	0x0800158d
 80015b4:	0800158d 	.word	0x0800158d
 80015b8:	0800158d 	.word	0x0800158d
 80015bc:	08001611 	.word	0x08001611
 80015c0:	0800158d 	.word	0x0800158d
 80015c4:	0800158d 	.word	0x0800158d
 80015c8:	0800158d 	.word	0x0800158d
 80015cc:	0800158d 	.word	0x0800158d
 80015d0:	0800170f 	.word	0x0800170f
 80015d4:	0800163b 	.word	0x0800163b
 80015d8:	080016c9 	.word	0x080016c9
 80015dc:	0800158d 	.word	0x0800158d
 80015e0:	0800158d 	.word	0x0800158d
 80015e4:	08001731 	.word	0x08001731
 80015e8:	0800158d 	.word	0x0800158d
 80015ec:	0800163b 	.word	0x0800163b
 80015f0:	0800158d 	.word	0x0800158d
 80015f4:	0800158d 	.word	0x0800158d
 80015f8:	080016d1 	.word	0x080016d1
 80015fc:	6833      	ldr	r3, [r6, #0]
 80015fe:	1d1a      	adds	r2, r3, #4
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6032      	str	r2, [r6, #0]
 8001604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800160c:	2301      	movs	r3, #1
 800160e:	e09c      	b.n	800174a <_printf_i+0x1e6>
 8001610:	6833      	ldr	r3, [r6, #0]
 8001612:	6820      	ldr	r0, [r4, #0]
 8001614:	1d19      	adds	r1, r3, #4
 8001616:	6031      	str	r1, [r6, #0]
 8001618:	0606      	lsls	r6, r0, #24
 800161a:	d501      	bpl.n	8001620 <_printf_i+0xbc>
 800161c:	681d      	ldr	r5, [r3, #0]
 800161e:	e003      	b.n	8001628 <_printf_i+0xc4>
 8001620:	0645      	lsls	r5, r0, #25
 8001622:	d5fb      	bpl.n	800161c <_printf_i+0xb8>
 8001624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001628:	2d00      	cmp	r5, #0
 800162a:	da03      	bge.n	8001634 <_printf_i+0xd0>
 800162c:	232d      	movs	r3, #45	@ 0x2d
 800162e:	426d      	negs	r5, r5
 8001630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001634:	4858      	ldr	r0, [pc, #352]	@ (8001798 <_printf_i+0x234>)
 8001636:	230a      	movs	r3, #10
 8001638:	e011      	b.n	800165e <_printf_i+0xfa>
 800163a:	6821      	ldr	r1, [r4, #0]
 800163c:	6833      	ldr	r3, [r6, #0]
 800163e:	0608      	lsls	r0, r1, #24
 8001640:	f853 5b04 	ldr.w	r5, [r3], #4
 8001644:	d402      	bmi.n	800164c <_printf_i+0xe8>
 8001646:	0649      	lsls	r1, r1, #25
 8001648:	bf48      	it	mi
 800164a:	b2ad      	uxthmi	r5, r5
 800164c:	2f6f      	cmp	r7, #111	@ 0x6f
 800164e:	4852      	ldr	r0, [pc, #328]	@ (8001798 <_printf_i+0x234>)
 8001650:	6033      	str	r3, [r6, #0]
 8001652:	bf14      	ite	ne
 8001654:	230a      	movne	r3, #10
 8001656:	2308      	moveq	r3, #8
 8001658:	2100      	movs	r1, #0
 800165a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800165e:	6866      	ldr	r6, [r4, #4]
 8001660:	60a6      	str	r6, [r4, #8]
 8001662:	2e00      	cmp	r6, #0
 8001664:	db05      	blt.n	8001672 <_printf_i+0x10e>
 8001666:	6821      	ldr	r1, [r4, #0]
 8001668:	432e      	orrs	r6, r5
 800166a:	f021 0104 	bic.w	r1, r1, #4
 800166e:	6021      	str	r1, [r4, #0]
 8001670:	d04b      	beq.n	800170a <_printf_i+0x1a6>
 8001672:	4616      	mov	r6, r2
 8001674:	fbb5 f1f3 	udiv	r1, r5, r3
 8001678:	fb03 5711 	mls	r7, r3, r1, r5
 800167c:	5dc7      	ldrb	r7, [r0, r7]
 800167e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001682:	462f      	mov	r7, r5
 8001684:	42bb      	cmp	r3, r7
 8001686:	460d      	mov	r5, r1
 8001688:	d9f4      	bls.n	8001674 <_printf_i+0x110>
 800168a:	2b08      	cmp	r3, #8
 800168c:	d10b      	bne.n	80016a6 <_printf_i+0x142>
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	07df      	lsls	r7, r3, #31
 8001692:	d508      	bpl.n	80016a6 <_printf_i+0x142>
 8001694:	6923      	ldr	r3, [r4, #16]
 8001696:	6861      	ldr	r1, [r4, #4]
 8001698:	4299      	cmp	r1, r3
 800169a:	bfde      	ittt	le
 800169c:	2330      	movle	r3, #48	@ 0x30
 800169e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80016a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80016a6:	1b92      	subs	r2, r2, r6
 80016a8:	6122      	str	r2, [r4, #16]
 80016aa:	f8cd a000 	str.w	sl, [sp]
 80016ae:	464b      	mov	r3, r9
 80016b0:	aa03      	add	r2, sp, #12
 80016b2:	4621      	mov	r1, r4
 80016b4:	4640      	mov	r0, r8
 80016b6:	f7ff fee7 	bl	8001488 <_printf_common>
 80016ba:	3001      	adds	r0, #1
 80016bc:	d14a      	bne.n	8001754 <_printf_i+0x1f0>
 80016be:	f04f 30ff 	mov.w	r0, #4294967295
 80016c2:	b004      	add	sp, #16
 80016c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	f043 0320 	orr.w	r3, r3, #32
 80016ce:	6023      	str	r3, [r4, #0]
 80016d0:	4832      	ldr	r0, [pc, #200]	@ (800179c <_printf_i+0x238>)
 80016d2:	2778      	movs	r7, #120	@ 0x78
 80016d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	6831      	ldr	r1, [r6, #0]
 80016dc:	061f      	lsls	r7, r3, #24
 80016de:	f851 5b04 	ldr.w	r5, [r1], #4
 80016e2:	d402      	bmi.n	80016ea <_printf_i+0x186>
 80016e4:	065f      	lsls	r7, r3, #25
 80016e6:	bf48      	it	mi
 80016e8:	b2ad      	uxthmi	r5, r5
 80016ea:	6031      	str	r1, [r6, #0]
 80016ec:	07d9      	lsls	r1, r3, #31
 80016ee:	bf44      	itt	mi
 80016f0:	f043 0320 	orrmi.w	r3, r3, #32
 80016f4:	6023      	strmi	r3, [r4, #0]
 80016f6:	b11d      	cbz	r5, 8001700 <_printf_i+0x19c>
 80016f8:	2310      	movs	r3, #16
 80016fa:	e7ad      	b.n	8001658 <_printf_i+0xf4>
 80016fc:	4826      	ldr	r0, [pc, #152]	@ (8001798 <_printf_i+0x234>)
 80016fe:	e7e9      	b.n	80016d4 <_printf_i+0x170>
 8001700:	6823      	ldr	r3, [r4, #0]
 8001702:	f023 0320 	bic.w	r3, r3, #32
 8001706:	6023      	str	r3, [r4, #0]
 8001708:	e7f6      	b.n	80016f8 <_printf_i+0x194>
 800170a:	4616      	mov	r6, r2
 800170c:	e7bd      	b.n	800168a <_printf_i+0x126>
 800170e:	6833      	ldr	r3, [r6, #0]
 8001710:	6825      	ldr	r5, [r4, #0]
 8001712:	6961      	ldr	r1, [r4, #20]
 8001714:	1d18      	adds	r0, r3, #4
 8001716:	6030      	str	r0, [r6, #0]
 8001718:	062e      	lsls	r6, r5, #24
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	d501      	bpl.n	8001722 <_printf_i+0x1be>
 800171e:	6019      	str	r1, [r3, #0]
 8001720:	e002      	b.n	8001728 <_printf_i+0x1c4>
 8001722:	0668      	lsls	r0, r5, #25
 8001724:	d5fb      	bpl.n	800171e <_printf_i+0x1ba>
 8001726:	8019      	strh	r1, [r3, #0]
 8001728:	2300      	movs	r3, #0
 800172a:	6123      	str	r3, [r4, #16]
 800172c:	4616      	mov	r6, r2
 800172e:	e7bc      	b.n	80016aa <_printf_i+0x146>
 8001730:	6833      	ldr	r3, [r6, #0]
 8001732:	1d1a      	adds	r2, r3, #4
 8001734:	6032      	str	r2, [r6, #0]
 8001736:	681e      	ldr	r6, [r3, #0]
 8001738:	6862      	ldr	r2, [r4, #4]
 800173a:	2100      	movs	r1, #0
 800173c:	4630      	mov	r0, r6
 800173e:	f7fe fd57 	bl	80001f0 <memchr>
 8001742:	b108      	cbz	r0, 8001748 <_printf_i+0x1e4>
 8001744:	1b80      	subs	r0, r0, r6
 8001746:	6060      	str	r0, [r4, #4]
 8001748:	6863      	ldr	r3, [r4, #4]
 800174a:	6123      	str	r3, [r4, #16]
 800174c:	2300      	movs	r3, #0
 800174e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001752:	e7aa      	b.n	80016aa <_printf_i+0x146>
 8001754:	6923      	ldr	r3, [r4, #16]
 8001756:	4632      	mov	r2, r6
 8001758:	4649      	mov	r1, r9
 800175a:	4640      	mov	r0, r8
 800175c:	47d0      	blx	sl
 800175e:	3001      	adds	r0, #1
 8001760:	d0ad      	beq.n	80016be <_printf_i+0x15a>
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	079b      	lsls	r3, r3, #30
 8001766:	d413      	bmi.n	8001790 <_printf_i+0x22c>
 8001768:	68e0      	ldr	r0, [r4, #12]
 800176a:	9b03      	ldr	r3, [sp, #12]
 800176c:	4298      	cmp	r0, r3
 800176e:	bfb8      	it	lt
 8001770:	4618      	movlt	r0, r3
 8001772:	e7a6      	b.n	80016c2 <_printf_i+0x15e>
 8001774:	2301      	movs	r3, #1
 8001776:	4632      	mov	r2, r6
 8001778:	4649      	mov	r1, r9
 800177a:	4640      	mov	r0, r8
 800177c:	47d0      	blx	sl
 800177e:	3001      	adds	r0, #1
 8001780:	d09d      	beq.n	80016be <_printf_i+0x15a>
 8001782:	3501      	adds	r5, #1
 8001784:	68e3      	ldr	r3, [r4, #12]
 8001786:	9903      	ldr	r1, [sp, #12]
 8001788:	1a5b      	subs	r3, r3, r1
 800178a:	42ab      	cmp	r3, r5
 800178c:	dcf2      	bgt.n	8001774 <_printf_i+0x210>
 800178e:	e7eb      	b.n	8001768 <_printf_i+0x204>
 8001790:	2500      	movs	r5, #0
 8001792:	f104 0619 	add.w	r6, r4, #25
 8001796:	e7f5      	b.n	8001784 <_printf_i+0x220>
 8001798:	0800193e 	.word	0x0800193e
 800179c:	0800194f 	.word	0x0800194f

080017a0 <memmove>:
 80017a0:	4288      	cmp	r0, r1
 80017a2:	b510      	push	{r4, lr}
 80017a4:	eb01 0402 	add.w	r4, r1, r2
 80017a8:	d902      	bls.n	80017b0 <memmove+0x10>
 80017aa:	4284      	cmp	r4, r0
 80017ac:	4623      	mov	r3, r4
 80017ae:	d807      	bhi.n	80017c0 <memmove+0x20>
 80017b0:	1e43      	subs	r3, r0, #1
 80017b2:	42a1      	cmp	r1, r4
 80017b4:	d008      	beq.n	80017c8 <memmove+0x28>
 80017b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80017be:	e7f8      	b.n	80017b2 <memmove+0x12>
 80017c0:	4402      	add	r2, r0
 80017c2:	4601      	mov	r1, r0
 80017c4:	428a      	cmp	r2, r1
 80017c6:	d100      	bne.n	80017ca <memmove+0x2a>
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80017d2:	e7f7      	b.n	80017c4 <memmove+0x24>

080017d4 <_sbrk_r>:
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	4d06      	ldr	r5, [pc, #24]	@ (80017f0 <_sbrk_r+0x1c>)
 80017d8:	2300      	movs	r3, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	602b      	str	r3, [r5, #0]
 80017e0:	f7ff fa8e 	bl	8000d00 <_sbrk>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	d102      	bne.n	80017ee <_sbrk_r+0x1a>
 80017e8:	682b      	ldr	r3, [r5, #0]
 80017ea:	b103      	cbz	r3, 80017ee <_sbrk_r+0x1a>
 80017ec:	6023      	str	r3, [r4, #0]
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
 80017f0:	200001f0 	.word	0x200001f0

080017f4 <memcpy>:
 80017f4:	440a      	add	r2, r1
 80017f6:	4291      	cmp	r1, r2
 80017f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80017fc:	d100      	bne.n	8001800 <memcpy+0xc>
 80017fe:	4770      	bx	lr
 8001800:	b510      	push	{r4, lr}
 8001802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800180a:	4291      	cmp	r1, r2
 800180c:	d1f9      	bne.n	8001802 <memcpy+0xe>
 800180e:	bd10      	pop	{r4, pc}

08001810 <_realloc_r>:
 8001810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001814:	4607      	mov	r7, r0
 8001816:	4614      	mov	r4, r2
 8001818:	460d      	mov	r5, r1
 800181a:	b921      	cbnz	r1, 8001826 <_realloc_r+0x16>
 800181c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001820:	4611      	mov	r1, r2
 8001822:	f7ff bc4d 	b.w	80010c0 <_malloc_r>
 8001826:	b92a      	cbnz	r2, 8001834 <_realloc_r+0x24>
 8001828:	f7ff fbde 	bl	8000fe8 <_free_r>
 800182c:	4625      	mov	r5, r4
 800182e:	4628      	mov	r0, r5
 8001830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001834:	f000 f81a 	bl	800186c <_malloc_usable_size_r>
 8001838:	4284      	cmp	r4, r0
 800183a:	4606      	mov	r6, r0
 800183c:	d802      	bhi.n	8001844 <_realloc_r+0x34>
 800183e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001842:	d8f4      	bhi.n	800182e <_realloc_r+0x1e>
 8001844:	4621      	mov	r1, r4
 8001846:	4638      	mov	r0, r7
 8001848:	f7ff fc3a 	bl	80010c0 <_malloc_r>
 800184c:	4680      	mov	r8, r0
 800184e:	b908      	cbnz	r0, 8001854 <_realloc_r+0x44>
 8001850:	4645      	mov	r5, r8
 8001852:	e7ec      	b.n	800182e <_realloc_r+0x1e>
 8001854:	42b4      	cmp	r4, r6
 8001856:	4622      	mov	r2, r4
 8001858:	4629      	mov	r1, r5
 800185a:	bf28      	it	cs
 800185c:	4632      	movcs	r2, r6
 800185e:	f7ff ffc9 	bl	80017f4 <memcpy>
 8001862:	4629      	mov	r1, r5
 8001864:	4638      	mov	r0, r7
 8001866:	f7ff fbbf 	bl	8000fe8 <_free_r>
 800186a:	e7f1      	b.n	8001850 <_realloc_r+0x40>

0800186c <_malloc_usable_size_r>:
 800186c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001870:	1f18      	subs	r0, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	bfbc      	itt	lt
 8001876:	580b      	ldrlt	r3, [r1, r0]
 8001878:	18c0      	addlt	r0, r0, r3
 800187a:	4770      	bx	lr

0800187c <_init>:
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	bf00      	nop
 8001880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001882:	bc08      	pop	{r3}
 8001884:	469e      	mov	lr, r3
 8001886:	4770      	bx	lr

08001888 <_fini>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr
