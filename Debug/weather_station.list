
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002dc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000474  08000474  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000474  08000474  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000474  08000474  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000474  08000474  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000474  08000474  00001474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800047c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000480  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000480  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001546  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000624  00000000  00000000  0000357a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00003ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000159  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013e95  00000000  00000000  00003ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027fa  00000000  00000000  00017d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec9f  00000000  00000000  0001a578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b4  00000000  00000000  0009925c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00099810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800045c 	.word	0x0800045c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800045c 	.word	0x0800045c

080001d8 <main>:
#include "main.h"
#include "timer.h"

int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	TIM2_Init();
 80001de:	f000 f89b 	bl	8000318 <TIM2_Init>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	4b19      	ldr	r3, [pc, #100]	@ (800024c <main+0x74>)
 80001e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ea:	4a18      	ldr	r2, [pc, #96]	@ (800024c <main+0x74>)
 80001ec:	f043 0308 	orr.w	r3, r3, #8
 80001f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80001f2:	4b16      	ldr	r3, [pc, #88]	@ (800024c <main+0x74>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	f003 0308 	and.w	r3, r3, #8
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE + 0x00);
 80001fe:	4b14      	ldr	r3, [pc, #80]	@ (8000250 <main+0x78>)
 8000200:	60fb      	str	r3, [r7, #12]
	*GPIOD_MODER &= ~(0b11 << 30);
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= 0b01 << 30;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOD_ODR = (uint32_t*) (GPIOD_BASE + 0x14);
 800021a:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <main+0x7c>)
 800021c:	60bb      	str	r3, [r7, #8]
	while (1)
	{
		*GPIOD_ODR |= 1 << 15;
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]
		delay_ms(2000);
 800022a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800022e:	f000 f855 	bl	80002dc <delay_ms>
		*GPIOD_ODR &= ~(1 << 15);
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	601a      	str	r2, [r3, #0]
		delay_ms(2000);
 800023e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000242:	f000 f84b 	bl	80002dc <delay_ms>
		*GPIOD_ODR |= 1 << 15;
 8000246:	bf00      	nop
 8000248:	e7e9      	b.n	800021e <main+0x46>
 800024a:	bf00      	nop
 800024c:	40023800 	.word	0x40023800
 8000250:	40020c00 	.word	0x40020c00
 8000254:	40020c14 	.word	0x40020c14

08000258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800025c:	bf00      	nop
 800025e:	e7fd      	b.n	800025c <NMI_Handler+0x4>

08000260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <HardFault_Handler+0x4>

08000268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <MemManage_Handler+0x4>

08000270 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <BusFault_Handler+0x4>

08000278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <UsageFault_Handler+0x4>

08000280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ae:	f000 f89d 	bl	80003ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <SystemInit+0x20>)
 80002be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002c2:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <SystemInit+0x20>)
 80002c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 80002e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <delay_ms+0x38>)
 80002e6:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002ee:	fb02 f303 	mul.w	r3, r2, r3
 80002f2:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 80002fa:	bf00      	nop
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	68ba      	ldr	r2, [r7, #8]
 8000302:	429a      	cmp	r2, r3
 8000304:	d8fa      	bhi.n	80002fc <delay_ms+0x20>
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	40000024 	.word	0x40000024

08000318 <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <TIM2_Init+0x70>)
 8000324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000326:	4a18      	ldr	r2, [pc, #96]	@ (8000388 <TIM2_Init+0x70>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6413      	str	r3, [r2, #64]	@ 0x40
 800032e:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <TIM2_Init+0x70>)
 8000330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 800033a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800033e:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <TIM2_Init+0x74>)
 8000342:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 8000344:	4b12      	ldr	r3, [pc, #72]	@ (8000390 <TIM2_Init+0x78>)
 8000346:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <TIM2_Init+0x7c>)
 800034a:	60bb      	str	r3, [r7, #8]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	f023 0310 	bic.w	r3, r3, #16
 8000354:	b29a      	uxth	r2, r3
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 800035a:	693b      	ldr	r3, [r7, #16]
 800035c:	220f      	movs	r2, #15
 800035e:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f04f 32ff 	mov.w	r2, #4294967295
 8000366:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	2200      	movs	r2, #0
 800036c:	801a      	strh	r2, [r3, #0]

//	*TIM2_CR1 |= 1 << 7;
	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	881b      	ldrh	r3, [r3, #0]
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	b29a      	uxth	r2, r3
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	801a      	strh	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	371c      	adds	r7, #28
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40023800 	.word	0x40023800
 800038c:	40000028 	.word	0x40000028
 8000390:	4000002c 	.word	0x4000002c
 8000394:	40000024 	.word	0x40000024

08000398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800039c:	f7ff ff8c 	bl	80002b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	@ (80003d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	@ (80003d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	@ (80003dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	@ (80003e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	@ (80003e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003c6:	f000 f825 	bl	8000414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ca:	f7ff ff05 	bl	80001d8 <main>
  bx  lr    
 80003ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003dc:	0800047c 	.word	0x0800047c
  ldr r2, =_sbss
 80003e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e4:	20000024 	.word	0x20000024

080003e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_IncTick+0x20>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <HAL_IncTick+0x24>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4413      	add	r3, r2
 80003fc:	4a04      	ldr	r2, [pc, #16]	@ (8000410 <HAL_IncTick+0x24>)
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	20000000 	.word	0x20000000
 8000410:	20000020 	.word	0x20000020

08000414 <__libc_init_array>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	4d0d      	ldr	r5, [pc, #52]	@ (800044c <__libc_init_array+0x38>)
 8000418:	4c0d      	ldr	r4, [pc, #52]	@ (8000450 <__libc_init_array+0x3c>)
 800041a:	1b64      	subs	r4, r4, r5
 800041c:	10a4      	asrs	r4, r4, #2
 800041e:	2600      	movs	r6, #0
 8000420:	42a6      	cmp	r6, r4
 8000422:	d109      	bne.n	8000438 <__libc_init_array+0x24>
 8000424:	4d0b      	ldr	r5, [pc, #44]	@ (8000454 <__libc_init_array+0x40>)
 8000426:	4c0c      	ldr	r4, [pc, #48]	@ (8000458 <__libc_init_array+0x44>)
 8000428:	f000 f818 	bl	800045c <_init>
 800042c:	1b64      	subs	r4, r4, r5
 800042e:	10a4      	asrs	r4, r4, #2
 8000430:	2600      	movs	r6, #0
 8000432:	42a6      	cmp	r6, r4
 8000434:	d105      	bne.n	8000442 <__libc_init_array+0x2e>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f855 3b04 	ldr.w	r3, [r5], #4
 800043c:	4798      	blx	r3
 800043e:	3601      	adds	r6, #1
 8000440:	e7ee      	b.n	8000420 <__libc_init_array+0xc>
 8000442:	f855 3b04 	ldr.w	r3, [r5], #4
 8000446:	4798      	blx	r3
 8000448:	3601      	adds	r6, #1
 800044a:	e7f2      	b.n	8000432 <__libc_init_array+0x1e>
 800044c:	08000474 	.word	0x08000474
 8000450:	08000474 	.word	0x08000474
 8000454:	08000474 	.word	0x08000474
 8000458:	08000478 	.word	0x08000478

0800045c <_init>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr

08000468 <_fini>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	bf00      	nop
 800046c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046e:	bc08      	pop	{r3}
 8000470:	469e      	mov	lr, r3
 8000472:	4770      	bx	lr
