
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000414  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005ac  080005ac  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005ac  080005ac  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005ac  080005ac  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005ac  080005ac  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005ac  080005ac  000015ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005b0  080005b0  000015b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005b4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005b8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005b8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b67  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000869  00000000  00000000  00003b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00004408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000199  00000000  00000000  00004658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014265  00000000  00000000  000047f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000389e  00000000  00000000  00018a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee16  00000000  00000000  0001c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b10a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ac  00000000  00000000  0009b150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000594 	.word	0x08000594

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000594 	.word	0x08000594

080001d8 <DHT11_Init>:
	VCC: 3V
	DATA: PC14
	GND: GND
 */
void DHT11_Init()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	delay_ms(2000);
 80001de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001e2:	f000 f8f1 	bl	80003c8 <delay_ms>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <DHT11_Init+0x60>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ee:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <DHT11_Init+0x60>)
 80001f0:	f043 0304 	orr.w	r3, r3, #4
 80001f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80001f6:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <DHT11_Init+0x60>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	f003 0304 	and.w	r3, r3, #4
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <DHT11_Init+0x64>)
 8000204:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <DHT11_Init+0x68>)
 8000208:	60bb      	str	r3, [r7, #8]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	601a      	str	r2, [r3, #0]

	/* pull up voltage to work at free status */
	*GPIOC_ODR |= 1 << 14;
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020800 	.word	0x40020800
 8000240:	40020814 	.word	0x40020814

08000244 <I2C1_Init>:
	GND: GND
	PB8: SCL
	PB9: SDA
 */
void I2C1_Init()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	4b30      	ldr	r3, [pc, #192]	@ (8000310 <I2C1_Init+0xcc>)
 8000250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000252:	4a2f      	ldr	r2, [pc, #188]	@ (8000310 <I2C1_Init+0xcc>)
 8000254:	f043 0302 	orr.w	r3, r3, #2
 8000258:	6313      	str	r3, [r2, #48]	@ 0x30
 800025a:	4b2d      	ldr	r3, [pc, #180]	@ (8000310 <I2C1_Init+0xcc>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	f003 0302 	and.w	r3, r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 8000266:	4b2b      	ldr	r3, [pc, #172]	@ (8000314 <I2C1_Init+0xd0>)
 8000268:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRH = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 800026a:	4b2b      	ldr	r3, [pc, #172]	@ (8000318 <I2C1_Init+0xd4>)
 800026c:	623b      	str	r3, [r7, #32]
	uint32_t* GPIOB_OTYPER = (uint32_t*) (GPIOB_BASE_ADDR + 0x04);
 800026e:	4b2b      	ldr	r3, [pc, #172]	@ (800031c <I2C1_Init+0xd8>)
 8000270:	61fb      	str	r3, [r7, #28]

	/* Configure PB8 & PB9 at AF */
	*GPIOB_MODER &= ~(0xf << (8 * 2));
 8000272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800027a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800027c:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << (8 * 2)) | (0b10 << (9 * 2));
 800027e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f443 2220 	orr.w	r2, r3, #655360	@ 0xa0000
 8000286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000288:	601a      	str	r2, [r3, #0]

	*GPIOB_OTYPER |= (1 << 8) | (1 << 9);
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	601a      	str	r2, [r3, #0]

	/* Select AF04 */
	*GPIOB_AFRH &= ~(0xff << 0);
 8000296:	6a3b      	ldr	r3, [r7, #32]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800029e:	6a3b      	ldr	r3, [r7, #32]
 80002a0:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= (4 << 0) | (4 << 4);
 80002a2:	6a3b      	ldr	r3, [r7, #32]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 0244 	orr.w	r2, r3, #68	@ 0x44
 80002aa:	6a3b      	ldr	r3, [r7, #32]
 80002ac:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 80002ae:	2300      	movs	r3, #0
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	4b17      	ldr	r3, [pc, #92]	@ (8000310 <I2C1_Init+0xcc>)
 80002b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002b6:	4a16      	ldr	r2, [pc, #88]	@ (8000310 <I2C1_Init+0xcc>)
 80002b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80002be:	4b14      	ldr	r3, [pc, #80]	@ (8000310 <I2C1_Init+0xcc>)
 80002c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80002ca:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <I2C1_Init+0xdc>)
 80002cc:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_CR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x04);
 80002ce:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <I2C1_Init+0xe0>)
 80002d0:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_CCR = (uint16_t*) (I2C1_BASE_ADDR + 0x1C);
 80002d2:	4b15      	ldr	r3, [pc, #84]	@ (8000328 <I2C1_Init+0xe4>)
 80002d4:	613b      	str	r3, [r7, #16]
	uint16_t* I2C_TRISE = (uint16_t*) (I2C1_BASE_ADDR + 0x20);
 80002d6:	4b15      	ldr	r3, [pc, #84]	@ (800032c <I2C1_Init+0xe8>)
 80002d8:	60fb      	str	r3, [r7, #12]

	/* configure I2C clock frequency = 16MHz */
	*I2C_CR2 |= 16 << 0;
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	b29a      	uxth	r2, r3
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	801a      	strh	r2, [r3, #0]

	/* configure SCL to generate 100kHz */
	*I2C_CCR = 80;
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	2250      	movs	r2, #80	@ 0x50
 80002ec:	801a      	strh	r2, [r3, #0]

	/* Set rise time */
	*I2C_TRISE = 16 + 1;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	2211      	movs	r2, #17
 80002f2:	801a      	strh	r2, [r3, #0]

	/* enable I2C */
	*I2C_CR1 |= 1 << 0;
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	b29a      	uxth	r2, r3
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	801a      	strh	r2, [r3, #0]
	delay_us(100);
 8000302:	2064      	movs	r0, #100	@ 0x64
 8000304:	f000 f87e 	bl	8000404 <delay_us>
}
 8000308:	bf00      	nop
 800030a:	3728      	adds	r7, #40	@ 0x28
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40023800 	.word	0x40023800
 8000314:	40020400 	.word	0x40020400
 8000318:	40020424 	.word	0x40020424
 800031c:	40020404 	.word	0x40020404
 8000320:	40005400 	.word	0x40005400
 8000324:	40005404 	.word	0x40005404
 8000328:	4000541c 	.word	0x4000541c
 800032c:	40005420 	.word	0x40005420

08000330 <main>:

uint8_t data[5] = { 0 };
char data_correct = 0;

int main()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	TIM2_Init();
 8000334:	f000 f880 	bl	8000438 <TIM2_Init>
	DHT11_Init();
 8000338:	f7ff ff4e 	bl	80001d8 <DHT11_Init>
	I2C1_Init();
 800033c:	f7ff ff82 	bl	8000244 <I2C1_Init>

	while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <main+0x10>

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000348:	bf00      	nop
 800034a:	e7fd      	b.n	8000348 <NMI_Handler+0x4>

0800034c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000350:	bf00      	nop
 8000352:	e7fd      	b.n	8000350 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <MemManage_Handler+0x4>

0800035c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <BusFault_Handler+0x4>

08000364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <UsageFault_Handler+0x4>

0800036c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039a:	f000 f8c3 	bl	8000524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
	...

080003a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	@ (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 80003d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <delay_ms+0x38>)
 80003d2:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 80003e6:	bf00      	nop
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d8fa      	bhi.n	80003e8 <delay_ms+0x20>
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40000024 	.word	0x40000024

08000404 <delay_us>:

void delay_us(uint16_t us)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	80fb      	strh	r3, [r7, #6]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 800040e:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <delay_us+0x30>)
 8000410:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	2200      	movs	r2, #0
 8000416:	801a      	strh	r2, [r3, #0]
	while (*TIM2_CNT < us);
 8000418:	bf00      	nop
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	881b      	ldrh	r3, [r3, #0]
 800041e:	88fa      	ldrh	r2, [r7, #6]
 8000420:	429a      	cmp	r2, r3
 8000422:	d8fa      	bhi.n	800041a <delay_us+0x16>
}
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40000024 	.word	0x40000024

08000438 <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 8000438:	b480      	push	{r7}
 800043a:	b087      	sub	sp, #28
 800043c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	4b1e      	ldr	r3, [pc, #120]	@ (80004bc <TIM2_Init+0x84>)
 8000444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000446:	4a1d      	ldr	r2, [pc, #116]	@ (80004bc <TIM2_Init+0x84>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6413      	str	r3, [r2, #64]	@ 0x40
 800044e:	4b1b      	ldr	r3, [pc, #108]	@ (80004bc <TIM2_Init+0x84>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 800045a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800045e:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 8000460:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <TIM2_Init+0x88>)
 8000462:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 8000464:	4b17      	ldr	r3, [pc, #92]	@ (80004c4 <TIM2_Init+0x8c>)
 8000466:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000468:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <TIM2_Init+0x90>)
 800046a:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_EGR = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 800046c:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <TIM2_Init+0x94>)
 800046e:	607b      	str	r3, [r7, #4]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	f023 0310 	bic.w	r3, r3, #16
 8000478:	b29a      	uxth	r2, r3
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	220f      	movs	r2, #15
 8000482:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f04f 32ff 	mov.w	r2, #4294967295
 800048a:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2200      	movs	r2, #0
 8000490:	801a      	strh	r2, [r3, #0]

	*TIM2_EGR |= 1 << 0;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	f043 0301 	orr.w	r3, r3, #1
 800049a:	b29a      	uxth	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	801a      	strh	r2, [r3, #0]

	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	801a      	strh	r2, [r3, #0]
}
 80004ae:	bf00      	nop
 80004b0:	371c      	adds	r7, #28
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40000028 	.word	0x40000028
 80004c4:	4000002c 	.word	0x4000002c
 80004c8:	40000024 	.word	0x40000024
 80004cc:	40000014 	.word	0x40000014

080004d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004d4:	f7ff ff66 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopFillZerobss+0x22>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fe:	f000 f825 	bl	800054c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000502:	f7ff ff15 	bl	8000330 <main>
  bx  lr    
 8000506:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000514:	080005b4 	.word	0x080005b4
  ldr r2, =_sbss
 8000518:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800051c:	20000024 	.word	0x20000024

08000520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC_IRQHandler>
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	@ (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000020 	.word	0x20000020

0800054c <__libc_init_array>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	4d0d      	ldr	r5, [pc, #52]	@ (8000584 <__libc_init_array+0x38>)
 8000550:	4c0d      	ldr	r4, [pc, #52]	@ (8000588 <__libc_init_array+0x3c>)
 8000552:	1b64      	subs	r4, r4, r5
 8000554:	10a4      	asrs	r4, r4, #2
 8000556:	2600      	movs	r6, #0
 8000558:	42a6      	cmp	r6, r4
 800055a:	d109      	bne.n	8000570 <__libc_init_array+0x24>
 800055c:	4d0b      	ldr	r5, [pc, #44]	@ (800058c <__libc_init_array+0x40>)
 800055e:	4c0c      	ldr	r4, [pc, #48]	@ (8000590 <__libc_init_array+0x44>)
 8000560:	f000 f818 	bl	8000594 <_init>
 8000564:	1b64      	subs	r4, r4, r5
 8000566:	10a4      	asrs	r4, r4, #2
 8000568:	2600      	movs	r6, #0
 800056a:	42a6      	cmp	r6, r4
 800056c:	d105      	bne.n	800057a <__libc_init_array+0x2e>
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f855 3b04 	ldr.w	r3, [r5], #4
 8000574:	4798      	blx	r3
 8000576:	3601      	adds	r6, #1
 8000578:	e7ee      	b.n	8000558 <__libc_init_array+0xc>
 800057a:	f855 3b04 	ldr.w	r3, [r5], #4
 800057e:	4798      	blx	r3
 8000580:	3601      	adds	r6, #1
 8000582:	e7f2      	b.n	800056a <__libc_init_array+0x1e>
 8000584:	080005ac 	.word	0x080005ac
 8000588:	080005ac 	.word	0x080005ac
 800058c:	080005ac 	.word	0x080005ac
 8000590:	080005b0 	.word	0x080005b0

08000594 <_init>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	bf00      	nop
 8000598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059a:	bc08      	pop	{r3}
 800059c:	469e      	mov	lr, r3
 800059e:	4770      	bx	lr

080005a0 <_fini>:
 80005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a2:	bf00      	nop
 80005a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a6:	bc08      	pop	{r3}
 80005a8:	469e      	mov	lr, r3
 80005aa:	4770      	bx	lr
