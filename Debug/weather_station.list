
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000085c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009f4  080009f4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009f4  080009f4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080009f4  080009f4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080009f4  080009f4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009f4  080009f4  000019f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009f8  080009f8  000019f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080009fc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000a00  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000a00  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cb6  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000089a  00000000  00000000  00003cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00004588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a7  00000000  00000000  000047e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014265  00000000  00000000  0000498f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003aec  00000000  00000000  00018bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee33  00000000  00000000  0001c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f0  00000000  00000000  0009b558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009dc 	.word	0x080009dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080009dc 	.word	0x080009dc

080001d8 <DHT11_Init>:
	VCC: 3V
	DATA: PC14
	GND: GND
 */
void DHT11_Init()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	delay_ms(2000);
 80001de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001e2:	f000 fb15 	bl	8000810 <delay_ms>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <DHT11_Init+0x60>)
 80001ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ee:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <DHT11_Init+0x60>)
 80001f0:	f043 0304 	orr.w	r3, r3, #4
 80001f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80001f6:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <DHT11_Init+0x60>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	f003 0304 	and.w	r3, r3, #4
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <DHT11_Init+0x64>)
 8000204:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 8000206:	4b0e      	ldr	r3, [pc, #56]	@ (8000240 <DHT11_Init+0x68>)
 8000208:	60bb      	str	r3, [r7, #8]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	601a      	str	r2, [r3, #0]

	/* pull up voltage to work at free status */
	*GPIOC_ODR |= 1 << 14;
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020800 	.word	0x40020800
 8000240:	40020814 	.word	0x40020814

08000244 <LCD_Init>:
#include "main.h"
#include "lcd1602.h"
#include "timer.h"

void LCD_Init()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	/* after power on, wait for more than 40ms after VCC rises to 2.7 V */
	delay_ms(50);
 8000248:	2032      	movs	r0, #50	@ 0x32
 800024a:	f000 fae1 	bl	8000810 <delay_ms>

	/* function set */
	master_funcSet(0b0011);
 800024e:	2003      	movs	r0, #3
 8000250:	f000 f836 	bl	80002c0 <master_funcSet>
	delay_ms(5);
 8000254:	2005      	movs	r0, #5
 8000256:	f000 fadb 	bl	8000810 <delay_ms>
	master_funcSet(0b0011);
 800025a:	2003      	movs	r0, #3
 800025c:	f000 f830 	bl	80002c0 <master_funcSet>
	delay_us(110);
 8000260:	206e      	movs	r0, #110	@ 0x6e
 8000262:	f000 faf3 	bl	800084c <delay_us>
	master_funcSet(0b0011);
 8000266:	2003      	movs	r0, #3
 8000268:	f000 f82a 	bl	80002c0 <master_funcSet>
	delay_us(110);
 800026c:	206e      	movs	r0, #110	@ 0x6e
 800026e:	f000 faed 	bl	800084c <delay_us>
	master_funcSet(0b0010);
 8000272:	2002      	movs	r0, #2
 8000274:	f000 f824 	bl	80002c0 <master_funcSet>
	delay_us(110);
 8000278:	206e      	movs	r0, #110	@ 0x6e
 800027a:	f000 fae7 	bl	800084c <delay_us>

	/* select 4-bit operation */
	master_sendCMD(0x28);
 800027e:	2028      	movs	r0, #40	@ 0x28
 8000280:	f000 f950 	bl	8000524 <master_sendCMD>
	delay_us(40);
 8000284:	2028      	movs	r0, #40	@ 0x28
 8000286:	f000 fae1 	bl	800084c <delay_us>

	/* Display Off */
	master_sendCMD(0x08);
 800028a:	2008      	movs	r0, #8
 800028c:	f000 f94a 	bl	8000524 <master_sendCMD>
	delay_us(40);
 8000290:	2028      	movs	r0, #40	@ 0x28
 8000292:	f000 fadb 	bl	800084c <delay_us>

	/* clear display */
	master_sendCMD(0x01);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 f944 	bl	8000524 <master_sendCMD>
	delay_ms(2);
 800029c:	2002      	movs	r0, #2
 800029e:	f000 fab7 	bl	8000810 <delay_ms>

	/* entry mode set */
	master_sendCMD(0x06);
 80002a2:	2006      	movs	r0, #6
 80002a4:	f000 f93e 	bl	8000524 <master_sendCMD>
	delay_us(40);
 80002a8:	2028      	movs	r0, #40	@ 0x28
 80002aa:	f000 facf 	bl	800084c <delay_us>

	/* Display ON */
	master_sendCMD(0xE);
 80002ae:	200e      	movs	r0, #14
 80002b0:	f000 f938 	bl	8000524 <master_sendCMD>
	delay_us(40);
 80002b4:	2028      	movs	r0, #40	@ 0x28
 80002b6:	f000 fac9 	bl	800084c <delay_us>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <master_funcSet>:

void master_funcSet(uint8_t data)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80002ca:	4b3c      	ldr	r3, [pc, #240]	@ (80003bc <master_funcSet+0xfc>)
 80002cc:	61fb      	str	r3, [r7, #28]
	uint16_t* I2C_SR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x14);
 80002ce:	4b3c      	ldr	r3, [pc, #240]	@ (80003c0 <master_funcSet+0x100>)
 80002d0:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_SR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x18);
 80002d2:	4b3c      	ldr	r3, [pc, #240]	@ (80003c4 <master_funcSet+0x104>)
 80002d4:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_DR  = (uint16_t*) (I2C1_BASE_ADDR + 0x10);
 80002d6:	4b3c      	ldr	r3, [pc, #240]	@ (80003c8 <master_funcSet+0x108>)
 80002d8:	613b      	str	r3, [r7, #16]

	/* wait until bus is free */
	while (((*I2C_SR2 >> 1) & 1) == 1);
 80002da:	bf00      	nop
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	085b      	lsrs	r3, r3, #1
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f7      	bne.n	80002dc <master_funcSet+0x1c>

	/* generate START condition */
	*I2C_CR1 |= 1 << 8;
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	801a      	strh	r2, [r3, #0]

	/* wait for START condition is generated */
	while ((*I2C_SR1 & 1) == 0);
 80002fa:	bf00      	nop
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f9      	beq.n	80002fc <master_funcSet+0x3c>

	/* send slave address */
	volatile uint16_t tmp = *I2C_SR1;
 8000308:	69bb      	ldr	r3, [r7, #24]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	81fb      	strh	r3, [r7, #14]
	*I2C_DR = (0x27 << 1) | WRITE;
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	224e      	movs	r2, #78	@ 0x4e
 8000312:	801a      	strh	r2, [r3, #0]

	/* wait until the slave address is sent and slave response ACK */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 8000314:	bf00      	nop
 8000316:	69bb      	ldr	r3, [r7, #24]
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	085b      	lsrs	r3, r3, #1
 800031c:	b29b      	uxth	r3, r3
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f7      	beq.n	8000316 <master_funcSet+0x56>
	tmp = *I2C_SR1;
 8000326:	69bb      	ldr	r3, [r7, #24]
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	81fb      	strh	r3, [r7, #14]
	tmp = *I2C_SR2;
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	81fb      	strh	r3, [r7, #14]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 8000332:	bf00      	nop
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	09db      	lsrs	r3, r3, #7
 800033a:	b29b      	uxth	r3, r3
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f7      	beq.n	8000334 <master_funcSet+0x74>

	/* send data or instruction */
	*I2C_DR = (data << 4) | CMD;
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	b21b      	sxth	r3, r3
 8000348:	011b      	lsls	r3, r3, #4
 800034a:	b21b      	sxth	r3, r3
 800034c:	f043 030c 	orr.w	r3, r3, #12
 8000350:	b21b      	sxth	r3, r3
 8000352:	b29a      	uxth	r2, r3
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 8000358:	bf00      	nop
 800035a:	69bb      	ldr	r3, [r7, #24]
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	09db      	lsrs	r3, r3, #7
 8000360:	b29b      	uxth	r3, r3
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f7      	beq.n	800035a <master_funcSet+0x9a>

	/* clear bit EN */
	delay_us(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 fa6e 	bl	800084c <delay_us>
	*I2C_DR = (data << 4) | 0b1000;
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	b21b      	sxth	r3, r3
 8000374:	011b      	lsls	r3, r3, #4
 8000376:	b21b      	sxth	r3, r3
 8000378:	f043 0308 	orr.w	r3, r3, #8
 800037c:	b21b      	sxth	r3, r3
 800037e:	b29a      	uxth	r2, r3
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty and transfer finished */
	while ((((*I2C_SR1 >> 7) & 1) == 0) && (((*I2C_SR1 >> 2) & 1) == 0));
 8000384:	bf00      	nop
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	881b      	ldrh	r3, [r3, #0]
 800038a:	09db      	lsrs	r3, r3, #7
 800038c:	b29b      	uxth	r3, r3
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d107      	bne.n	80003a6 <master_funcSet+0xe6>
 8000396:	69bb      	ldr	r3, [r7, #24]
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	089b      	lsrs	r3, r3, #2
 800039c:	b29b      	uxth	r3, r3
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0ef      	beq.n	8000386 <master_funcSet+0xc6>

	/* generate STOP condition */
	*I2C_CR1 |= 1 << 9;
 80003a6:	69fb      	ldr	r3, [r7, #28]
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	801a      	strh	r2, [r3, #0]
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40005400 	.word	0x40005400
 80003c0:	40005414 	.word	0x40005414
 80003c4:	40005418 	.word	0x40005418
 80003c8:	40005410 	.word	0x40005410

080003cc <master_sendDATA>:

void master_sendDATA(uint8_t data)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80003d6:	4b4f      	ldr	r3, [pc, #316]	@ (8000514 <master_sendDATA+0x148>)
 80003d8:	61fb      	str	r3, [r7, #28]
	uint16_t* I2C_SR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x14);
 80003da:	4b4f      	ldr	r3, [pc, #316]	@ (8000518 <master_sendDATA+0x14c>)
 80003dc:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_SR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x18);
 80003de:	4b4f      	ldr	r3, [pc, #316]	@ (800051c <master_sendDATA+0x150>)
 80003e0:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_DR  = (uint16_t*) (I2C1_BASE_ADDR + 0x10);
 80003e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000520 <master_sendDATA+0x154>)
 80003e4:	613b      	str	r3, [r7, #16]

	/* wait until bus is free */
	while (((*I2C_SR2 >> 1) & 1) == 1);
 80003e6:	bf00      	nop
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	881b      	ldrh	r3, [r3, #0]
 80003ec:	085b      	lsrs	r3, r3, #1
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	f003 0301 	and.w	r3, r3, #1
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1f7      	bne.n	80003e8 <master_sendDATA+0x1c>

	/* generate START condition */
	*I2C_CR1 |= 1 << 8;
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000400:	b29a      	uxth	r2, r3
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	801a      	strh	r2, [r3, #0]

	/* wait for START condition is generated */
	while ((*I2C_SR1 & 1) == 0);
 8000406:	bf00      	nop
 8000408:	69bb      	ldr	r3, [r7, #24]
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	f003 0301 	and.w	r3, r3, #1
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0f9      	beq.n	8000408 <master_sendDATA+0x3c>

	/* send slave address */
	volatile uint16_t tmp = *I2C_SR1;
 8000414:	69bb      	ldr	r3, [r7, #24]
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	81bb      	strh	r3, [r7, #12]
	*I2C_DR = (0x27 << 1) | WRITE;
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	224e      	movs	r2, #78	@ 0x4e
 800041e:	801a      	strh	r2, [r3, #0]

	/* wait until the slave address is sent and slave response ACK */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 8000420:	bf00      	nop
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	085b      	lsrs	r3, r3, #1
 8000428:	b29b      	uxth	r3, r3
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0f7      	beq.n	8000422 <master_sendDATA+0x56>
	tmp = *I2C_SR1;
 8000432:	69bb      	ldr	r3, [r7, #24]
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	81bb      	strh	r3, [r7, #12]
	tmp = *I2C_SR2;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	81bb      	strh	r3, [r7, #12]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 800043e:	bf00      	nop
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	881b      	ldrh	r3, [r3, #0]
 8000444:	09db      	lsrs	r3, r3, #7
 8000446:	b29b      	uxth	r3, r3
 8000448:	f003 0301 	and.w	r3, r3, #1
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f7      	beq.n	8000440 <master_sendDATA+0x74>

	/* send data or instruction */
	uint8_t high_bits = data >> 4;
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	091b      	lsrs	r3, r3, #4
 8000454:	73fb      	strb	r3, [r7, #15]
	*I2C_DR = (high_bits << 4) | DATA;
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	b21b      	sxth	r3, r3
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	b21b      	sxth	r3, r3
 800045e:	f043 030d 	orr.w	r3, r3, #13
 8000462:	b21b      	sxth	r3, r3
 8000464:	b29a      	uxth	r2, r3
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 800046a:	bf00      	nop
 800046c:	69bb      	ldr	r3, [r7, #24]
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	09db      	lsrs	r3, r3, #7
 8000472:	b29b      	uxth	r3, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f7      	beq.n	800046c <master_sendDATA+0xa0>
	delay_us(10);
 800047c:	200a      	movs	r0, #10
 800047e:	f000 f9e5 	bl	800084c <delay_us>

	/* clear bit EN */
	*I2C_DR = (high_bits << 4) | 0b1001;
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	b21b      	sxth	r3, r3
 8000486:	011b      	lsls	r3, r3, #4
 8000488:	b21b      	sxth	r3, r3
 800048a:	f043 0309 	orr.w	r3, r3, #9
 800048e:	b21b      	sxth	r3, r3
 8000490:	b29a      	uxth	r2, r3
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	801a      	strh	r2, [r3, #0]

	/* send data or instruction */
	uint8_t low_bits = data;
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	73bb      	strb	r3, [r7, #14]
	*I2C_DR = (low_bits << 4) | DATA;
 800049a:	7bbb      	ldrb	r3, [r7, #14]
 800049c:	b21b      	sxth	r3, r3
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	b21b      	sxth	r3, r3
 80004a2:	f043 030d 	orr.w	r3, r3, #13
 80004a6:	b21b      	sxth	r3, r3
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 80004ae:	bf00      	nop
 80004b0:	69bb      	ldr	r3, [r7, #24]
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	09db      	lsrs	r3, r3, #7
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d0f7      	beq.n	80004b0 <master_sendDATA+0xe4>
	delay_us(10);
 80004c0:	200a      	movs	r0, #10
 80004c2:	f000 f9c3 	bl	800084c <delay_us>

	/* clear bit EN */
	*I2C_DR = (low_bits << 4) | 0b1001;
 80004c6:	7bbb      	ldrb	r3, [r7, #14]
 80004c8:	b21b      	sxth	r3, r3
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	f043 0309 	orr.w	r3, r3, #9
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	b29a      	uxth	r2, r3
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty and transfer finished */
	while ((((*I2C_SR1 >> 7) & 1) == 0) && (((*I2C_SR1 >> 2) & 1) == 0));
 80004da:	bf00      	nop
 80004dc:	69bb      	ldr	r3, [r7, #24]
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	09db      	lsrs	r3, r3, #7
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d107      	bne.n	80004fc <master_sendDATA+0x130>
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	089b      	lsrs	r3, r3, #2
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0ef      	beq.n	80004dc <master_sendDATA+0x110>

	/* generate STOP condition */
	*I2C_CR1 |= 1 << 9;
 80004fc:	69fb      	ldr	r3, [r7, #28]
 80004fe:	881b      	ldrh	r3, [r3, #0]
 8000500:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000504:	b29a      	uxth	r2, r3
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	801a      	strh	r2, [r3, #0]
}
 800050a:	bf00      	nop
 800050c:	3720      	adds	r7, #32
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40005400 	.word	0x40005400
 8000518:	40005414 	.word	0x40005414
 800051c:	40005418 	.word	0x40005418
 8000520:	40005410 	.word	0x40005410

08000524 <master_sendCMD>:

void master_sendCMD(uint8_t data)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 800052e:	4b4f      	ldr	r3, [pc, #316]	@ (800066c <master_sendCMD+0x148>)
 8000530:	61fb      	str	r3, [r7, #28]
	uint16_t* I2C_SR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x14);
 8000532:	4b4f      	ldr	r3, [pc, #316]	@ (8000670 <master_sendCMD+0x14c>)
 8000534:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_SR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x18);
 8000536:	4b4f      	ldr	r3, [pc, #316]	@ (8000674 <master_sendCMD+0x150>)
 8000538:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_DR  = (uint16_t*) (I2C1_BASE_ADDR + 0x10);
 800053a:	4b4f      	ldr	r3, [pc, #316]	@ (8000678 <master_sendCMD+0x154>)
 800053c:	613b      	str	r3, [r7, #16]

	/* wait until bus is free */
	while (((*I2C_SR2 >> 1) & 1) == 1);
 800053e:	bf00      	nop
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	085b      	lsrs	r3, r3, #1
 8000546:	b29b      	uxth	r3, r3
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1f7      	bne.n	8000540 <master_sendCMD+0x1c>

	/* generate START condition */
	*I2C_CR1 |= 1 << 8;
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000558:	b29a      	uxth	r2, r3
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	801a      	strh	r2, [r3, #0]

	/* wait for START condition is generated */
	while ((*I2C_SR1 & 1) == 0);
 800055e:	bf00      	nop
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f9      	beq.n	8000560 <master_sendCMD+0x3c>

	/* send slave address */
	volatile uint16_t tmp = *I2C_SR1;
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	81bb      	strh	r3, [r7, #12]
	*I2C_DR = (0x27 << 1) | WRITE;
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	224e      	movs	r2, #78	@ 0x4e
 8000576:	801a      	strh	r2, [r3, #0]

	/* wait until the slave address is sent and slave response ACK */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 8000578:	bf00      	nop
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	085b      	lsrs	r3, r3, #1
 8000580:	b29b      	uxth	r3, r3
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f7      	beq.n	800057a <master_sendCMD+0x56>
	tmp = *I2C_SR1;
 800058a:	69bb      	ldr	r3, [r7, #24]
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	81bb      	strh	r3, [r7, #12]
	tmp = *I2C_SR2;
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	81bb      	strh	r3, [r7, #12]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 8000596:	bf00      	nop
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	09db      	lsrs	r3, r3, #7
 800059e:	b29b      	uxth	r3, r3
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0f7      	beq.n	8000598 <master_sendCMD+0x74>

	/* send data or instruction */
	uint8_t high_bits = data >> 4;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	091b      	lsrs	r3, r3, #4
 80005ac:	73fb      	strb	r3, [r7, #15]
	*I2C_DR = (high_bits << 4) | CMD;
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	f043 030c 	orr.w	r3, r3, #12
 80005ba:	b21b      	sxth	r3, r3
 80005bc:	b29a      	uxth	r2, r3
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 80005c2:	bf00      	nop
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	09db      	lsrs	r3, r3, #7
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f7      	beq.n	80005c4 <master_sendCMD+0xa0>
	delay_us(10);
 80005d4:	200a      	movs	r0, #10
 80005d6:	f000 f939 	bl	800084c <delay_us>

	/* clear bit EN */
	*I2C_DR = (high_bits << 4) | 0b1000;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	b21b      	sxth	r3, r3
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	b21b      	sxth	r3, r3
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	801a      	strh	r2, [r3, #0]

	/* send data or instruction */
	uint8_t low_bits = data;
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	73bb      	strb	r3, [r7, #14]
	*I2C_DR = (low_bits << 4) | CMD;
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	b21b      	sxth	r3, r3
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	f043 030c 	orr.w	r3, r3, #12
 80005fe:	b21b      	sxth	r3, r3
 8000600:	b29a      	uxth	r2, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 8000606:	bf00      	nop
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	09db      	lsrs	r3, r3, #7
 800060e:	b29b      	uxth	r3, r3
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f7      	beq.n	8000608 <master_sendCMD+0xe4>
	delay_us(10);
 8000618:	200a      	movs	r0, #10
 800061a:	f000 f917 	bl	800084c <delay_us>

	/* clear bit EN */
	*I2C_DR = (low_bits << 4) | 0b1000;
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	b21b      	sxth	r3, r3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	b21b      	sxth	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b21b      	sxth	r3, r3
 800062c:	b29a      	uxth	r2, r3
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty and transfer finished */
	while ((((*I2C_SR1 >> 7) & 1) == 0) && (((*I2C_SR1 >> 2) & 1) == 0));
 8000632:	bf00      	nop
 8000634:	69bb      	ldr	r3, [r7, #24]
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	09db      	lsrs	r3, r3, #7
 800063a:	b29b      	uxth	r3, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d107      	bne.n	8000654 <master_sendCMD+0x130>
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	089b      	lsrs	r3, r3, #2
 800064a:	b29b      	uxth	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0ef      	beq.n	8000634 <master_sendCMD+0x110>

	/* generate STOP condition */
	*I2C_CR1 |= 1 << 9;
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800065c:	b29a      	uxth	r2, r3
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	801a      	strh	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3720      	adds	r7, #32
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40005400 	.word	0x40005400
 8000670:	40005414 	.word	0x40005414
 8000674:	40005418 	.word	0x40005418
 8000678:	40005410 	.word	0x40005410

0800067c <I2C1_Init>:
	GND: GND
	PB8: SCL
	PB9: SDA
 */
void I2C1_Init()
{
 800067c:	b480      	push	{r7}
 800067e:	b08b      	sub	sp, #44	@ 0x2c
 8000680:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <I2C1_Init+0xcc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	4a2f      	ldr	r2, [pc, #188]	@ (8000748 <I2C1_Init+0xcc>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	@ 0x30
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <I2C1_Init+0xcc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 800069e:	4b2b      	ldr	r3, [pc, #172]	@ (800074c <I2C1_Init+0xd0>)
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRH = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 80006a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <I2C1_Init+0xd4>)
 80006a4:	623b      	str	r3, [r7, #32]
	uint32_t* GPIOB_OTYPER = (uint32_t*) (GPIOB_BASE_ADDR + 0x04);
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <I2C1_Init+0xd8>)
 80006a8:	61fb      	str	r3, [r7, #28]

	/* Configure PB8 & PB9 at AF */
	*GPIOB_MODER &= ~(0xf << (8 * 2));
 80006aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << (8 * 2)) | (0b10 << (9 * 2));
 80006b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f443 2220 	orr.w	r2, r3, #655360	@ 0xa0000
 80006be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c0:	601a      	str	r2, [r3, #0]

	*GPIOB_OTYPER |= (1 << 8) | (1 << 9);
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	601a      	str	r2, [r3, #0]

	/* Select AF04 */
	*GPIOB_AFRH &= ~(0xff << 0);
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80006d6:	6a3b      	ldr	r3, [r7, #32]
 80006d8:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= (4 << 0) | (4 << 4);
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f043 0244 	orr.w	r2, r3, #68	@ 0x44
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <I2C1_Init+0xcc>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	4a16      	ldr	r2, [pc, #88]	@ (8000748 <I2C1_Init+0xcc>)
 80006f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <I2C1_Init+0xcc>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <I2C1_Init+0xdc>)
 8000704:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_CR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x04);
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <I2C1_Init+0xe0>)
 8000708:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_CCR = (uint16_t*) (I2C1_BASE_ADDR + 0x1C);
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <I2C1_Init+0xe4>)
 800070c:	613b      	str	r3, [r7, #16]
	uint16_t* I2C_TRISE = (uint16_t*) (I2C1_BASE_ADDR + 0x20);
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <I2C1_Init+0xe8>)
 8000710:	60fb      	str	r3, [r7, #12]

	/* configure I2C clock frequency = 16MHz */
	*I2C_CR2 |= 16 << 0;
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	f043 0310 	orr.w	r3, r3, #16
 800071a:	b29a      	uxth	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	801a      	strh	r2, [r3, #0]

	/* configure SCL to generate 100kHz */
	*I2C_CCR = 80;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	2250      	movs	r2, #80	@ 0x50
 8000724:	801a      	strh	r2, [r3, #0]

	/* Set rise time */
	*I2C_TRISE = 16 + 1;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2211      	movs	r2, #17
 800072a:	801a      	strh	r2, [r3, #0]

	/* enable I2C */
	*I2C_CR1 |= 1 << 0;
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	b29a      	uxth	r2, r3
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	801a      	strh	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	372c      	adds	r7, #44	@ 0x2c
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40020400 	.word	0x40020400
 8000750:	40020424 	.word	0x40020424
 8000754:	40020404 	.word	0x40020404
 8000758:	40005400 	.word	0x40005400
 800075c:	40005404 	.word	0x40005404
 8000760:	4000541c 	.word	0x4000541c
 8000764:	40005420 	.word	0x40005420

08000768 <main>:

uint8_t data[5] = { 0 };
char data_correct = 0;

int main()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	TIM2_Init();
 800076c:	f000 f888 	bl	8000880 <TIM2_Init>
	DHT11_Init();
 8000770:	f7ff fd32 	bl	80001d8 <DHT11_Init>
	I2C1_Init();
 8000774:	f7ff ff82 	bl	800067c <I2C1_Init>
	LCD_Init();
 8000778:	f7ff fd64 	bl	8000244 <LCD_Init>

	while (1)
	{
		master_sendDATA('a');
 800077c:	2061      	movs	r0, #97	@ 0x61
 800077e:	f7ff fe25 	bl	80003cc <master_sendDATA>
		delay_ms(1000);
 8000782:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000786:	f000 f843 	bl	8000810 <delay_ms>
		master_sendDATA('a');
 800078a:	bf00      	nop
 800078c:	e7f6      	b.n	800077c <main+0x14>

0800078e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000792:	bf00      	nop
 8000794:	e7fd      	b.n	8000792 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	bf00      	nop
 800079c:	e7fd      	b.n	800079a <HardFault_Handler+0x4>

0800079e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <BusFault_Handler+0x4>

080007ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b2:	bf00      	nop
 80007b4:	e7fd      	b.n	80007b2 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e4:	f000 f8c2 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <SystemInit+0x20>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <SystemInit+0x20>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <delay_ms+0x38>)
 800081a:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000822:	fb02 f303 	mul.w	r3, r2, r3
 8000826:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 800082e:	bf00      	nop
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	429a      	cmp	r2, r3
 8000838:	d8fa      	bhi.n	8000830 <delay_ms+0x20>
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40000024 	.word	0x40000024

0800084c <delay_us>:

void delay_us(uint16_t us)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	80fb      	strh	r3, [r7, #6]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <delay_us+0x30>)
 8000858:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2200      	movs	r2, #0
 800085e:	801a      	strh	r2, [r3, #0]
	while (*TIM2_CNT < us);
 8000860:	bf00      	nop
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	88fa      	ldrh	r2, [r7, #6]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8fa      	bhi.n	8000862 <delay_us+0x16>
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	40000024 	.word	0x40000024

08000880 <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <TIM2_Init+0x84>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <TIM2_Init+0x84>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <TIM2_Init+0x84>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 80008a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008a6:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <TIM2_Init+0x88>)
 80008aa:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 80008ac:	4b17      	ldr	r3, [pc, #92]	@ (800090c <TIM2_Init+0x8c>)
 80008ae:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <TIM2_Init+0x90>)
 80008b2:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_EGR = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <TIM2_Init+0x94>)
 80008b6:	607b      	str	r3, [r7, #4]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	f023 0310 	bic.w	r3, r3, #16
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	220f      	movs	r2, #15
 80008ca:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f04f 32ff 	mov.w	r2, #4294967295
 80008d2:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	2200      	movs	r2, #0
 80008d8:	801a      	strh	r2, [r3, #0]

	*TIM2_EGR |= 1 << 0;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	801a      	strh	r2, [r3, #0]

	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	801a      	strh	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	371c      	adds	r7, #28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40000028 	.word	0x40000028
 800090c:	4000002c 	.word	0x4000002c
 8000910:	40000024 	.word	0x40000024
 8000914:	40000014 	.word	0x40000014

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000950 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800091c:	f7ff ff66 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	@ (8000958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	@ (8000964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000946:	f000 f825 	bl	8000994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff ff0d 	bl	8000768 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800095c:	080009fc 	.word	0x080009fc
  ldr r2, =_sbss
 8000960:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000964:	20000024 	.word	0x20000024

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000
 8000990:	20000020 	.word	0x20000020

08000994 <__libc_init_array>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	4d0d      	ldr	r5, [pc, #52]	@ (80009cc <__libc_init_array+0x38>)
 8000998:	4c0d      	ldr	r4, [pc, #52]	@ (80009d0 <__libc_init_array+0x3c>)
 800099a:	1b64      	subs	r4, r4, r5
 800099c:	10a4      	asrs	r4, r4, #2
 800099e:	2600      	movs	r6, #0
 80009a0:	42a6      	cmp	r6, r4
 80009a2:	d109      	bne.n	80009b8 <__libc_init_array+0x24>
 80009a4:	4d0b      	ldr	r5, [pc, #44]	@ (80009d4 <__libc_init_array+0x40>)
 80009a6:	4c0c      	ldr	r4, [pc, #48]	@ (80009d8 <__libc_init_array+0x44>)
 80009a8:	f000 f818 	bl	80009dc <_init>
 80009ac:	1b64      	subs	r4, r4, r5
 80009ae:	10a4      	asrs	r4, r4, #2
 80009b0:	2600      	movs	r6, #0
 80009b2:	42a6      	cmp	r6, r4
 80009b4:	d105      	bne.n	80009c2 <__libc_init_array+0x2e>
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009bc:	4798      	blx	r3
 80009be:	3601      	adds	r6, #1
 80009c0:	e7ee      	b.n	80009a0 <__libc_init_array+0xc>
 80009c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c6:	4798      	blx	r3
 80009c8:	3601      	adds	r6, #1
 80009ca:	e7f2      	b.n	80009b2 <__libc_init_array+0x1e>
 80009cc:	080009f4 	.word	0x080009f4
 80009d0:	080009f4 	.word	0x080009f4
 80009d4:	080009f4 	.word	0x080009f4
 80009d8:	080009f8 	.word	0x080009f8

080009dc <_init>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	bf00      	nop
 80009e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e2:	bc08      	pop	{r3}
 80009e4:	469e      	mov	lr, r3
 80009e6:	4770      	bx	lr

080009e8 <_fini>:
 80009e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ea:	bf00      	nop
 80009ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ee:	bc08      	pop	{r3}
 80009f0:	469e      	mov	lr, r3
 80009f2:	4770      	bx	lr
