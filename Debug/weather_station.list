
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000045c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005f4  080005f4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005f4  080005f4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005f4  080005f4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005f4  080005f4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005f4  080005f4  000015f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005f8  080005f8  000015f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005fc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08000600  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000600  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001732  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000717  00000000  00000000  00003766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000218  00000000  00000000  00003e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000172  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014080  00000000  00000000  0000420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000300f  00000000  00000000  0001828a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ed20  00000000  00000000  0001b299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000608  00000000  00000000  00099ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005dc 	.word	0x080005dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080005dc 	.word	0x080005dc

080001d8 <receive_data>:
#include "dht11.h"
#include "timer.h"

uint32_t timeout = 0;
void receive_data(uint8_t* data)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 80001e0:	4b43      	ldr	r3, [pc, #268]	@ (80002f0 <receive_data+0x118>)
 80001e2:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 80001e4:	4b43      	ldr	r3, [pc, #268]	@ (80002f4 <receive_data+0x11c>)
 80001e6:	613b      	str	r3, [r7, #16]
	uint32_t* GPIOC_IDR = (uint32_t*) (GPIOC_BASE_ADDR + 0x10);
 80001e8:	4b43      	ldr	r3, [pc, #268]	@ (80002f8 <receive_data+0x120>)
 80001ea:	60fb      	str	r3, [r7, #12]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80001f4:	697b      	ldr	r3, [r7, #20]
 80001f6:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000200:	697b      	ldr	r3, [r7, #20]
 8000202:	601a      	str	r2, [r3, #0]

	/* MCU pulls down voltage for at least 18ms */
	*GPIOC_ODR &= ~(1 << 14);
 8000204:	693b      	ldr	r3, [r7, #16]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800020c:	693b      	ldr	r3, [r7, #16]
 800020e:	601a      	str	r2, [r3, #0]
	delay_ms(25);
 8000210:	2019      	movs	r0, #25
 8000212:	f000 f8fd 	bl	8000410 <delay_ms>

	/* MCU pulls up voltage and wait for DHT response (~20us) */
	*GPIOC_ODR |= 1 << 14;
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	601a      	str	r2, [r3, #0]
	delay_us(30);
 8000222:	201e      	movs	r0, #30
 8000224:	f000 f912 	bl	800044c <delay_us>

	/* Set PC14 as INPUT to receive the response from DHT11 */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	601a      	str	r2, [r3, #0]

	/* wait for DHT11 to response */
	while (((*GPIOC_IDR >> 14) & 1) == 1);
 8000234:	bf00      	nop
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	0b9b      	lsrs	r3, r3, #14
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d1f8      	bne.n	8000236 <receive_data+0x5e>
	delay_us(70);
 8000244:	2046      	movs	r0, #70	@ 0x46
 8000246:	f000 f901 	bl	800044c <delay_us>
	while (((*GPIOC_IDR >> 14) & 1) == 0);
 800024a:	bf00      	nop
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	0b9b      	lsrs	r3, r3, #14
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f8      	beq.n	800024c <receive_data+0x74>
	delay_us(70);
 800025a:	2046      	movs	r0, #70	@ 0x46
 800025c:	f000 f8f6 	bl	800044c <delay_us>

	for (int i = 0; i < 5; i++)
 8000260:	2300      	movs	r3, #0
 8000262:	61fb      	str	r3, [r7, #28]
 8000264:	e039      	b.n	80002da <receive_data+0x102>
	{
		for (int j = 7; j >= 0; j--)
 8000266:	2307      	movs	r3, #7
 8000268:	61bb      	str	r3, [r7, #24]
 800026a:	e030      	b.n	80002ce <receive_data+0xf6>
		{
			while (((*GPIOC_IDR >> 14) & 1) == 1);
 800026c:	bf00      	nop
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	0b9b      	lsrs	r3, r3, #14
 8000274:	f003 0301 	and.w	r3, r3, #1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d1f8      	bne.n	800026e <receive_data+0x96>
			delay_us(40);
 800027c:	2028      	movs	r0, #40	@ 0x28
 800027e:	f000 f8e5 	bl	800044c <delay_us>
			while (((*GPIOC_IDR >> 14) & 1) == 0);
 8000282:	bf00      	nop
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	0b9b      	lsrs	r3, r3, #14
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f8      	beq.n	8000284 <receive_data+0xac>
			delay_us(30);
 8000292:	201e      	movs	r0, #30
 8000294:	f000 f8da 	bl	800044c <delay_us>

			if (((*GPIOC_IDR >> 14) & 1) == 1)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	0b9b      	lsrs	r3, r3, #14
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d010      	beq.n	80002c8 <receive_data+0xf0>
			{
				data[i] |= (1 << j);
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	4413      	add	r3, r2
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	b25a      	sxtb	r2, r3
 80002b0:	2101      	movs	r1, #1
 80002b2:	69bb      	ldr	r3, [r7, #24]
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	b25b      	sxtb	r3, r3
 80002ba:	4313      	orrs	r3, r2
 80002bc:	b259      	sxtb	r1, r3
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	b2ca      	uxtb	r2, r1
 80002c6:	701a      	strb	r2, [r3, #0]
		for (int j = 7; j >= 0; j--)
 80002c8:	69bb      	ldr	r3, [r7, #24]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	dacb      	bge.n	800026c <receive_data+0x94>
	for (int i = 0; i < 5; i++)
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	3301      	adds	r3, #1
 80002d8:	61fb      	str	r3, [r7, #28]
 80002da:	69fb      	ldr	r3, [r7, #28]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	ddc2      	ble.n	8000266 <receive_data+0x8e>
			}
		}
	}
	delay_us(50);
 80002e0:	2032      	movs	r0, #50	@ 0x32
 80002e2:	f000 f8b3 	bl	800044c <delay_us>
}
 80002e6:	bf00      	nop
 80002e8:	3720      	adds	r7, #32
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40020800 	.word	0x40020800
 80002f4:	40020814 	.word	0x40020814
 80002f8:	40020810 	.word	0x40020810

080002fc <DHT11_Init>:
	VCC: 3V
	DATA: PC14
	GND: GND
 */
void DHT11_Init()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
	delay_ms(2000);
 8000302:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000306:	f000 f883 	bl	8000410 <delay_ms>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	4b13      	ldr	r3, [pc, #76]	@ (800035c <DHT11_Init+0x60>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <DHT11_Init+0x60>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6313      	str	r3, [r2, #48]	@ 0x30
 800031a:	4b10      	ldr	r3, [pc, #64]	@ (800035c <DHT11_Init+0x60>)
 800031c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 8000326:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <DHT11_Init+0x64>)
 8000328:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <DHT11_Init+0x68>)
 800032c:	60bb      	str	r3, [r7, #8]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	601a      	str	r2, [r3, #0]

	/* pull up voltage to work at free status */
	*GPIOC_ODR |= 1 << 14;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020800 	.word	0x40020800
 8000364:	40020814 	.word	0x40020814

08000368 <main>:
#include "dht11.h"

uint8_t data[5] = { 0 };

int main()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	TIM2_Init();
 800036c:	f000 f888 	bl	8000480 <TIM2_Init>
	DHT11_Init();
 8000370:	f7ff ffc4 	bl	80002fc <DHT11_Init>

	while (1)
	{
		receive_data(data);
 8000374:	4804      	ldr	r0, [pc, #16]	@ (8000388 <main+0x20>)
 8000376:	f7ff ff2f 	bl	80001d8 <receive_data>
		delay_ms(1000);
 800037a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800037e:	f000 f847 	bl	8000410 <delay_ms>
		receive_data(data);
 8000382:	bf00      	nop
 8000384:	e7f6      	b.n	8000374 <main+0xc>
 8000386:	bf00      	nop
 8000388:	20000020 	.word	0x20000020

0800038c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <NMI_Handler+0x4>

08000394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <HardFault_Handler+0x4>

0800039c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <MemManage_Handler+0x4>

080003a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <BusFault_Handler+0x4>

080003ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <UsageFault_Handler+0x4>

080003b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr

080003d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e2:	f000 f8c3 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <SystemInit+0x20>)
 80003f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003f6:	4a05      	ldr	r2, [pc, #20]	@ (800040c <SystemInit+0x20>)
 80003f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 8000410:	b480      	push	{r7}
 8000412:	b085      	sub	sp, #20
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 8000418:	4b0b      	ldr	r3, [pc, #44]	@ (8000448 <delay_ms+0x38>)
 800041a:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 800042e:	bf00      	nop
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	68ba      	ldr	r2, [r7, #8]
 8000436:	429a      	cmp	r2, r3
 8000438:	d8fa      	bhi.n	8000430 <delay_ms+0x20>
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	3714      	adds	r7, #20
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40000024 	.word	0x40000024

0800044c <delay_us>:

void delay_us(uint16_t us)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	80fb      	strh	r3, [r7, #6]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000456:	4b09      	ldr	r3, [pc, #36]	@ (800047c <delay_us+0x30>)
 8000458:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	2200      	movs	r2, #0
 800045e:	801a      	strh	r2, [r3, #0]
	while (*TIM2_CNT < us);
 8000460:	bf00      	nop
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	88fa      	ldrh	r2, [r7, #6]
 8000468:	429a      	cmp	r2, r3
 800046a:	d8fa      	bhi.n	8000462 <delay_us+0x16>
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40000024 	.word	0x40000024

08000480 <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 8000480:	b480      	push	{r7}
 8000482:	b087      	sub	sp, #28
 8000484:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000486:	2300      	movs	r3, #0
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	4b1e      	ldr	r3, [pc, #120]	@ (8000504 <TIM2_Init+0x84>)
 800048c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800048e:	4a1d      	ldr	r2, [pc, #116]	@ (8000504 <TIM2_Init+0x84>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6413      	str	r3, [r2, #64]	@ 0x40
 8000496:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <TIM2_Init+0x84>)
 8000498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 80004a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a6:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <TIM2_Init+0x88>)
 80004aa:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 80004ac:	4b17      	ldr	r3, [pc, #92]	@ (800050c <TIM2_Init+0x8c>)
 80004ae:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 80004b0:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <TIM2_Init+0x90>)
 80004b2:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_EGR = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 80004b4:	4b17      	ldr	r3, [pc, #92]	@ (8000514 <TIM2_Init+0x94>)
 80004b6:	607b      	str	r3, [r7, #4]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	f023 0310 	bic.w	r3, r3, #16
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	220f      	movs	r2, #15
 80004ca:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f04f 32ff 	mov.w	r2, #4294967295
 80004d2:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	2200      	movs	r2, #0
 80004d8:	801a      	strh	r2, [r3, #0]

	*TIM2_EGR |= 1 << 0;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	801a      	strh	r2, [r3, #0]

	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	b29a      	uxth	r2, r3
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	801a      	strh	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	371c      	adds	r7, #28
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800
 8000508:	40000028 	.word	0x40000028
 800050c:	4000002c 	.word	0x4000002c
 8000510:	40000024 	.word	0x40000024
 8000514:	40000014 	.word	0x40000014

08000518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000518:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000550 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800051c:	f7ff ff66 	bl	80003ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	@ (8000558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	@ (8000564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f000 f825 	bl	8000594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800054a:	f7ff ff0d 	bl	8000368 <main>
  bx  lr    
 800054e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800055c:	080005fc 	.word	0x080005fc
  ldr r2, =_sbss
 8000560:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000564:	2000002c 	.word	0x2000002c

08000568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC_IRQHandler>
	...

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	@ (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000
 8000590:	20000028 	.word	0x20000028

08000594 <__libc_init_array>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	4d0d      	ldr	r5, [pc, #52]	@ (80005cc <__libc_init_array+0x38>)
 8000598:	4c0d      	ldr	r4, [pc, #52]	@ (80005d0 <__libc_init_array+0x3c>)
 800059a:	1b64      	subs	r4, r4, r5
 800059c:	10a4      	asrs	r4, r4, #2
 800059e:	2600      	movs	r6, #0
 80005a0:	42a6      	cmp	r6, r4
 80005a2:	d109      	bne.n	80005b8 <__libc_init_array+0x24>
 80005a4:	4d0b      	ldr	r5, [pc, #44]	@ (80005d4 <__libc_init_array+0x40>)
 80005a6:	4c0c      	ldr	r4, [pc, #48]	@ (80005d8 <__libc_init_array+0x44>)
 80005a8:	f000 f818 	bl	80005dc <_init>
 80005ac:	1b64      	subs	r4, r4, r5
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	2600      	movs	r6, #0
 80005b2:	42a6      	cmp	r6, r4
 80005b4:	d105      	bne.n	80005c2 <__libc_init_array+0x2e>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005bc:	4798      	blx	r3
 80005be:	3601      	adds	r6, #1
 80005c0:	e7ee      	b.n	80005a0 <__libc_init_array+0xc>
 80005c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c6:	4798      	blx	r3
 80005c8:	3601      	adds	r6, #1
 80005ca:	e7f2      	b.n	80005b2 <__libc_init_array+0x1e>
 80005cc:	080005f4 	.word	0x080005f4
 80005d0:	080005f4 	.word	0x080005f4
 80005d4:	080005f4 	.word	0x080005f4
 80005d8:	080005f8 	.word	0x080005f8

080005dc <_init>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	bf00      	nop
 80005e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	469e      	mov	lr, r3
 80005e6:	4770      	bx	lr

080005e8 <_fini>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr
