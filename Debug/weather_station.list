
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001378  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001518  08001518  00002518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001590  08001590  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001598  08001598  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001598  08001598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800159c  0800159c  0000259c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080015a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000054  080015f4  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080015f4  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fd4  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009f2  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00005a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e3  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150bc  00000000  00000000  00005eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004312  00000000  00000000  0001afa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ca1  00000000  00000000  0001f2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d60  00000000  00000000  000a1fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a2d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001500 	.word	0x08001500

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001500 	.word	0x08001500

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <check_sum>:

/*
	data: address of the array used to hold the 40 bits of data sent from the DHT11
 */
char check_sum(uint8_t* data)
{
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint8_t* checksum = &data[0] + 4;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3304      	adds	r3, #4
 800029c:	60fb      	str	r3, [r7, #12]
	uint8_t sum = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 4; i++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
 80002a6:	e009      	b.n	80002bc <check_sum+0x2c>
	{
		sum += data[i];
 80002a8:	693b      	ldr	r3, [r7, #16]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	4413      	add	r3, r2
 80002ae:	781a      	ldrb	r2, [r3, #0]
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	4413      	add	r3, r2
 80002b4:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 4; i++)
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	3301      	adds	r3, #1
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	2b03      	cmp	r3, #3
 80002c0:	ddf2      	ble.n	80002a8 <check_sum+0x18>
	}

	return (sum == (*checksum)) ? 1 : 0;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	7dfa      	ldrb	r2, [r7, #23]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	bf0c      	ite	eq
 80002cc:	2301      	moveq	r3, #1
 80002ce:	2300      	movne	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
	...

080002e0 <receive_data>:

/*
	data: address of the array used to hold the 40 bits of data sent from the DHT11
 */
void receive_data(uint8_t* data)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 80002e8:	4b43      	ldr	r3, [pc, #268]	@ (80003f8 <receive_data+0x118>)
 80002ea:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 80002ec:	4b43      	ldr	r3, [pc, #268]	@ (80003fc <receive_data+0x11c>)
 80002ee:	613b      	str	r3, [r7, #16]
	uint32_t* GPIOC_IDR = (uint32_t*) (GPIOC_BASE_ADDR + 0x10);
 80002f0:	4b43      	ldr	r3, [pc, #268]	@ (8000400 <receive_data+0x120>)
 80002f2:	60fb      	str	r3, [r7, #12]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	601a      	str	r2, [r3, #0]

	/* MCU pulls down voltage for at least 18ms */
	*GPIOC_ODR &= ~(1 << 14);
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	601a      	str	r2, [r3, #0]
	delay_ms(20);
 8000318:	2014      	movs	r0, #20
 800031a:	f000 fb91 	bl	8000a40 <delay_ms>

	/* MCU pulls up voltage and wait for DHT response (~20us) */
	*GPIOC_ODR |= 1 << 14;
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	601a      	str	r2, [r3, #0]
	delay_us(20);
 800032a:	2014      	movs	r0, #20
 800032c:	f000 fba6 	bl	8000a7c <delay_us>

	/* Set PC14 as INPUT to receive the response from DHT11 */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	601a      	str	r2, [r3, #0]

	/* wait for DHT11 to response */
	while (((*GPIOC_IDR >> 14) & 1) == 1);
 800033c:	bf00      	nop
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	0b9b      	lsrs	r3, r3, #14
 8000344:	f003 0301 	and.w	r3, r3, #1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1f8      	bne.n	800033e <receive_data+0x5e>
	delay_us(60);
 800034c:	203c      	movs	r0, #60	@ 0x3c
 800034e:	f000 fb95 	bl	8000a7c <delay_us>
	while (((*GPIOC_IDR >> 14) & 1) == 0);
 8000352:	bf00      	nop
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	0b9b      	lsrs	r3, r3, #14
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f8      	beq.n	8000354 <receive_data+0x74>
	delay_us(60);
 8000362:	203c      	movs	r0, #60	@ 0x3c
 8000364:	f000 fb8a 	bl	8000a7c <delay_us>

	for (int i = 0; i < 5; i++)
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
 800036c:	e039      	b.n	80003e2 <receive_data+0x102>
	{
		for (int j = 7; j >= 0; j--)
 800036e:	2307      	movs	r3, #7
 8000370:	61bb      	str	r3, [r7, #24]
 8000372:	e030      	b.n	80003d6 <receive_data+0xf6>
		{
			while (((*GPIOC_IDR >> 14) & 1) == 1);
 8000374:	bf00      	nop
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	0b9b      	lsrs	r3, r3, #14
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	2b00      	cmp	r3, #0
 8000382:	d1f8      	bne.n	8000376 <receive_data+0x96>
			delay_us(30);
 8000384:	201e      	movs	r0, #30
 8000386:	f000 fb79 	bl	8000a7c <delay_us>
			while (((*GPIOC_IDR >> 14) & 1) == 0);
 800038a:	bf00      	nop
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	0b9b      	lsrs	r3, r3, #14
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f8      	beq.n	800038c <receive_data+0xac>
			delay_us(30);
 800039a:	201e      	movs	r0, #30
 800039c:	f000 fb6e 	bl	8000a7c <delay_us>

			if (((*GPIOC_IDR >> 14) & 1) == 1)
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	0b9b      	lsrs	r3, r3, #14
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d010      	beq.n	80003d0 <receive_data+0xf0>
			{
				data[i] |= (1 << j);
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b25a      	sxtb	r2, r3
 80003b8:	2101      	movs	r1, #1
 80003ba:	69bb      	ldr	r3, [r7, #24]
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	4313      	orrs	r3, r2
 80003c4:	b259      	sxtb	r1, r3
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	4413      	add	r3, r2
 80003cc:	b2ca      	uxtb	r2, r1
 80003ce:	701a      	strb	r2, [r3, #0]
		for (int j = 7; j >= 0; j--)
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	61bb      	str	r3, [r7, #24]
 80003d6:	69bb      	ldr	r3, [r7, #24]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	dacb      	bge.n	8000374 <receive_data+0x94>
	for (int i = 0; i < 5; i++)
 80003dc:	69fb      	ldr	r3, [r7, #28]
 80003de:	3301      	adds	r3, #1
 80003e0:	61fb      	str	r3, [r7, #28]
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	2b04      	cmp	r3, #4
 80003e6:	ddc2      	ble.n	800036e <receive_data+0x8e>
			}
		}
	}
	delay_us(50);
 80003e8:	2032      	movs	r0, #50	@ 0x32
 80003ea:	f000 fb47 	bl	8000a7c <delay_us>
}
 80003ee:	bf00      	nop
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40020800 	.word	0x40020800
 80003fc:	40020814 	.word	0x40020814
 8000400:	40020810 	.word	0x40020810

08000404 <DHT11_Init>:
	VCC: 3V
	DATA: PC14
	GND: GND
 */
void DHT11_Init()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
	delay_ms(2000);
 800040a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800040e:	f000 fb17 	bl	8000a40 <delay_ms>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000412:	2300      	movs	r3, #0
 8000414:	607b      	str	r3, [r7, #4]
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <DHT11_Init+0x60>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041a:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <DHT11_Init+0x60>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6313      	str	r3, [r2, #48]	@ 0x30
 8000422:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <DHT11_Init+0x60>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	f003 0304 	and.w	r3, r3, #4
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <DHT11_Init+0x64>)
 8000430:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 8000432:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <DHT11_Init+0x68>)
 8000434:	60bb      	str	r3, [r7, #8]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	601a      	str	r2, [r3, #0]

	/* pull up voltage to work at free status */
	*GPIOC_ODR |= 1 << 14;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40023800 	.word	0x40023800
 8000468:	40020800 	.word	0x40020800
 800046c:	40020814 	.word	0x40020814

08000470 <LCD_printString>:
#include <string.h>
#include <stdarg.h>
#include <stdio.h>

void LCD_printString(char* str, ...)
{
 8000470:	b40f      	push	{r0, r1, r2, r3}
 8000472:	b580      	push	{r7, lr}
 8000474:	b0a4      	sub	sp, #144	@ 0x90
 8000476:	af00      	add	r7, sp, #0
	va_list list;
	va_start(list, str);
 8000478:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800047c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char print_buf[128] = { 0 };
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2280      	movs	r2, #128	@ 0x80
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fbbc 	bl	8000c04 <memset>
	vsprintf(print_buf, str, list);
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000492:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000496:	4618      	mov	r0, r3
 8000498:	f000 fbaa 	bl	8000bf0 <vsiprintf>
	int size = strlen(str);
 800049c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80004a0:	f7ff fe9e 	bl	80001e0 <strlen>
 80004a4:	4603      	mov	r3, r0
 80004a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for (int i = 0; i < size; i++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80004b0:	e00c      	b.n	80004cc <LCD_printString+0x5c>
	{
		LCD_print_Char(print_buf[i]);
 80004b2:	1d3a      	adds	r2, r7, #4
 80004b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80004b8:	4413      	add	r3, r2
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f862 	bl	8000586 <LCD_print_Char>
	for (int i = 0; i < size; i++)
 80004c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80004c6:	3301      	adds	r3, #1
 80004c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80004cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80004d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dbec      	blt.n	80004b2 <LCD_printString+0x42>
	}
	va_end(list);
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3790      	adds	r7, #144	@ 0x90
 80004de:	46bd      	mov	sp, r7
 80004e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004e4:	b004      	add	sp, #16
 80004e6:	4770      	bx	lr

080004e8 <LCD_gotoxy>:
/*
	1 <= row <= 2
	1 <= column <= 40
 */
void LCD_gotoxy(uint8_t row, uint8_t column)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	460a      	mov	r2, r1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4613      	mov	r3, r2
 80004f6:	71bb      	strb	r3, [r7, #6]
	if (row == 1)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d10a      	bne.n	8000514 <LCD_gotoxy+0x2c>
	{
		set_cursor_position((column - 1) * row);
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	3b01      	subs	r3, #1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	79fa      	ldrb	r2, [r7, #7]
 8000506:	fb12 f303 	smulbb	r3, r2, r3
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f827 	bl	8000560 <set_cursor_position>
		LCD_gotoxy(2, 1);
		LCD_printString("BACK TO 1ST LINE");
		delay_ms(3000);
		LCD_ClrScr();
	}
}
 8000512:	e01d      	b.n	8000550 <LCD_gotoxy+0x68>
	else if (row == 2)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	2b02      	cmp	r3, #2
 8000518:	d106      	bne.n	8000528 <LCD_gotoxy+0x40>
		set_cursor_position(column + 63);
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	333f      	adds	r3, #63	@ 0x3f
 800051e:	b2db      	uxtb	r3, r3
 8000520:	4618      	mov	r0, r3
 8000522:	f000 f81d 	bl	8000560 <set_cursor_position>
}
 8000526:	e013      	b.n	8000550 <LCD_gotoxy+0x68>
		LCD_gotoxy(1, 1);
 8000528:	2101      	movs	r1, #1
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff ffdc 	bl	80004e8 <LCD_gotoxy>
		LCD_printString("INVALID NUMBER");
 8000530:	4809      	ldr	r0, [pc, #36]	@ (8000558 <LCD_gotoxy+0x70>)
 8000532:	f7ff ff9d 	bl	8000470 <LCD_printString>
		LCD_gotoxy(2, 1);
 8000536:	2101      	movs	r1, #1
 8000538:	2002      	movs	r0, #2
 800053a:	f7ff ffd5 	bl	80004e8 <LCD_gotoxy>
		LCD_printString("BACK TO 1ST LINE");
 800053e:	4807      	ldr	r0, [pc, #28]	@ (800055c <LCD_gotoxy+0x74>)
 8000540:	f7ff ff96 	bl	8000470 <LCD_printString>
		delay_ms(3000);
 8000544:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000548:	f000 fa7a 	bl	8000a40 <delay_ms>
		LCD_ClrScr();
 800054c:	f000 f82b 	bl	80005a6 <LCD_ClrScr>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	08001518 	.word	0x08001518
 800055c:	08001528 	.word	0x08001528

08000560 <set_cursor_position>:

void set_cursor_position(uint8_t cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	LCD_WriteCMD(cmd | POS);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f845 	bl	8000602 <LCD_WriteCMD>
	delay_us(40);
 8000578:	2028      	movs	r0, #40	@ 0x28
 800057a:	f000 fa7f 	bl	8000a7c <delay_us>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <LCD_print_Char>:
		LCD_print_Char(str[i]);
	}
}

void LCD_print_Char(uint8_t ch)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	4603      	mov	r3, r0
 800058e:	71fb      	strb	r3, [r7, #7]
	LCD_WriteDATA(ch);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f817 	bl	80005c6 <LCD_WriteDATA>
	delay_us(40);
 8000598:	2028      	movs	r0, #40	@ 0x28
 800059a:	f000 fa6f 	bl	8000a7c <delay_us>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <LCD_ClrScr>:

void LCD_ClrScr()
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
	/* clear display */
	LCD_WriteCMD(0x01);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f000 f829 	bl	8000602 <LCD_WriteCMD>
	delay_ms(2);
 80005b0:	2002      	movs	r0, #2
 80005b2:	f000 fa45 	bl	8000a40 <delay_ms>

	/* return home */
	LCD_WriteCMD(0x02);
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 f823 	bl	8000602 <LCD_WriteCMD>
	delay_ms(2);
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 fa3f 	bl	8000a40 <delay_ms>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <LCD_WriteDATA>:

void LCD_WriteDATA(uint8_t data)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b084      	sub	sp, #16
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	4603      	mov	r3, r0
 80005ce:	71fb      	strb	r3, [r7, #7]
	uint8_t high_bits = data & 0xF0;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f023 030f 	bic.w	r3, r3, #15
 80005d6:	73fb      	strb	r3, [r7, #15]
	uint8_t low_bits = data << 4;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	011b      	lsls	r3, r3, #4
 80005dc:	73bb      	strb	r3, [r7, #14]
	write_4bits(high_bits | DATA);
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f823 	bl	8000632 <write_4bits>
	write_4bits(low_bits | DATA);
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f81c 	bl	8000632 <write_4bits>
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <LCD_WriteCMD>:

void LCD_WriteCMD(uint8_t data)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b084      	sub	sp, #16
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
	uint8_t high_bits = data & 0xF0;
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f023 030f 	bic.w	r3, r3, #15
 8000612:	73fb      	strb	r3, [r7, #15]
	uint8_t low_bits = data << 4;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	73bb      	strb	r3, [r7, #14]
	write_4bits(high_bits | CMD);
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f808 	bl	8000632 <write_4bits>
	write_4bits(low_bits | CMD);
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f804 	bl	8000632 <write_4bits>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <write_4bits>:

void write_4bits(uint8_t data)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]
	/* make sure EN bit is low before send new data */
	master_transmit(data & ~ENABLE);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f023 0304 	bic.w	r3, r3, #4
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f81b 	bl	8000680 <master_transmit>
	delay_us(25);
 800064a:	2019      	movs	r0, #25
 800064c:	f000 fa16 	bl	8000a7c <delay_us>

	/* send data with EN = 1 and EN = 0*/
	master_transmit(data | ENABLE);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f811 	bl	8000680 <master_transmit>
	delay_us(25);
 800065e:	2019      	movs	r0, #25
 8000660:	f000 fa0c 	bl	8000a7c <delay_us>
	master_transmit(data & ~ENABLE);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f023 0304 	bic.w	r3, r3, #4
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f807 	bl	8000680 <master_transmit>
	delay_us(25);
 8000672:	2019      	movs	r0, #25
 8000674:	f000 fa02 	bl	8000a7c <delay_us>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <master_transmit>:

void master_transmit(uint8_t data)
{
 8000680:	b480      	push	{r7}
 8000682:	b089      	sub	sp, #36	@ 0x24
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 800068a:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <master_transmit+0xd0>)
 800068c:	61fb      	str	r3, [r7, #28]
	uint16_t* I2C_SR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x14);
 800068e:	4b31      	ldr	r3, [pc, #196]	@ (8000754 <master_transmit+0xd4>)
 8000690:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_SR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x18);
 8000692:	4b31      	ldr	r3, [pc, #196]	@ (8000758 <master_transmit+0xd8>)
 8000694:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_DR  = (uint16_t*) (I2C1_BASE_ADDR + 0x10);
 8000696:	4b31      	ldr	r3, [pc, #196]	@ (800075c <master_transmit+0xdc>)
 8000698:	613b      	str	r3, [r7, #16]

	/* wait until bus is free */
	while (((*I2C_SR2 >> 1) & 1) == 1);
 800069a:	bf00      	nop
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	085b      	lsrs	r3, r3, #1
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f7      	bne.n	800069c <master_transmit+0x1c>

	/* generate START condition */
	*I2C_CR1 |= 1 << 8;
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	801a      	strh	r2, [r3, #0]

	/* wait for START condition is generated */
	while ((*I2C_SR1 & 1) == 0);
 80006ba:	bf00      	nop
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <master_transmit+0x3c>

	/* send slave address */
	volatile uint16_t tmp = *I2C_SR1;
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	81fb      	strh	r3, [r7, #14]
	*I2C_DR = (0x27 << 1) | WRITE;
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	224e      	movs	r2, #78	@ 0x4e
 80006d2:	801a      	strh	r2, [r3, #0]

	/* wait until the slave address is sent and slave response ACK */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 80006d4:	bf00      	nop
 80006d6:	69bb      	ldr	r3, [r7, #24]
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	085b      	lsrs	r3, r3, #1
 80006dc:	b29b      	uxth	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f7      	beq.n	80006d6 <master_transmit+0x56>
	tmp = *I2C_SR1;
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	81fb      	strh	r3, [r7, #14]
	tmp = *I2C_SR2;
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	81fb      	strh	r3, [r7, #14]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 80006f2:	bf00      	nop
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	09db      	lsrs	r3, r3, #7
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f7      	beq.n	80006f4 <master_transmit+0x74>

	/* send data or instruction */
	*I2C_DR = data | BACKLIGHT;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty and transfer finished */
	while ((((*I2C_SR1 >> 7) & 1) == 0) && (((*I2C_SR1 >> 2) & 1) == 0));
 8000712:	bf00      	nop
 8000714:	69bb      	ldr	r3, [r7, #24]
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	09db      	lsrs	r3, r3, #7
 800071a:	b29b      	uxth	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d107      	bne.n	8000734 <master_transmit+0xb4>
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	b29b      	uxth	r3, r3
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0ef      	beq.n	8000714 <master_transmit+0x94>

	/* generate STOP condition */
	*I2C_CR1 |= 1 << 9;
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800073c:	b29a      	uxth	r2, r3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	801a      	strh	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40005400 	.word	0x40005400
 8000754:	40005414 	.word	0x40005414
 8000758:	40005418 	.word	0x40005418
 800075c:	40005410 	.word	0x40005410

08000760 <LCD_Init>:

void LCD_Init()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	/* after power on, wait for more than 40ms after VCC rises to 2.7 V */
	delay_ms(50);
 8000764:	2032      	movs	r0, #50	@ 0x32
 8000766:	f000 f96b 	bl	8000a40 <delay_ms>

	/* function set */
	write_4bits(0x03 << 4);
 800076a:	2030      	movs	r0, #48	@ 0x30
 800076c:	f7ff ff61 	bl	8000632 <write_4bits>
	delay_ms(5);
 8000770:	2005      	movs	r0, #5
 8000772:	f000 f965 	bl	8000a40 <delay_ms>
	write_4bits(0x03 << 4);
 8000776:	2030      	movs	r0, #48	@ 0x30
 8000778:	f7ff ff5b 	bl	8000632 <write_4bits>
	delay_us(110);
 800077c:	206e      	movs	r0, #110	@ 0x6e
 800077e:	f000 f97d 	bl	8000a7c <delay_us>
	write_4bits(0x03 << 4);
 8000782:	2030      	movs	r0, #48	@ 0x30
 8000784:	f7ff ff55 	bl	8000632 <write_4bits>
	delay_us(110);
 8000788:	206e      	movs	r0, #110	@ 0x6e
 800078a:	f000 f977 	bl	8000a7c <delay_us>
	write_4bits(0x02 << 4);
 800078e:	2020      	movs	r0, #32
 8000790:	f7ff ff4f 	bl	8000632 <write_4bits>
	delay_us(110);
 8000794:	206e      	movs	r0, #110	@ 0x6e
 8000796:	f000 f971 	bl	8000a7c <delay_us>

	/* select 4-bit operation and select 2 line display */
	LCD_WriteCMD(0x28);
 800079a:	2028      	movs	r0, #40	@ 0x28
 800079c:	f7ff ff31 	bl	8000602 <LCD_WriteCMD>
	delay_us(40);
 80007a0:	2028      	movs	r0, #40	@ 0x28
 80007a2:	f000 f96b 	bl	8000a7c <delay_us>

	/* Display ON & display cursor */
	LCD_WriteCMD(0x0C);
 80007a6:	200c      	movs	r0, #12
 80007a8:	f7ff ff2b 	bl	8000602 <LCD_WriteCMD>
	delay_us(40);
 80007ac:	2028      	movs	r0, #40	@ 0x28
 80007ae:	f000 f965 	bl	8000a7c <delay_us>

	/* clear display */
	LCD_WriteCMD(0x01);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff ff25 	bl	8000602 <LCD_WriteCMD>
	delay_ms(2);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 f941 	bl	8000a40 <delay_ms>

	/* entry mode set */
	LCD_WriteCMD(0x06);
 80007be:	2006      	movs	r0, #6
 80007c0:	f7ff ff1f 	bl	8000602 <LCD_WriteCMD>
	delay_us(40);
 80007c4:	2028      	movs	r0, #40	@ 0x28
 80007c6:	f000 f959 	bl	8000a7c <delay_us>

	/* return home */
	LCD_WriteCMD(0x02);
 80007ca:	2002      	movs	r0, #2
 80007cc:	f7ff ff19 	bl	8000602 <LCD_WriteCMD>
	delay_ms(2);
 80007d0:	2002      	movs	r0, #2
 80007d2:	f000 f935 	bl	8000a40 <delay_ms>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <I2C1_Init>:
	GND: GND
	PB8: SCL
	PB9: SDA
 */
void I2C1_Init()
{
 80007dc:	b480      	push	{r7}
 80007de:	b08b      	sub	sp, #44	@ 0x2c
 80007e0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b30      	ldr	r3, [pc, #192]	@ (80008a8 <I2C1_Init+0xcc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a2f      	ldr	r2, [pc, #188]	@ (80008a8 <I2C1_Init+0xcc>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b2d      	ldr	r3, [pc, #180]	@ (80008a8 <I2C1_Init+0xcc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 80007fe:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <I2C1_Init+0xd0>)
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRH = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 8000802:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <I2C1_Init+0xd4>)
 8000804:	623b      	str	r3, [r7, #32]
	uint32_t* GPIOB_OTYPER = (uint32_t*) (GPIOB_BASE_ADDR + 0x04);
 8000806:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <I2C1_Init+0xd8>)
 8000808:	61fb      	str	r3, [r7, #28]

	/* Configure PB8 & PB9 at AF */
	*GPIOB_MODER &= ~(0xf << (8 * 2));
 800080a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8000812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000814:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << (8 * 2)) | (0b10 << (9 * 2));
 8000816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f443 2220 	orr.w	r2, r3, #655360	@ 0xa0000
 800081e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000820:	601a      	str	r2, [r3, #0]

	*GPIOB_OTYPER |= (1 << 8) | (1 << 9);
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	601a      	str	r2, [r3, #0]

	/* Select AF04 */
	*GPIOB_AFRH &= ~(0xff << 0);
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= (4 << 0) | (4 << 4);
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f043 0244 	orr.w	r2, r3, #68	@ 0x44
 8000842:	6a3b      	ldr	r3, [r7, #32]
 8000844:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <I2C1_Init+0xcc>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a16      	ldr	r2, [pc, #88]	@ (80008a8 <I2C1_Init+0xcc>)
 8000850:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <I2C1_Init+0xcc>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <I2C1_Init+0xdc>)
 8000864:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_CR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x04);
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <I2C1_Init+0xe0>)
 8000868:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_CCR = (uint16_t*) (I2C1_BASE_ADDR + 0x1C);
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <I2C1_Init+0xe4>)
 800086c:	613b      	str	r3, [r7, #16]
	uint16_t* I2C_TRISE = (uint16_t*) (I2C1_BASE_ADDR + 0x20);
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <I2C1_Init+0xe8>)
 8000870:	60fb      	str	r3, [r7, #12]

	/* configure I2C clock frequency = 16MHz */
	*I2C_CR2 |= 16 << 0;
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	b29a      	uxth	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	801a      	strh	r2, [r3, #0]

	/* configure SCL to generate 100kHz */
	*I2C_CCR = 80;
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	2250      	movs	r2, #80	@ 0x50
 8000884:	801a      	strh	r2, [r3, #0]

	/* Set rise time */
	*I2C_TRISE = 16 + 1;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2211      	movs	r2, #17
 800088a:	801a      	strh	r2, [r3, #0]

	/* enable I2C */
	*I2C_CR1 |= 1 << 0;
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	b29a      	uxth	r2, r3
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	801a      	strh	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	372c      	adds	r7, #44	@ 0x2c
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40020424 	.word	0x40020424
 80008b4:	40020404 	.word	0x40020404
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40005404 	.word	0x40005404
 80008c0:	4000541c 	.word	0x4000541c
 80008c4:	40005420 	.word	0x40005420

080008c8 <main>:

uint8_t data[5] = { 0 };
char data_correct = 0;

int main()
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	TIM2_Init();
 80008cc:	f000 f8f0 	bl	8000ab0 <TIM2_Init>
	DHT11_Init();
 80008d0:	f7ff fd98 	bl	8000404 <DHT11_Init>
	I2C1_Init();
 80008d4:	f7ff ff82 	bl	80007dc <I2C1_Init>
	LCD_Init();
 80008d8:	f7ff ff42 	bl	8000760 <LCD_Init>

	while (1)
	{
		receive_data(data);
 80008dc:	4819      	ldr	r0, [pc, #100]	@ (8000944 <main+0x7c>)
 80008de:	f7ff fcff 	bl	80002e0 <receive_data>
		if (check_sum(data) == 1)
 80008e2:	4818      	ldr	r0, [pc, #96]	@ (8000944 <main+0x7c>)
 80008e4:	f7ff fcd4 	bl	8000290 <check_sum>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d124      	bne.n	8000938 <main+0x70>
		{
			LCD_ClrScr();
 80008ee:	f7ff fe5a 	bl	80005a6 <LCD_ClrScr>
			delay_ms(200);
 80008f2:	20c8      	movs	r0, #200	@ 0xc8
 80008f4:	f000 f8a4 	bl	8000a40 <delay_ms>
			LCD_gotoxy(1, 1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fdf4 	bl	80004e8 <LCD_gotoxy>
			LCD_printString("Humi: %d.%d %c", data[0], data[1], 0x25);
 8000900:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <main+0x7c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <main+0x7c>)
 8000908:	785b      	ldrb	r3, [r3, #1]
 800090a:	461a      	mov	r2, r3
 800090c:	2325      	movs	r3, #37	@ 0x25
 800090e:	480e      	ldr	r0, [pc, #56]	@ (8000948 <main+0x80>)
 8000910:	f7ff fdae 	bl	8000470 <LCD_printString>
			LCD_gotoxy(2, 1);
 8000914:	2101      	movs	r1, #1
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fde6 	bl	80004e8 <LCD_gotoxy>
			LCD_printString("Temp: %d.%d %cC", data[2], data[3], 0xDF);
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <main+0x7c>)
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	4619      	mov	r1, r3
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <main+0x7c>)
 8000924:	78db      	ldrb	r3, [r3, #3]
 8000926:	461a      	mov	r2, r3
 8000928:	23df      	movs	r3, #223	@ 0xdf
 800092a:	4808      	ldr	r0, [pc, #32]	@ (800094c <main+0x84>)
 800092c:	f7ff fda0 	bl	8000470 <LCD_printString>
			delay_ms(1000);
 8000930:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000934:	f000 f884 	bl	8000a40 <delay_ms>
		}
		delay_ms(1000);
 8000938:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800093c:	f000 f880 	bl	8000a40 <delay_ms>
		receive_data(data);
 8000940:	e7cc      	b.n	80008dc <main+0x14>
 8000942:	bf00      	nop
 8000944:	20000070 	.word	0x20000070
 8000948:	0800153c 	.word	0x0800153c
 800094c:	0800154c 	.word	0x0800154c

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <NMI_Handler+0x4>

08000958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <MemManage_Handler+0x4>

08000968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <BusFault_Handler+0x4>

08000970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <UsageFault_Handler+0x4>

08000978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f8f9 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	@ (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	@ (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f000 f918 	bl	8000c14 <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	@ (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20020000 	.word	0x20020000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	20000078 	.word	0x20000078
 8000a18:	200001c8 	.word	0x200001c8

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <delay_ms+0x38>)
 8000a4a:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 8000a5e:	bf00      	nop
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d8fa      	bhi.n	8000a60 <delay_ms+0x20>
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40000024 	.word	0x40000024

08000a7c <delay_us>:

void delay_us(uint16_t us)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000a86:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <delay_us+0x30>)
 8000a88:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	801a      	strh	r2, [r3, #0]
	while (*TIM2_CNT < us);
 8000a90:	bf00      	nop
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	88fa      	ldrh	r2, [r7, #6]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d8fa      	bhi.n	8000a92 <delay_us+0x16>
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40000024 	.word	0x40000024

08000ab0 <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <TIM2_Init+0x84>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a1d      	ldr	r2, [pc, #116]	@ (8000b34 <TIM2_Init+0x84>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <TIM2_Init+0x84>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 8000ad2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ad6:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 8000ad8:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <TIM2_Init+0x88>)
 8000ada:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <TIM2_Init+0x8c>)
 8000ade:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <TIM2_Init+0x90>)
 8000ae2:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_EGR = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <TIM2_Init+0x94>)
 8000ae6:	607b      	str	r3, [r7, #4]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	f023 0310 	bic.w	r3, r3, #16
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	220f      	movs	r2, #15
 8000afa:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295
 8000b02:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	2200      	movs	r2, #0
 8000b08:	801a      	strh	r2, [r3, #0]

	*TIM2_EGR |= 1 << 0;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	801a      	strh	r2, [r3, #0]

	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	801a      	strh	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	371c      	adds	r7, #28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40000028 	.word	0x40000028
 8000b3c:	4000002c 	.word	0x4000002c
 8000b40:	40000024 	.word	0x40000024
 8000b44:	40000014 	.word	0x40000014

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b4c:	f7ff ff66 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f000 f853 	bl	8000c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fea5 	bl	80008c8 <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000b8c:	080015a0 	.word	0x080015a0
  ldr r2, =_sbss
 8000b90:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000b94:	200001c8 	.word	0x200001c8

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>
	...

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	2000007c 	.word	0x2000007c

08000bc4 <_vsiprintf_r>:
 8000bc4:	b510      	push	{r4, lr}
 8000bc6:	b09a      	sub	sp, #104	@ 0x68
 8000bc8:	2400      	movs	r4, #0
 8000bca:	9100      	str	r1, [sp, #0]
 8000bcc:	9104      	str	r1, [sp, #16]
 8000bce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000bd2:	9105      	str	r1, [sp, #20]
 8000bd4:	9102      	str	r1, [sp, #8]
 8000bd6:	4905      	ldr	r1, [pc, #20]	@ (8000bec <_vsiprintf_r+0x28>)
 8000bd8:	9103      	str	r1, [sp, #12]
 8000bda:	4669      	mov	r1, sp
 8000bdc:	9419      	str	r4, [sp, #100]	@ 0x64
 8000bde:	f000 f999 	bl	8000f14 <_svfiprintf_r>
 8000be2:	9b00      	ldr	r3, [sp, #0]
 8000be4:	701c      	strb	r4, [r3, #0]
 8000be6:	b01a      	add	sp, #104	@ 0x68
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	bf00      	nop
 8000bec:	ffff0208 	.word	0xffff0208

08000bf0 <vsiprintf>:
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	460a      	mov	r2, r1
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	4802      	ldr	r0, [pc, #8]	@ (8000c00 <vsiprintf+0x10>)
 8000bf8:	6800      	ldr	r0, [r0, #0]
 8000bfa:	f7ff bfe3 	b.w	8000bc4 <_vsiprintf_r>
 8000bfe:	bf00      	nop
 8000c00:	20000004 	.word	0x20000004

08000c04 <memset>:
 8000c04:	4402      	add	r2, r0
 8000c06:	4603      	mov	r3, r0
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d100      	bne.n	8000c0e <memset+0xa>
 8000c0c:	4770      	bx	lr
 8000c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000c12:	e7f9      	b.n	8000c08 <memset+0x4>

08000c14 <__errno>:
 8000c14:	4b01      	ldr	r3, [pc, #4]	@ (8000c1c <__errno+0x8>)
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000004 	.word	0x20000004

08000c20 <__libc_init_array>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4d0d      	ldr	r5, [pc, #52]	@ (8000c58 <__libc_init_array+0x38>)
 8000c24:	4c0d      	ldr	r4, [pc, #52]	@ (8000c5c <__libc_init_array+0x3c>)
 8000c26:	1b64      	subs	r4, r4, r5
 8000c28:	10a4      	asrs	r4, r4, #2
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	42a6      	cmp	r6, r4
 8000c2e:	d109      	bne.n	8000c44 <__libc_init_array+0x24>
 8000c30:	4d0b      	ldr	r5, [pc, #44]	@ (8000c60 <__libc_init_array+0x40>)
 8000c32:	4c0c      	ldr	r4, [pc, #48]	@ (8000c64 <__libc_init_array+0x44>)
 8000c34:	f000 fc64 	bl	8001500 <_init>
 8000c38:	1b64      	subs	r4, r4, r5
 8000c3a:	10a4      	asrs	r4, r4, #2
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	42a6      	cmp	r6, r4
 8000c40:	d105      	bne.n	8000c4e <__libc_init_array+0x2e>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c48:	4798      	blx	r3
 8000c4a:	3601      	adds	r6, #1
 8000c4c:	e7ee      	b.n	8000c2c <__libc_init_array+0xc>
 8000c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c52:	4798      	blx	r3
 8000c54:	3601      	adds	r6, #1
 8000c56:	e7f2      	b.n	8000c3e <__libc_init_array+0x1e>
 8000c58:	08001598 	.word	0x08001598
 8000c5c:	08001598 	.word	0x08001598
 8000c60:	08001598 	.word	0x08001598
 8000c64:	0800159c 	.word	0x0800159c

08000c68 <__retarget_lock_acquire_recursive>:
 8000c68:	4770      	bx	lr

08000c6a <__retarget_lock_release_recursive>:
 8000c6a:	4770      	bx	lr

08000c6c <_free_r>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4605      	mov	r5, r0
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d041      	beq.n	8000cf8 <_free_r+0x8c>
 8000c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c78:	1f0c      	subs	r4, r1, #4
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	bfb8      	it	lt
 8000c7e:	18e4      	addlt	r4, r4, r3
 8000c80:	f000 f8e0 	bl	8000e44 <__malloc_lock>
 8000c84:	4a1d      	ldr	r2, [pc, #116]	@ (8000cfc <_free_r+0x90>)
 8000c86:	6813      	ldr	r3, [r2, #0]
 8000c88:	b933      	cbnz	r3, 8000c98 <_free_r+0x2c>
 8000c8a:	6063      	str	r3, [r4, #4]
 8000c8c:	6014      	str	r4, [r2, #0]
 8000c8e:	4628      	mov	r0, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b8dc 	b.w	8000e50 <__malloc_unlock>
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	d908      	bls.n	8000cae <_free_r+0x42>
 8000c9c:	6820      	ldr	r0, [r4, #0]
 8000c9e:	1821      	adds	r1, r4, r0
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	bf01      	itttt	eq
 8000ca4:	6819      	ldreq	r1, [r3, #0]
 8000ca6:	685b      	ldreq	r3, [r3, #4]
 8000ca8:	1809      	addeq	r1, r1, r0
 8000caa:	6021      	streq	r1, [r4, #0]
 8000cac:	e7ed      	b.n	8000c8a <_free_r+0x1e>
 8000cae:	461a      	mov	r2, r3
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	b10b      	cbz	r3, 8000cb8 <_free_r+0x4c>
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	d9fa      	bls.n	8000cae <_free_r+0x42>
 8000cb8:	6811      	ldr	r1, [r2, #0]
 8000cba:	1850      	adds	r0, r2, r1
 8000cbc:	42a0      	cmp	r0, r4
 8000cbe:	d10b      	bne.n	8000cd8 <_free_r+0x6c>
 8000cc0:	6820      	ldr	r0, [r4, #0]
 8000cc2:	4401      	add	r1, r0
 8000cc4:	1850      	adds	r0, r2, r1
 8000cc6:	4283      	cmp	r3, r0
 8000cc8:	6011      	str	r1, [r2, #0]
 8000cca:	d1e0      	bne.n	8000c8e <_free_r+0x22>
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	6053      	str	r3, [r2, #4]
 8000cd2:	4408      	add	r0, r1
 8000cd4:	6010      	str	r0, [r2, #0]
 8000cd6:	e7da      	b.n	8000c8e <_free_r+0x22>
 8000cd8:	d902      	bls.n	8000ce0 <_free_r+0x74>
 8000cda:	230c      	movs	r3, #12
 8000cdc:	602b      	str	r3, [r5, #0]
 8000cde:	e7d6      	b.n	8000c8e <_free_r+0x22>
 8000ce0:	6820      	ldr	r0, [r4, #0]
 8000ce2:	1821      	adds	r1, r4, r0
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	bf04      	itt	eq
 8000ce8:	6819      	ldreq	r1, [r3, #0]
 8000cea:	685b      	ldreq	r3, [r3, #4]
 8000cec:	6063      	str	r3, [r4, #4]
 8000cee:	bf04      	itt	eq
 8000cf0:	1809      	addeq	r1, r1, r0
 8000cf2:	6021      	streq	r1, [r4, #0]
 8000cf4:	6054      	str	r4, [r2, #4]
 8000cf6:	e7ca      	b.n	8000c8e <_free_r+0x22>
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001c4 	.word	0x200001c4

08000d00 <sbrk_aligned>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	4e0f      	ldr	r6, [pc, #60]	@ (8000d40 <sbrk_aligned+0x40>)
 8000d04:	460c      	mov	r4, r1
 8000d06:	6831      	ldr	r1, [r6, #0]
 8000d08:	4605      	mov	r5, r0
 8000d0a:	b911      	cbnz	r1, 8000d12 <sbrk_aligned+0x12>
 8000d0c:	f000 fba4 	bl	8001458 <_sbrk_r>
 8000d10:	6030      	str	r0, [r6, #0]
 8000d12:	4621      	mov	r1, r4
 8000d14:	4628      	mov	r0, r5
 8000d16:	f000 fb9f 	bl	8001458 <_sbrk_r>
 8000d1a:	1c43      	adds	r3, r0, #1
 8000d1c:	d103      	bne.n	8000d26 <sbrk_aligned+0x26>
 8000d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8000d22:	4620      	mov	r0, r4
 8000d24:	bd70      	pop	{r4, r5, r6, pc}
 8000d26:	1cc4      	adds	r4, r0, #3
 8000d28:	f024 0403 	bic.w	r4, r4, #3
 8000d2c:	42a0      	cmp	r0, r4
 8000d2e:	d0f8      	beq.n	8000d22 <sbrk_aligned+0x22>
 8000d30:	1a21      	subs	r1, r4, r0
 8000d32:	4628      	mov	r0, r5
 8000d34:	f000 fb90 	bl	8001458 <_sbrk_r>
 8000d38:	3001      	adds	r0, #1
 8000d3a:	d1f2      	bne.n	8000d22 <sbrk_aligned+0x22>
 8000d3c:	e7ef      	b.n	8000d1e <sbrk_aligned+0x1e>
 8000d3e:	bf00      	nop
 8000d40:	200001c0 	.word	0x200001c0

08000d44 <_malloc_r>:
 8000d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d48:	1ccd      	adds	r5, r1, #3
 8000d4a:	f025 0503 	bic.w	r5, r5, #3
 8000d4e:	3508      	adds	r5, #8
 8000d50:	2d0c      	cmp	r5, #12
 8000d52:	bf38      	it	cc
 8000d54:	250c      	movcc	r5, #12
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	4606      	mov	r6, r0
 8000d5a:	db01      	blt.n	8000d60 <_malloc_r+0x1c>
 8000d5c:	42a9      	cmp	r1, r5
 8000d5e:	d904      	bls.n	8000d6a <_malloc_r+0x26>
 8000d60:	230c      	movs	r3, #12
 8000d62:	6033      	str	r3, [r6, #0]
 8000d64:	2000      	movs	r0, #0
 8000d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e40 <_malloc_r+0xfc>
 8000d6e:	f000 f869 	bl	8000e44 <__malloc_lock>
 8000d72:	f8d8 3000 	ldr.w	r3, [r8]
 8000d76:	461c      	mov	r4, r3
 8000d78:	bb44      	cbnz	r4, 8000dcc <_malloc_r+0x88>
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	f7ff ffbf 	bl	8000d00 <sbrk_aligned>
 8000d82:	1c43      	adds	r3, r0, #1
 8000d84:	4604      	mov	r4, r0
 8000d86:	d158      	bne.n	8000e3a <_malloc_r+0xf6>
 8000d88:	f8d8 4000 	ldr.w	r4, [r8]
 8000d8c:	4627      	mov	r7, r4
 8000d8e:	2f00      	cmp	r7, #0
 8000d90:	d143      	bne.n	8000e1a <_malloc_r+0xd6>
 8000d92:	2c00      	cmp	r4, #0
 8000d94:	d04b      	beq.n	8000e2e <_malloc_r+0xea>
 8000d96:	6823      	ldr	r3, [r4, #0]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	eb04 0903 	add.w	r9, r4, r3
 8000da0:	f000 fb5a 	bl	8001458 <_sbrk_r>
 8000da4:	4581      	cmp	r9, r0
 8000da6:	d142      	bne.n	8000e2e <_malloc_r+0xea>
 8000da8:	6821      	ldr	r1, [r4, #0]
 8000daa:	1a6d      	subs	r5, r5, r1
 8000dac:	4629      	mov	r1, r5
 8000dae:	4630      	mov	r0, r6
 8000db0:	f7ff ffa6 	bl	8000d00 <sbrk_aligned>
 8000db4:	3001      	adds	r0, #1
 8000db6:	d03a      	beq.n	8000e2e <_malloc_r+0xea>
 8000db8:	6823      	ldr	r3, [r4, #0]
 8000dba:	442b      	add	r3, r5
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	bb62      	cbnz	r2, 8000e20 <_malloc_r+0xdc>
 8000dc6:	f8c8 7000 	str.w	r7, [r8]
 8000dca:	e00f      	b.n	8000dec <_malloc_r+0xa8>
 8000dcc:	6822      	ldr	r2, [r4, #0]
 8000dce:	1b52      	subs	r2, r2, r5
 8000dd0:	d420      	bmi.n	8000e14 <_malloc_r+0xd0>
 8000dd2:	2a0b      	cmp	r2, #11
 8000dd4:	d917      	bls.n	8000e06 <_malloc_r+0xc2>
 8000dd6:	1961      	adds	r1, r4, r5
 8000dd8:	42a3      	cmp	r3, r4
 8000dda:	6025      	str	r5, [r4, #0]
 8000ddc:	bf18      	it	ne
 8000dde:	6059      	strne	r1, [r3, #4]
 8000de0:	6863      	ldr	r3, [r4, #4]
 8000de2:	bf08      	it	eq
 8000de4:	f8c8 1000 	streq.w	r1, [r8]
 8000de8:	5162      	str	r2, [r4, r5]
 8000dea:	604b      	str	r3, [r1, #4]
 8000dec:	4630      	mov	r0, r6
 8000dee:	f000 f82f 	bl	8000e50 <__malloc_unlock>
 8000df2:	f104 000b 	add.w	r0, r4, #11
 8000df6:	1d23      	adds	r3, r4, #4
 8000df8:	f020 0007 	bic.w	r0, r0, #7
 8000dfc:	1ac2      	subs	r2, r0, r3
 8000dfe:	bf1c      	itt	ne
 8000e00:	1a1b      	subne	r3, r3, r0
 8000e02:	50a3      	strne	r3, [r4, r2]
 8000e04:	e7af      	b.n	8000d66 <_malloc_r+0x22>
 8000e06:	6862      	ldr	r2, [r4, #4]
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	bf0c      	ite	eq
 8000e0c:	f8c8 2000 	streq.w	r2, [r8]
 8000e10:	605a      	strne	r2, [r3, #4]
 8000e12:	e7eb      	b.n	8000dec <_malloc_r+0xa8>
 8000e14:	4623      	mov	r3, r4
 8000e16:	6864      	ldr	r4, [r4, #4]
 8000e18:	e7ae      	b.n	8000d78 <_malloc_r+0x34>
 8000e1a:	463c      	mov	r4, r7
 8000e1c:	687f      	ldr	r7, [r7, #4]
 8000e1e:	e7b6      	b.n	8000d8e <_malloc_r+0x4a>
 8000e20:	461a      	mov	r2, r3
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	42a3      	cmp	r3, r4
 8000e26:	d1fb      	bne.n	8000e20 <_malloc_r+0xdc>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	6053      	str	r3, [r2, #4]
 8000e2c:	e7de      	b.n	8000dec <_malloc_r+0xa8>
 8000e2e:	230c      	movs	r3, #12
 8000e30:	6033      	str	r3, [r6, #0]
 8000e32:	4630      	mov	r0, r6
 8000e34:	f000 f80c 	bl	8000e50 <__malloc_unlock>
 8000e38:	e794      	b.n	8000d64 <_malloc_r+0x20>
 8000e3a:	6005      	str	r5, [r0, #0]
 8000e3c:	e7d6      	b.n	8000dec <_malloc_r+0xa8>
 8000e3e:	bf00      	nop
 8000e40:	200001c4 	.word	0x200001c4

08000e44 <__malloc_lock>:
 8000e44:	4801      	ldr	r0, [pc, #4]	@ (8000e4c <__malloc_lock+0x8>)
 8000e46:	f7ff bf0f 	b.w	8000c68 <__retarget_lock_acquire_recursive>
 8000e4a:	bf00      	nop
 8000e4c:	200001bc 	.word	0x200001bc

08000e50 <__malloc_unlock>:
 8000e50:	4801      	ldr	r0, [pc, #4]	@ (8000e58 <__malloc_unlock+0x8>)
 8000e52:	f7ff bf0a 	b.w	8000c6a <__retarget_lock_release_recursive>
 8000e56:	bf00      	nop
 8000e58:	200001bc 	.word	0x200001bc

08000e5c <__ssputs_r>:
 8000e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e60:	688e      	ldr	r6, [r1, #8]
 8000e62:	461f      	mov	r7, r3
 8000e64:	42be      	cmp	r6, r7
 8000e66:	680b      	ldr	r3, [r1, #0]
 8000e68:	4682      	mov	sl, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4690      	mov	r8, r2
 8000e6e:	d82d      	bhi.n	8000ecc <__ssputs_r+0x70>
 8000e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000e78:	d026      	beq.n	8000ec8 <__ssputs_r+0x6c>
 8000e7a:	6965      	ldr	r5, [r4, #20]
 8000e7c:	6909      	ldr	r1, [r1, #16]
 8000e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e82:	eba3 0901 	sub.w	r9, r3, r1
 8000e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000e8a:	1c7b      	adds	r3, r7, #1
 8000e8c:	444b      	add	r3, r9
 8000e8e:	106d      	asrs	r5, r5, #1
 8000e90:	429d      	cmp	r5, r3
 8000e92:	bf38      	it	cc
 8000e94:	461d      	movcc	r5, r3
 8000e96:	0553      	lsls	r3, r2, #21
 8000e98:	d527      	bpl.n	8000eea <__ssputs_r+0x8e>
 8000e9a:	4629      	mov	r1, r5
 8000e9c:	f7ff ff52 	bl	8000d44 <_malloc_r>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	b360      	cbz	r0, 8000efe <__ssputs_r+0xa2>
 8000ea4:	6921      	ldr	r1, [r4, #16]
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	f000 fae6 	bl	8001478 <memcpy>
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb6:	81a3      	strh	r3, [r4, #12]
 8000eb8:	6126      	str	r6, [r4, #16]
 8000eba:	6165      	str	r5, [r4, #20]
 8000ebc:	444e      	add	r6, r9
 8000ebe:	eba5 0509 	sub.w	r5, r5, r9
 8000ec2:	6026      	str	r6, [r4, #0]
 8000ec4:	60a5      	str	r5, [r4, #8]
 8000ec6:	463e      	mov	r6, r7
 8000ec8:	42be      	cmp	r6, r7
 8000eca:	d900      	bls.n	8000ece <__ssputs_r+0x72>
 8000ecc:	463e      	mov	r6, r7
 8000ece:	6820      	ldr	r0, [r4, #0]
 8000ed0:	4632      	mov	r2, r6
 8000ed2:	4641      	mov	r1, r8
 8000ed4:	f000 faa6 	bl	8001424 <memmove>
 8000ed8:	68a3      	ldr	r3, [r4, #8]
 8000eda:	1b9b      	subs	r3, r3, r6
 8000edc:	60a3      	str	r3, [r4, #8]
 8000ede:	6823      	ldr	r3, [r4, #0]
 8000ee0:	4433      	add	r3, r6
 8000ee2:	6023      	str	r3, [r4, #0]
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	462a      	mov	r2, r5
 8000eec:	f000 fad2 	bl	8001494 <_realloc_r>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	d1e0      	bne.n	8000eb8 <__ssputs_r+0x5c>
 8000ef6:	6921      	ldr	r1, [r4, #16]
 8000ef8:	4650      	mov	r0, sl
 8000efa:	f7ff feb7 	bl	8000c6c <_free_r>
 8000efe:	230c      	movs	r3, #12
 8000f00:	f8ca 3000 	str.w	r3, [sl]
 8000f04:	89a3      	ldrh	r3, [r4, #12]
 8000f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f0a:	81a3      	strh	r3, [r4, #12]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	e7e9      	b.n	8000ee6 <__ssputs_r+0x8a>
	...

08000f14 <_svfiprintf_r>:
 8000f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f18:	4698      	mov	r8, r3
 8000f1a:	898b      	ldrh	r3, [r1, #12]
 8000f1c:	061b      	lsls	r3, r3, #24
 8000f1e:	b09d      	sub	sp, #116	@ 0x74
 8000f20:	4607      	mov	r7, r0
 8000f22:	460d      	mov	r5, r1
 8000f24:	4614      	mov	r4, r2
 8000f26:	d510      	bpl.n	8000f4a <_svfiprintf_r+0x36>
 8000f28:	690b      	ldr	r3, [r1, #16]
 8000f2a:	b973      	cbnz	r3, 8000f4a <_svfiprintf_r+0x36>
 8000f2c:	2140      	movs	r1, #64	@ 0x40
 8000f2e:	f7ff ff09 	bl	8000d44 <_malloc_r>
 8000f32:	6028      	str	r0, [r5, #0]
 8000f34:	6128      	str	r0, [r5, #16]
 8000f36:	b930      	cbnz	r0, 8000f46 <_svfiprintf_r+0x32>
 8000f38:	230c      	movs	r3, #12
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	b01d      	add	sp, #116	@ 0x74
 8000f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f46:	2340      	movs	r3, #64	@ 0x40
 8000f48:	616b      	str	r3, [r5, #20]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f4e:	2320      	movs	r3, #32
 8000f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f58:	2330      	movs	r3, #48	@ 0x30
 8000f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80010f8 <_svfiprintf_r+0x1e4>
 8000f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000f62:	f04f 0901 	mov.w	r9, #1
 8000f66:	4623      	mov	r3, r4
 8000f68:	469a      	mov	sl, r3
 8000f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f6e:	b10a      	cbz	r2, 8000f74 <_svfiprintf_r+0x60>
 8000f70:	2a25      	cmp	r2, #37	@ 0x25
 8000f72:	d1f9      	bne.n	8000f68 <_svfiprintf_r+0x54>
 8000f74:	ebba 0b04 	subs.w	fp, sl, r4
 8000f78:	d00b      	beq.n	8000f92 <_svfiprintf_r+0x7e>
 8000f7a:	465b      	mov	r3, fp
 8000f7c:	4622      	mov	r2, r4
 8000f7e:	4629      	mov	r1, r5
 8000f80:	4638      	mov	r0, r7
 8000f82:	f7ff ff6b 	bl	8000e5c <__ssputs_r>
 8000f86:	3001      	adds	r0, #1
 8000f88:	f000 80a7 	beq.w	80010da <_svfiprintf_r+0x1c6>
 8000f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f8e:	445a      	add	r2, fp
 8000f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f92:	f89a 3000 	ldrb.w	r3, [sl]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 809f 	beq.w	80010da <_svfiprintf_r+0x1c6>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fa6:	f10a 0a01 	add.w	sl, sl, #1
 8000faa:	9304      	str	r3, [sp, #16]
 8000fac:	9307      	str	r3, [sp, #28]
 8000fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8000fb4:	4654      	mov	r4, sl
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fbc:	484e      	ldr	r0, [pc, #312]	@ (80010f8 <_svfiprintf_r+0x1e4>)
 8000fbe:	f7ff f917 	bl	80001f0 <memchr>
 8000fc2:	9a04      	ldr	r2, [sp, #16]
 8000fc4:	b9d8      	cbnz	r0, 8000ffe <_svfiprintf_r+0xea>
 8000fc6:	06d0      	lsls	r0, r2, #27
 8000fc8:	bf44      	itt	mi
 8000fca:	2320      	movmi	r3, #32
 8000fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fd0:	0711      	lsls	r1, r2, #28
 8000fd2:	bf44      	itt	mi
 8000fd4:	232b      	movmi	r3, #43	@ 0x2b
 8000fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fda:	f89a 3000 	ldrb.w	r3, [sl]
 8000fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fe0:	d015      	beq.n	800100e <_svfiprintf_r+0xfa>
 8000fe2:	9a07      	ldr	r2, [sp, #28]
 8000fe4:	4654      	mov	r4, sl
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f04f 0c0a 	mov.w	ip, #10
 8000fec:	4621      	mov	r1, r4
 8000fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ff2:	3b30      	subs	r3, #48	@ 0x30
 8000ff4:	2b09      	cmp	r3, #9
 8000ff6:	d94b      	bls.n	8001090 <_svfiprintf_r+0x17c>
 8000ff8:	b1b0      	cbz	r0, 8001028 <_svfiprintf_r+0x114>
 8000ffa:	9207      	str	r2, [sp, #28]
 8000ffc:	e014      	b.n	8001028 <_svfiprintf_r+0x114>
 8000ffe:	eba0 0308 	sub.w	r3, r0, r8
 8001002:	fa09 f303 	lsl.w	r3, r9, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	9304      	str	r3, [sp, #16]
 800100a:	46a2      	mov	sl, r4
 800100c:	e7d2      	b.n	8000fb4 <_svfiprintf_r+0xa0>
 800100e:	9b03      	ldr	r3, [sp, #12]
 8001010:	1d19      	adds	r1, r3, #4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	9103      	str	r1, [sp, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	bfbb      	ittet	lt
 800101a:	425b      	neglt	r3, r3
 800101c:	f042 0202 	orrlt.w	r2, r2, #2
 8001020:	9307      	strge	r3, [sp, #28]
 8001022:	9307      	strlt	r3, [sp, #28]
 8001024:	bfb8      	it	lt
 8001026:	9204      	strlt	r2, [sp, #16]
 8001028:	7823      	ldrb	r3, [r4, #0]
 800102a:	2b2e      	cmp	r3, #46	@ 0x2e
 800102c:	d10a      	bne.n	8001044 <_svfiprintf_r+0x130>
 800102e:	7863      	ldrb	r3, [r4, #1]
 8001030:	2b2a      	cmp	r3, #42	@ 0x2a
 8001032:	d132      	bne.n	800109a <_svfiprintf_r+0x186>
 8001034:	9b03      	ldr	r3, [sp, #12]
 8001036:	1d1a      	adds	r2, r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	9203      	str	r2, [sp, #12]
 800103c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001040:	3402      	adds	r4, #2
 8001042:	9305      	str	r3, [sp, #20]
 8001044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001108 <_svfiprintf_r+0x1f4>
 8001048:	7821      	ldrb	r1, [r4, #0]
 800104a:	2203      	movs	r2, #3
 800104c:	4650      	mov	r0, sl
 800104e:	f7ff f8cf 	bl	80001f0 <memchr>
 8001052:	b138      	cbz	r0, 8001064 <_svfiprintf_r+0x150>
 8001054:	9b04      	ldr	r3, [sp, #16]
 8001056:	eba0 000a 	sub.w	r0, r0, sl
 800105a:	2240      	movs	r2, #64	@ 0x40
 800105c:	4082      	lsls	r2, r0
 800105e:	4313      	orrs	r3, r2
 8001060:	3401      	adds	r4, #1
 8001062:	9304      	str	r3, [sp, #16]
 8001064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001068:	4824      	ldr	r0, [pc, #144]	@ (80010fc <_svfiprintf_r+0x1e8>)
 800106a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800106e:	2206      	movs	r2, #6
 8001070:	f7ff f8be 	bl	80001f0 <memchr>
 8001074:	2800      	cmp	r0, #0
 8001076:	d036      	beq.n	80010e6 <_svfiprintf_r+0x1d2>
 8001078:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <_svfiprintf_r+0x1ec>)
 800107a:	bb1b      	cbnz	r3, 80010c4 <_svfiprintf_r+0x1b0>
 800107c:	9b03      	ldr	r3, [sp, #12]
 800107e:	3307      	adds	r3, #7
 8001080:	f023 0307 	bic.w	r3, r3, #7
 8001084:	3308      	adds	r3, #8
 8001086:	9303      	str	r3, [sp, #12]
 8001088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800108a:	4433      	add	r3, r6
 800108c:	9309      	str	r3, [sp, #36]	@ 0x24
 800108e:	e76a      	b.n	8000f66 <_svfiprintf_r+0x52>
 8001090:	fb0c 3202 	mla	r2, ip, r2, r3
 8001094:	460c      	mov	r4, r1
 8001096:	2001      	movs	r0, #1
 8001098:	e7a8      	b.n	8000fec <_svfiprintf_r+0xd8>
 800109a:	2300      	movs	r3, #0
 800109c:	3401      	adds	r4, #1
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 0c0a 	mov.w	ip, #10
 80010a6:	4620      	mov	r0, r4
 80010a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010ac:	3a30      	subs	r2, #48	@ 0x30
 80010ae:	2a09      	cmp	r2, #9
 80010b0:	d903      	bls.n	80010ba <_svfiprintf_r+0x1a6>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0c6      	beq.n	8001044 <_svfiprintf_r+0x130>
 80010b6:	9105      	str	r1, [sp, #20]
 80010b8:	e7c4      	b.n	8001044 <_svfiprintf_r+0x130>
 80010ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80010be:	4604      	mov	r4, r0
 80010c0:	2301      	movs	r3, #1
 80010c2:	e7f0      	b.n	80010a6 <_svfiprintf_r+0x192>
 80010c4:	ab03      	add	r3, sp, #12
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	462a      	mov	r2, r5
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <_svfiprintf_r+0x1f0>)
 80010cc:	a904      	add	r1, sp, #16
 80010ce:	4638      	mov	r0, r7
 80010d0:	f3af 8000 	nop.w
 80010d4:	1c42      	adds	r2, r0, #1
 80010d6:	4606      	mov	r6, r0
 80010d8:	d1d6      	bne.n	8001088 <_svfiprintf_r+0x174>
 80010da:	89ab      	ldrh	r3, [r5, #12]
 80010dc:	065b      	lsls	r3, r3, #25
 80010de:	f53f af2d 	bmi.w	8000f3c <_svfiprintf_r+0x28>
 80010e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80010e4:	e72c      	b.n	8000f40 <_svfiprintf_r+0x2c>
 80010e6:	ab03      	add	r3, sp, #12
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	462a      	mov	r2, r5
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <_svfiprintf_r+0x1f0>)
 80010ee:	a904      	add	r1, sp, #16
 80010f0:	4638      	mov	r0, r7
 80010f2:	f000 f879 	bl	80011e8 <_printf_i>
 80010f6:	e7ed      	b.n	80010d4 <_svfiprintf_r+0x1c0>
 80010f8:	0800155c 	.word	0x0800155c
 80010fc:	08001566 	.word	0x08001566
 8001100:	00000000 	.word	0x00000000
 8001104:	08000e5d 	.word	0x08000e5d
 8001108:	08001562 	.word	0x08001562

0800110c <_printf_common>:
 800110c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001110:	4616      	mov	r6, r2
 8001112:	4698      	mov	r8, r3
 8001114:	688a      	ldr	r2, [r1, #8]
 8001116:	690b      	ldr	r3, [r1, #16]
 8001118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800111c:	4293      	cmp	r3, r2
 800111e:	bfb8      	it	lt
 8001120:	4613      	movlt	r3, r2
 8001122:	6033      	str	r3, [r6, #0]
 8001124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001128:	4607      	mov	r7, r0
 800112a:	460c      	mov	r4, r1
 800112c:	b10a      	cbz	r2, 8001132 <_printf_common+0x26>
 800112e:	3301      	adds	r3, #1
 8001130:	6033      	str	r3, [r6, #0]
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	0699      	lsls	r1, r3, #26
 8001136:	bf42      	ittt	mi
 8001138:	6833      	ldrmi	r3, [r6, #0]
 800113a:	3302      	addmi	r3, #2
 800113c:	6033      	strmi	r3, [r6, #0]
 800113e:	6825      	ldr	r5, [r4, #0]
 8001140:	f015 0506 	ands.w	r5, r5, #6
 8001144:	d106      	bne.n	8001154 <_printf_common+0x48>
 8001146:	f104 0a19 	add.w	sl, r4, #25
 800114a:	68e3      	ldr	r3, [r4, #12]
 800114c:	6832      	ldr	r2, [r6, #0]
 800114e:	1a9b      	subs	r3, r3, r2
 8001150:	42ab      	cmp	r3, r5
 8001152:	dc26      	bgt.n	80011a2 <_printf_common+0x96>
 8001154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001158:	6822      	ldr	r2, [r4, #0]
 800115a:	3b00      	subs	r3, #0
 800115c:	bf18      	it	ne
 800115e:	2301      	movne	r3, #1
 8001160:	0692      	lsls	r2, r2, #26
 8001162:	d42b      	bmi.n	80011bc <_printf_common+0xb0>
 8001164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001168:	4641      	mov	r1, r8
 800116a:	4638      	mov	r0, r7
 800116c:	47c8      	blx	r9
 800116e:	3001      	adds	r0, #1
 8001170:	d01e      	beq.n	80011b0 <_printf_common+0xa4>
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	6922      	ldr	r2, [r4, #16]
 8001176:	f003 0306 	and.w	r3, r3, #6
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf02      	ittt	eq
 800117e:	68e5      	ldreq	r5, [r4, #12]
 8001180:	6833      	ldreq	r3, [r6, #0]
 8001182:	1aed      	subeq	r5, r5, r3
 8001184:	68a3      	ldr	r3, [r4, #8]
 8001186:	bf0c      	ite	eq
 8001188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800118c:	2500      	movne	r5, #0
 800118e:	4293      	cmp	r3, r2
 8001190:	bfc4      	itt	gt
 8001192:	1a9b      	subgt	r3, r3, r2
 8001194:	18ed      	addgt	r5, r5, r3
 8001196:	2600      	movs	r6, #0
 8001198:	341a      	adds	r4, #26
 800119a:	42b5      	cmp	r5, r6
 800119c:	d11a      	bne.n	80011d4 <_printf_common+0xc8>
 800119e:	2000      	movs	r0, #0
 80011a0:	e008      	b.n	80011b4 <_printf_common+0xa8>
 80011a2:	2301      	movs	r3, #1
 80011a4:	4652      	mov	r2, sl
 80011a6:	4641      	mov	r1, r8
 80011a8:	4638      	mov	r0, r7
 80011aa:	47c8      	blx	r9
 80011ac:	3001      	adds	r0, #1
 80011ae:	d103      	bne.n	80011b8 <_printf_common+0xac>
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b8:	3501      	adds	r5, #1
 80011ba:	e7c6      	b.n	800114a <_printf_common+0x3e>
 80011bc:	18e1      	adds	r1, r4, r3
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	2030      	movs	r0, #48	@ 0x30
 80011c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80011c6:	4422      	add	r2, r4
 80011c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80011cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80011d0:	3302      	adds	r3, #2
 80011d2:	e7c7      	b.n	8001164 <_printf_common+0x58>
 80011d4:	2301      	movs	r3, #1
 80011d6:	4622      	mov	r2, r4
 80011d8:	4641      	mov	r1, r8
 80011da:	4638      	mov	r0, r7
 80011dc:	47c8      	blx	r9
 80011de:	3001      	adds	r0, #1
 80011e0:	d0e6      	beq.n	80011b0 <_printf_common+0xa4>
 80011e2:	3601      	adds	r6, #1
 80011e4:	e7d9      	b.n	800119a <_printf_common+0x8e>
	...

080011e8 <_printf_i>:
 80011e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	7e0f      	ldrb	r7, [r1, #24]
 80011ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80011f0:	2f78      	cmp	r7, #120	@ 0x78
 80011f2:	4691      	mov	r9, r2
 80011f4:	4680      	mov	r8, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	469a      	mov	sl, r3
 80011fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80011fe:	d807      	bhi.n	8001210 <_printf_i+0x28>
 8001200:	2f62      	cmp	r7, #98	@ 0x62
 8001202:	d80a      	bhi.n	800121a <_printf_i+0x32>
 8001204:	2f00      	cmp	r7, #0
 8001206:	f000 80d1 	beq.w	80013ac <_printf_i+0x1c4>
 800120a:	2f58      	cmp	r7, #88	@ 0x58
 800120c:	f000 80b8 	beq.w	8001380 <_printf_i+0x198>
 8001210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001218:	e03a      	b.n	8001290 <_printf_i+0xa8>
 800121a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800121e:	2b15      	cmp	r3, #21
 8001220:	d8f6      	bhi.n	8001210 <_printf_i+0x28>
 8001222:	a101      	add	r1, pc, #4	@ (adr r1, 8001228 <_printf_i+0x40>)
 8001224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001228:	08001281 	.word	0x08001281
 800122c:	08001295 	.word	0x08001295
 8001230:	08001211 	.word	0x08001211
 8001234:	08001211 	.word	0x08001211
 8001238:	08001211 	.word	0x08001211
 800123c:	08001211 	.word	0x08001211
 8001240:	08001295 	.word	0x08001295
 8001244:	08001211 	.word	0x08001211
 8001248:	08001211 	.word	0x08001211
 800124c:	08001211 	.word	0x08001211
 8001250:	08001211 	.word	0x08001211
 8001254:	08001393 	.word	0x08001393
 8001258:	080012bf 	.word	0x080012bf
 800125c:	0800134d 	.word	0x0800134d
 8001260:	08001211 	.word	0x08001211
 8001264:	08001211 	.word	0x08001211
 8001268:	080013b5 	.word	0x080013b5
 800126c:	08001211 	.word	0x08001211
 8001270:	080012bf 	.word	0x080012bf
 8001274:	08001211 	.word	0x08001211
 8001278:	08001211 	.word	0x08001211
 800127c:	08001355 	.word	0x08001355
 8001280:	6833      	ldr	r3, [r6, #0]
 8001282:	1d1a      	adds	r2, r3, #4
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6032      	str	r2, [r6, #0]
 8001288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800128c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001290:	2301      	movs	r3, #1
 8001292:	e09c      	b.n	80013ce <_printf_i+0x1e6>
 8001294:	6833      	ldr	r3, [r6, #0]
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	1d19      	adds	r1, r3, #4
 800129a:	6031      	str	r1, [r6, #0]
 800129c:	0606      	lsls	r6, r0, #24
 800129e:	d501      	bpl.n	80012a4 <_printf_i+0xbc>
 80012a0:	681d      	ldr	r5, [r3, #0]
 80012a2:	e003      	b.n	80012ac <_printf_i+0xc4>
 80012a4:	0645      	lsls	r5, r0, #25
 80012a6:	d5fb      	bpl.n	80012a0 <_printf_i+0xb8>
 80012a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80012ac:	2d00      	cmp	r5, #0
 80012ae:	da03      	bge.n	80012b8 <_printf_i+0xd0>
 80012b0:	232d      	movs	r3, #45	@ 0x2d
 80012b2:	426d      	negs	r5, r5
 80012b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012b8:	4858      	ldr	r0, [pc, #352]	@ (800141c <_printf_i+0x234>)
 80012ba:	230a      	movs	r3, #10
 80012bc:	e011      	b.n	80012e2 <_printf_i+0xfa>
 80012be:	6821      	ldr	r1, [r4, #0]
 80012c0:	6833      	ldr	r3, [r6, #0]
 80012c2:	0608      	lsls	r0, r1, #24
 80012c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80012c8:	d402      	bmi.n	80012d0 <_printf_i+0xe8>
 80012ca:	0649      	lsls	r1, r1, #25
 80012cc:	bf48      	it	mi
 80012ce:	b2ad      	uxthmi	r5, r5
 80012d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80012d2:	4852      	ldr	r0, [pc, #328]	@ (800141c <_printf_i+0x234>)
 80012d4:	6033      	str	r3, [r6, #0]
 80012d6:	bf14      	ite	ne
 80012d8:	230a      	movne	r3, #10
 80012da:	2308      	moveq	r3, #8
 80012dc:	2100      	movs	r1, #0
 80012de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80012e2:	6866      	ldr	r6, [r4, #4]
 80012e4:	60a6      	str	r6, [r4, #8]
 80012e6:	2e00      	cmp	r6, #0
 80012e8:	db05      	blt.n	80012f6 <_printf_i+0x10e>
 80012ea:	6821      	ldr	r1, [r4, #0]
 80012ec:	432e      	orrs	r6, r5
 80012ee:	f021 0104 	bic.w	r1, r1, #4
 80012f2:	6021      	str	r1, [r4, #0]
 80012f4:	d04b      	beq.n	800138e <_printf_i+0x1a6>
 80012f6:	4616      	mov	r6, r2
 80012f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80012fc:	fb03 5711 	mls	r7, r3, r1, r5
 8001300:	5dc7      	ldrb	r7, [r0, r7]
 8001302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001306:	462f      	mov	r7, r5
 8001308:	42bb      	cmp	r3, r7
 800130a:	460d      	mov	r5, r1
 800130c:	d9f4      	bls.n	80012f8 <_printf_i+0x110>
 800130e:	2b08      	cmp	r3, #8
 8001310:	d10b      	bne.n	800132a <_printf_i+0x142>
 8001312:	6823      	ldr	r3, [r4, #0]
 8001314:	07df      	lsls	r7, r3, #31
 8001316:	d508      	bpl.n	800132a <_printf_i+0x142>
 8001318:	6923      	ldr	r3, [r4, #16]
 800131a:	6861      	ldr	r1, [r4, #4]
 800131c:	4299      	cmp	r1, r3
 800131e:	bfde      	ittt	le
 8001320:	2330      	movle	r3, #48	@ 0x30
 8001322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800132a:	1b92      	subs	r2, r2, r6
 800132c:	6122      	str	r2, [r4, #16]
 800132e:	f8cd a000 	str.w	sl, [sp]
 8001332:	464b      	mov	r3, r9
 8001334:	aa03      	add	r2, sp, #12
 8001336:	4621      	mov	r1, r4
 8001338:	4640      	mov	r0, r8
 800133a:	f7ff fee7 	bl	800110c <_printf_common>
 800133e:	3001      	adds	r0, #1
 8001340:	d14a      	bne.n	80013d8 <_printf_i+0x1f0>
 8001342:	f04f 30ff 	mov.w	r0, #4294967295
 8001346:	b004      	add	sp, #16
 8001348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	f043 0320 	orr.w	r3, r3, #32
 8001352:	6023      	str	r3, [r4, #0]
 8001354:	4832      	ldr	r0, [pc, #200]	@ (8001420 <_printf_i+0x238>)
 8001356:	2778      	movs	r7, #120	@ 0x78
 8001358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	6831      	ldr	r1, [r6, #0]
 8001360:	061f      	lsls	r7, r3, #24
 8001362:	f851 5b04 	ldr.w	r5, [r1], #4
 8001366:	d402      	bmi.n	800136e <_printf_i+0x186>
 8001368:	065f      	lsls	r7, r3, #25
 800136a:	bf48      	it	mi
 800136c:	b2ad      	uxthmi	r5, r5
 800136e:	6031      	str	r1, [r6, #0]
 8001370:	07d9      	lsls	r1, r3, #31
 8001372:	bf44      	itt	mi
 8001374:	f043 0320 	orrmi.w	r3, r3, #32
 8001378:	6023      	strmi	r3, [r4, #0]
 800137a:	b11d      	cbz	r5, 8001384 <_printf_i+0x19c>
 800137c:	2310      	movs	r3, #16
 800137e:	e7ad      	b.n	80012dc <_printf_i+0xf4>
 8001380:	4826      	ldr	r0, [pc, #152]	@ (800141c <_printf_i+0x234>)
 8001382:	e7e9      	b.n	8001358 <_printf_i+0x170>
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	f023 0320 	bic.w	r3, r3, #32
 800138a:	6023      	str	r3, [r4, #0]
 800138c:	e7f6      	b.n	800137c <_printf_i+0x194>
 800138e:	4616      	mov	r6, r2
 8001390:	e7bd      	b.n	800130e <_printf_i+0x126>
 8001392:	6833      	ldr	r3, [r6, #0]
 8001394:	6825      	ldr	r5, [r4, #0]
 8001396:	6961      	ldr	r1, [r4, #20]
 8001398:	1d18      	adds	r0, r3, #4
 800139a:	6030      	str	r0, [r6, #0]
 800139c:	062e      	lsls	r6, r5, #24
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	d501      	bpl.n	80013a6 <_printf_i+0x1be>
 80013a2:	6019      	str	r1, [r3, #0]
 80013a4:	e002      	b.n	80013ac <_printf_i+0x1c4>
 80013a6:	0668      	lsls	r0, r5, #25
 80013a8:	d5fb      	bpl.n	80013a2 <_printf_i+0x1ba>
 80013aa:	8019      	strh	r1, [r3, #0]
 80013ac:	2300      	movs	r3, #0
 80013ae:	6123      	str	r3, [r4, #16]
 80013b0:	4616      	mov	r6, r2
 80013b2:	e7bc      	b.n	800132e <_printf_i+0x146>
 80013b4:	6833      	ldr	r3, [r6, #0]
 80013b6:	1d1a      	adds	r2, r3, #4
 80013b8:	6032      	str	r2, [r6, #0]
 80013ba:	681e      	ldr	r6, [r3, #0]
 80013bc:	6862      	ldr	r2, [r4, #4]
 80013be:	2100      	movs	r1, #0
 80013c0:	4630      	mov	r0, r6
 80013c2:	f7fe ff15 	bl	80001f0 <memchr>
 80013c6:	b108      	cbz	r0, 80013cc <_printf_i+0x1e4>
 80013c8:	1b80      	subs	r0, r0, r6
 80013ca:	6060      	str	r0, [r4, #4]
 80013cc:	6863      	ldr	r3, [r4, #4]
 80013ce:	6123      	str	r3, [r4, #16]
 80013d0:	2300      	movs	r3, #0
 80013d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013d6:	e7aa      	b.n	800132e <_printf_i+0x146>
 80013d8:	6923      	ldr	r3, [r4, #16]
 80013da:	4632      	mov	r2, r6
 80013dc:	4649      	mov	r1, r9
 80013de:	4640      	mov	r0, r8
 80013e0:	47d0      	blx	sl
 80013e2:	3001      	adds	r0, #1
 80013e4:	d0ad      	beq.n	8001342 <_printf_i+0x15a>
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	079b      	lsls	r3, r3, #30
 80013ea:	d413      	bmi.n	8001414 <_printf_i+0x22c>
 80013ec:	68e0      	ldr	r0, [r4, #12]
 80013ee:	9b03      	ldr	r3, [sp, #12]
 80013f0:	4298      	cmp	r0, r3
 80013f2:	bfb8      	it	lt
 80013f4:	4618      	movlt	r0, r3
 80013f6:	e7a6      	b.n	8001346 <_printf_i+0x15e>
 80013f8:	2301      	movs	r3, #1
 80013fa:	4632      	mov	r2, r6
 80013fc:	4649      	mov	r1, r9
 80013fe:	4640      	mov	r0, r8
 8001400:	47d0      	blx	sl
 8001402:	3001      	adds	r0, #1
 8001404:	d09d      	beq.n	8001342 <_printf_i+0x15a>
 8001406:	3501      	adds	r5, #1
 8001408:	68e3      	ldr	r3, [r4, #12]
 800140a:	9903      	ldr	r1, [sp, #12]
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	42ab      	cmp	r3, r5
 8001410:	dcf2      	bgt.n	80013f8 <_printf_i+0x210>
 8001412:	e7eb      	b.n	80013ec <_printf_i+0x204>
 8001414:	2500      	movs	r5, #0
 8001416:	f104 0619 	add.w	r6, r4, #25
 800141a:	e7f5      	b.n	8001408 <_printf_i+0x220>
 800141c:	0800156d 	.word	0x0800156d
 8001420:	0800157e 	.word	0x0800157e

08001424 <memmove>:
 8001424:	4288      	cmp	r0, r1
 8001426:	b510      	push	{r4, lr}
 8001428:	eb01 0402 	add.w	r4, r1, r2
 800142c:	d902      	bls.n	8001434 <memmove+0x10>
 800142e:	4284      	cmp	r4, r0
 8001430:	4623      	mov	r3, r4
 8001432:	d807      	bhi.n	8001444 <memmove+0x20>
 8001434:	1e43      	subs	r3, r0, #1
 8001436:	42a1      	cmp	r1, r4
 8001438:	d008      	beq.n	800144c <memmove+0x28>
 800143a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800143e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001442:	e7f8      	b.n	8001436 <memmove+0x12>
 8001444:	4402      	add	r2, r0
 8001446:	4601      	mov	r1, r0
 8001448:	428a      	cmp	r2, r1
 800144a:	d100      	bne.n	800144e <memmove+0x2a>
 800144c:	bd10      	pop	{r4, pc}
 800144e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001456:	e7f7      	b.n	8001448 <memmove+0x24>

08001458 <_sbrk_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4d06      	ldr	r5, [pc, #24]	@ (8001474 <_sbrk_r+0x1c>)
 800145c:	2300      	movs	r3, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	602b      	str	r3, [r5, #0]
 8001464:	f7ff faa4 	bl	80009b0 <_sbrk>
 8001468:	1c43      	adds	r3, r0, #1
 800146a:	d102      	bne.n	8001472 <_sbrk_r+0x1a>
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	b103      	cbz	r3, 8001472 <_sbrk_r+0x1a>
 8001470:	6023      	str	r3, [r4, #0]
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	200001b8 	.word	0x200001b8

08001478 <memcpy>:
 8001478:	440a      	add	r2, r1
 800147a:	4291      	cmp	r1, r2
 800147c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001480:	d100      	bne.n	8001484 <memcpy+0xc>
 8001482:	4770      	bx	lr
 8001484:	b510      	push	{r4, lr}
 8001486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800148a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800148e:	4291      	cmp	r1, r2
 8001490:	d1f9      	bne.n	8001486 <memcpy+0xe>
 8001492:	bd10      	pop	{r4, pc}

08001494 <_realloc_r>:
 8001494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001498:	4607      	mov	r7, r0
 800149a:	4614      	mov	r4, r2
 800149c:	460d      	mov	r5, r1
 800149e:	b921      	cbnz	r1, 80014aa <_realloc_r+0x16>
 80014a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80014a4:	4611      	mov	r1, r2
 80014a6:	f7ff bc4d 	b.w	8000d44 <_malloc_r>
 80014aa:	b92a      	cbnz	r2, 80014b8 <_realloc_r+0x24>
 80014ac:	f7ff fbde 	bl	8000c6c <_free_r>
 80014b0:	4625      	mov	r5, r4
 80014b2:	4628      	mov	r0, r5
 80014b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014b8:	f000 f81a 	bl	80014f0 <_malloc_usable_size_r>
 80014bc:	4284      	cmp	r4, r0
 80014be:	4606      	mov	r6, r0
 80014c0:	d802      	bhi.n	80014c8 <_realloc_r+0x34>
 80014c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80014c6:	d8f4      	bhi.n	80014b2 <_realloc_r+0x1e>
 80014c8:	4621      	mov	r1, r4
 80014ca:	4638      	mov	r0, r7
 80014cc:	f7ff fc3a 	bl	8000d44 <_malloc_r>
 80014d0:	4680      	mov	r8, r0
 80014d2:	b908      	cbnz	r0, 80014d8 <_realloc_r+0x44>
 80014d4:	4645      	mov	r5, r8
 80014d6:	e7ec      	b.n	80014b2 <_realloc_r+0x1e>
 80014d8:	42b4      	cmp	r4, r6
 80014da:	4622      	mov	r2, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	bf28      	it	cs
 80014e0:	4632      	movcs	r2, r6
 80014e2:	f7ff ffc9 	bl	8001478 <memcpy>
 80014e6:	4629      	mov	r1, r5
 80014e8:	4638      	mov	r0, r7
 80014ea:	f7ff fbbf 	bl	8000c6c <_free_r>
 80014ee:	e7f1      	b.n	80014d4 <_realloc_r+0x40>

080014f0 <_malloc_usable_size_r>:
 80014f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014f4:	1f18      	subs	r0, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	bfbc      	itt	lt
 80014fa:	580b      	ldrlt	r3, [r1, r0]
 80014fc:	18c0      	addlt	r0, r0, r3
 80014fe:	4770      	bx	lr

08001500 <_init>:
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	bf00      	nop
 8001504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001506:	bc08      	pop	{r3}
 8001508:	469e      	mov	lr, r3
 800150a:	4770      	bx	lr

0800150c <_fini>:
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	bf00      	nop
 8001510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001512:	bc08      	pop	{r3}
 8001514:	469e      	mov	lr, r3
 8001516:	4770      	bx	lr
