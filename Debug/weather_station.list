
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001588  08001588  00002588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001618  08001618  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001618  08001618  00002618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001620  08001620  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001620  08001620  00002620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001624  08001624  00002624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001628  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000054  0800167c  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800167c  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002018  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009ed  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b8  00000000  00000000  00005a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e5  00000000  00000000  00005d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000150bc  00000000  00000000  00005f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000434e  00000000  00000000  0001afe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082cb4  00000000  00000000  0001f337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1feb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d7c  00000000  00000000  000a2030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a2dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001570 	.word	0x08001570

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001570 	.word	0x08001570

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <receive_data>:

/*
	data: address of the array used to hold the 40 bits of data sent from the DHT11
 */
void receive_data(uint8_t* data)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 8000298:	4b43      	ldr	r3, [pc, #268]	@ (80003a8 <receive_data+0x118>)
 800029a:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 800029c:	4b43      	ldr	r3, [pc, #268]	@ (80003ac <receive_data+0x11c>)
 800029e:	613b      	str	r3, [r7, #16]
	uint32_t* GPIOC_IDR = (uint32_t*) (GPIOC_BASE_ADDR + 0x10);
 80002a0:	4b43      	ldr	r3, [pc, #268]	@ (80003b0 <receive_data+0x120>)
 80002a2:	60fb      	str	r3, [r7, #12]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	601a      	str	r2, [r3, #0]

	/* MCU pulls down voltage for at least 18ms */
	*GPIOC_ODR &= ~(1 << 14);
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80002c4:	693b      	ldr	r3, [r7, #16]
 80002c6:	601a      	str	r2, [r3, #0]
	delay_ms(20);
 80002c8:	2014      	movs	r0, #20
 80002ca:	f000 fbf1 	bl	8000ab0 <delay_ms>

	/* MCU pulls up voltage and wait for DHT response (~20us) */
	*GPIOC_ODR |= 1 << 14;
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	601a      	str	r2, [r3, #0]
	delay_us(20);
 80002da:	2014      	movs	r0, #20
 80002dc:	f000 fc06 	bl	8000aec <delay_us>

	/* Set PC14 as INPUT to receive the response from DHT11 */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	601a      	str	r2, [r3, #0]

	/* wait for DHT11 to response */
	while (((*GPIOC_IDR >> 14) & 1) == 1);
 80002ec:	bf00      	nop
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	0b9b      	lsrs	r3, r3, #14
 80002f4:	f003 0301 	and.w	r3, r3, #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1f8      	bne.n	80002ee <receive_data+0x5e>
	delay_us(60);
 80002fc:	203c      	movs	r0, #60	@ 0x3c
 80002fe:	f000 fbf5 	bl	8000aec <delay_us>
	while (((*GPIOC_IDR >> 14) & 1) == 0);
 8000302:	bf00      	nop
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	0b9b      	lsrs	r3, r3, #14
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f8      	beq.n	8000304 <receive_data+0x74>
	delay_us(60);
 8000312:	203c      	movs	r0, #60	@ 0x3c
 8000314:	f000 fbea 	bl	8000aec <delay_us>

	for (int i = 0; i < 5; i++)
 8000318:	2300      	movs	r3, #0
 800031a:	61fb      	str	r3, [r7, #28]
 800031c:	e039      	b.n	8000392 <receive_data+0x102>
	{
		for (int j = 7; j >= 0; j--)
 800031e:	2307      	movs	r3, #7
 8000320:	61bb      	str	r3, [r7, #24]
 8000322:	e030      	b.n	8000386 <receive_data+0xf6>
		{
			while (((*GPIOC_IDR >> 14) & 1) == 1);
 8000324:	bf00      	nop
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	0b9b      	lsrs	r3, r3, #14
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f8      	bne.n	8000326 <receive_data+0x96>
			delay_us(30);
 8000334:	201e      	movs	r0, #30
 8000336:	f000 fbd9 	bl	8000aec <delay_us>
			while (((*GPIOC_IDR >> 14) & 1) == 0);
 800033a:	bf00      	nop
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	0b9b      	lsrs	r3, r3, #14
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0f8      	beq.n	800033c <receive_data+0xac>
			delay_us(30);
 800034a:	201e      	movs	r0, #30
 800034c:	f000 fbce 	bl	8000aec <delay_us>

			if (((*GPIOC_IDR >> 14) & 1) == 1)
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	0b9b      	lsrs	r3, r3, #14
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d010      	beq.n	8000380 <receive_data+0xf0>
			{
				data[i] |= (1 << j);
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4413      	add	r3, r2
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	b25a      	sxtb	r2, r3
 8000368:	2101      	movs	r1, #1
 800036a:	69bb      	ldr	r3, [r7, #24]
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	b25b      	sxtb	r3, r3
 8000372:	4313      	orrs	r3, r2
 8000374:	b259      	sxtb	r1, r3
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	4413      	add	r3, r2
 800037c:	b2ca      	uxtb	r2, r1
 800037e:	701a      	strb	r2, [r3, #0]
		for (int j = 7; j >= 0; j--)
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	3b01      	subs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
 8000386:	69bb      	ldr	r3, [r7, #24]
 8000388:	2b00      	cmp	r3, #0
 800038a:	dacb      	bge.n	8000324 <receive_data+0x94>
	for (int i = 0; i < 5; i++)
 800038c:	69fb      	ldr	r3, [r7, #28]
 800038e:	3301      	adds	r3, #1
 8000390:	61fb      	str	r3, [r7, #28]
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	2b04      	cmp	r3, #4
 8000396:	ddc2      	ble.n	800031e <receive_data+0x8e>
			}
		}
	}
	delay_us(50);
 8000398:	2032      	movs	r0, #50	@ 0x32
 800039a:	f000 fba7 	bl	8000aec <delay_us>
}
 800039e:	bf00      	nop
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40020800 	.word	0x40020800
 80003ac:	40020814 	.word	0x40020814
 80003b0:	40020810 	.word	0x40020810

080003b4 <DHT11_Init>:
	VCC: 3V
	DATA: PC14
	GND: GND
 */
void DHT11_Init()
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
	delay_ms(2000);
 80003ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003be:	f000 fb77 	bl	8000ab0 <delay_ms>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <DHT11_Init+0x60>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a12      	ldr	r2, [pc, #72]	@ (8000414 <DHT11_Init+0x60>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003d2:	4b10      	ldr	r3, [pc, #64]	@ (8000414 <DHT11_Init+0x60>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	f003 0304 	and.w	r3, r3, #4
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <DHT11_Init+0x64>)
 80003e0:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <DHT11_Init+0x68>)
 80003e4:	60bb      	str	r3, [r7, #8]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	601a      	str	r2, [r3, #0]

	/* pull up voltage to work at free status */
	*GPIOC_ODR |= 1 << 14;
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	601a      	str	r2, [r3, #0]
}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40023800 	.word	0x40023800
 8000418:	40020800 	.word	0x40020800
 800041c:	40020814 	.word	0x40020814

08000420 <LCD_gotoxy>:
/*
	1 <= row <= 2
	1 <= column <= 40
 */
void LCD_gotoxy(uint8_t row, uint8_t column)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	460a      	mov	r2, r1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	4613      	mov	r3, r2
 800042e:	71bb      	strb	r3, [r7, #6]
	if (row == 1)
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d10a      	bne.n	800044c <LCD_gotoxy+0x2c>
	{
		set_cursor_position((column - 1) * row);
 8000436:	79bb      	ldrb	r3, [r7, #6]
 8000438:	3b01      	subs	r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	79fa      	ldrb	r2, [r7, #7]
 800043e:	fb12 f303 	smulbb	r3, r2, r3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f827 	bl	8000498 <set_cursor_position>
		LCD_gotoxy(2, 1);
		LCD_print_String("BACK TO 1ST LINE");
		delay_ms(3000);
		LCD_ClrScr();
	}
}
 800044a:	e01d      	b.n	8000488 <LCD_gotoxy+0x68>
	else if (row == 2)
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2b02      	cmp	r3, #2
 8000450:	d106      	bne.n	8000460 <LCD_gotoxy+0x40>
		set_cursor_position(column + 63);
 8000452:	79bb      	ldrb	r3, [r7, #6]
 8000454:	333f      	adds	r3, #63	@ 0x3f
 8000456:	b2db      	uxtb	r3, r3
 8000458:	4618      	mov	r0, r3
 800045a:	f000 f81d 	bl	8000498 <set_cursor_position>
}
 800045e:	e013      	b.n	8000488 <LCD_gotoxy+0x68>
		LCD_gotoxy(1, 1);
 8000460:	2101      	movs	r1, #1
 8000462:	2001      	movs	r0, #1
 8000464:	f7ff ffdc 	bl	8000420 <LCD_gotoxy>
		LCD_print_String("INVALID NUMBER");
 8000468:	4809      	ldr	r0, [pc, #36]	@ (8000490 <LCD_gotoxy+0x70>)
 800046a:	f000 f87f 	bl	800056c <LCD_print_String>
		LCD_gotoxy(2, 1);
 800046e:	2101      	movs	r1, #1
 8000470:	2002      	movs	r0, #2
 8000472:	f7ff ffd5 	bl	8000420 <LCD_gotoxy>
		LCD_print_String("BACK TO 1ST LINE");
 8000476:	4807      	ldr	r0, [pc, #28]	@ (8000494 <LCD_gotoxy+0x74>)
 8000478:	f000 f878 	bl	800056c <LCD_print_String>
		delay_ms(3000);
 800047c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000480:	f000 fb16 	bl	8000ab0 <delay_ms>
		LCD_ClrScr();
 8000484:	f000 f8be 	bl	8000604 <LCD_ClrScr>
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	08001588 	.word	0x08001588
 8000494:	08001598 	.word	0x08001598

08000498 <set_cursor_position>:

void set_cursor_position(uint8_t cmd)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	LCD_WriteCMD(cmd | POS);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f8d8 	bl	8000660 <LCD_WriteCMD>
	delay_us(40);
 80004b0:	2028      	movs	r0, #40	@ 0x28
 80004b2:	f000 fb1b 	bl	8000aec <delay_us>
}
 80004b6:	bf00      	nop
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <LCD_print_String_and_Scroll>:

void LCD_print_String_and_Scroll(char* str, ...)
{
 80004be:	b40f      	push	{r0, r1, r2, r3}
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b0a6      	sub	sp, #152	@ 0x98
 80004c4:	af00      	add	r7, sp, #0
	va_list list;
	va_start(list, str);
 80004c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80004ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char print_buf[128] = { 0 };
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fbcd 	bl	8000c74 <memset>
	vsprintf(print_buf, str, list);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80004e0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fbbb 	bl	8000c60 <vsiprintf>
	int size = strlen(print_buf);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fe77 	bl	80001e0 <strlen>
 80004f2:	4603      	mov	r3, r0
 80004f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	for (int i = 0; i < size; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80004fe:	e00c      	b.n	800051a <LCD_print_String_and_Scroll+0x5c>
	{
		LCD_print_Char(print_buf[i]);
 8000500:	1d3a      	adds	r2, r7, #4
 8000502:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000506:	4413      	add	r3, r2
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f86a 	bl	80005e4 <LCD_print_Char>
	for (int i = 0; i < size; i++)
 8000510:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000514:	3301      	adds	r3, #1
 8000516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800051a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800051e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000522:	429a      	cmp	r2, r3
 8000524:	dbec      	blt.n	8000500 <LCD_print_String_and_Scroll+0x42>
	}
	va_end(list);
	int scroll_time = size - 16 + 3;
 8000526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800052a:	3b0d      	subs	r3, #13
 800052c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for (int i = 0; i < scroll_time; i++)
 8000530:	2300      	movs	r3, #0
 8000532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000536:	e00b      	b.n	8000550 <LCD_print_String_and_Scroll+0x92>
	{
		delay_ms(500);
 8000538:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053c:	f000 fab8 	bl	8000ab0 <delay_ms>
		LCD_WriteCMD(0x18);
 8000540:	2018      	movs	r0, #24
 8000542:	f000 f88d 	bl	8000660 <LCD_WriteCMD>
	for (int i = 0; i < scroll_time; i++)
 8000546:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800054a:	3301      	adds	r3, #1
 800054c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000550:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000558:	429a      	cmp	r2, r3
 800055a:	dbed      	blt.n	8000538 <LCD_print_String_and_Scroll+0x7a>
	}
}
 800055c:	bf00      	nop
 800055e:	bf00      	nop
 8000560:	3798      	adds	r7, #152	@ 0x98
 8000562:	46bd      	mov	sp, r7
 8000564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000568:	b004      	add	sp, #16
 800056a:	4770      	bx	lr

0800056c <LCD_print_String>:

void LCD_print_String(char* str, ...)
{
 800056c:	b40f      	push	{r0, r1, r2, r3}
 800056e:	b580      	push	{r7, lr}
 8000570:	b0a4      	sub	sp, #144	@ 0x90
 8000572:	af00      	add	r7, sp, #0
	va_list list;
	va_start(list, str);
 8000574:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	char print_buf[128] = { 0 };
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2280      	movs	r2, #128	@ 0x80
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fb76 	bl	8000c74 <memset>
	vsprintf(print_buf, str, list);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800058e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8000592:	4618      	mov	r0, r3
 8000594:	f000 fb64 	bl	8000c60 <vsiprintf>
	int size = strlen(print_buf);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe20 	bl	80001e0 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	for (int i = 0; i < size; i++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80005ac:	e00c      	b.n	80005c8 <LCD_print_String+0x5c>
	{
		LCD_print_Char(print_buf[i]);
 80005ae:	1d3a      	adds	r2, r7, #4
 80005b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f813 	bl	80005e4 <LCD_print_Char>
	for (int i = 0; i < size; i++)
 80005be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80005c2:	3301      	adds	r3, #1
 80005c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80005c8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80005cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <LCD_print_String+0x42>
	}
	va_end(list);
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3790      	adds	r7, #144	@ 0x90
 80005da:	46bd      	mov	sp, r7
 80005dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005e0:	b004      	add	sp, #16
 80005e2:	4770      	bx	lr

080005e4 <LCD_print_Char>:

void LCD_print_Char(uint8_t ch)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	LCD_WriteDATA(ch);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f817 	bl	8000624 <LCD_WriteDATA>
	delay_us(40);
 80005f6:	2028      	movs	r0, #40	@ 0x28
 80005f8:	f000 fa78 	bl	8000aec <delay_us>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <LCD_ClrScr>:

void LCD_ClrScr()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	/* clear display */
	LCD_WriteCMD(0x01);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 f829 	bl	8000660 <LCD_WriteCMD>
	delay_ms(2);
 800060e:	2002      	movs	r0, #2
 8000610:	f000 fa4e 	bl	8000ab0 <delay_ms>

	/* return home */
	LCD_WriteCMD(0x02);
 8000614:	2002      	movs	r0, #2
 8000616:	f000 f823 	bl	8000660 <LCD_WriteCMD>
	delay_ms(2);
 800061a:	2002      	movs	r0, #2
 800061c:	f000 fa48 	bl	8000ab0 <delay_ms>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}

08000624 <LCD_WriteDATA>:

void LCD_WriteDATA(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	uint8_t high_bits = data & 0xF0;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f023 030f 	bic.w	r3, r3, #15
 8000634:	73fb      	strb	r3, [r7, #15]
	uint8_t low_bits = data << 4;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	73bb      	strb	r3, [r7, #14]
	write_4bits(high_bits | DATA);
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f823 	bl	8000690 <write_4bits>
	write_4bits(low_bits | DATA);
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f81c 	bl	8000690 <write_4bits>
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <LCD_WriteCMD>:

void LCD_WriteCMD(uint8_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	uint8_t high_bits = data & 0xF0;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f023 030f 	bic.w	r3, r3, #15
 8000670:	73fb      	strb	r3, [r7, #15]
	uint8_t low_bits = data << 4;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	011b      	lsls	r3, r3, #4
 8000676:	73bb      	strb	r3, [r7, #14]
	write_4bits(high_bits | CMD);
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	4618      	mov	r0, r3
 800067c:	f000 f808 	bl	8000690 <write_4bits>
	write_4bits(low_bits | CMD);
 8000680:	7bbb      	ldrb	r3, [r7, #14]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f804 	bl	8000690 <write_4bits>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <write_4bits>:

void write_4bits(uint8_t data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	/* make sure EN bit is low before send new data */
	master_transmit(data & ~ENABLE);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f023 0304 	bic.w	r3, r3, #4
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f81c 	bl	80006e0 <master_transmit>
	delay_us(25);
 80006a8:	2019      	movs	r0, #25
 80006aa:	f000 fa1f 	bl	8000aec <delay_us>

	/* send data with EN = 1 and EN = 0*/
	master_transmit(data | ENABLE);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f812 	bl	80006e0 <master_transmit>
	delay_us(25);
 80006bc:	2019      	movs	r0, #25
 80006be:	f000 fa15 	bl	8000aec <delay_us>
	master_transmit(data & ~ENABLE);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f023 0304 	bic.w	r3, r3, #4
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f808 	bl	80006e0 <master_transmit>
	delay_us(25);
 80006d0:	2019      	movs	r0, #25
 80006d2:	f000 fa0b 	bl	8000aec <delay_us>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <master_transmit>:

void master_transmit(uint8_t data)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	@ 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80006ea:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <master_transmit+0xd0>)
 80006ec:	61fb      	str	r3, [r7, #28]
	uint16_t* I2C_SR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x14);
 80006ee:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <master_transmit+0xd4>)
 80006f0:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_SR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x18);
 80006f2:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <master_transmit+0xd8>)
 80006f4:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_DR  = (uint16_t*) (I2C1_BASE_ADDR + 0x10);
 80006f6:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <master_transmit+0xdc>)
 80006f8:	613b      	str	r3, [r7, #16]

	/* wait until bus is free */
	while (((*I2C_SR2 >> 1) & 1) == 1);
 80006fa:	bf00      	nop
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	085b      	lsrs	r3, r3, #1
 8000702:	b29b      	uxth	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f7      	bne.n	80006fc <master_transmit+0x1c>

	/* generate START condition */
	*I2C_CR1 |= 1 << 8;
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	b29a      	uxth	r2, r3
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	801a      	strh	r2, [r3, #0]

	/* wait for START condition is generated */
	while ((*I2C_SR1 & 1) == 0);
 800071a:	bf00      	nop
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0f9      	beq.n	800071c <master_transmit+0x3c>

	/* send slave address */
	volatile uint16_t tmp = *I2C_SR1;
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	81fb      	strh	r3, [r7, #14]
	*I2C_DR = (0x27 << 1) | WRITE;
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	224e      	movs	r2, #78	@ 0x4e
 8000732:	801a      	strh	r2, [r3, #0]

	/* wait until the slave address is sent and slave response ACK */
	while (((*I2C_SR1 >> 1) & 1) == 0);
 8000734:	bf00      	nop
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	b29b      	uxth	r3, r3
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f7      	beq.n	8000736 <master_transmit+0x56>
	tmp = *I2C_SR1;
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	81fb      	strh	r3, [r7, #14]
	tmp = *I2C_SR2;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	81fb      	strh	r3, [r7, #14]

	/* wait until the Data register is empty */
	while (((*I2C_SR1 >> 7) & 1) == 0);
 8000752:	bf00      	nop
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	09db      	lsrs	r3, r3, #7
 800075a:	b29b      	uxth	r3, r3
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f7      	beq.n	8000754 <master_transmit+0x74>

	/* send data or instruction */
	*I2C_DR = data | BACKLIGHT;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	b2db      	uxtb	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	801a      	strh	r2, [r3, #0]

	/* wait until the Data register is empty and transfer finished */
	while ((((*I2C_SR1 >> 7) & 1) == 0) && (((*I2C_SR1 >> 2) & 1) == 0));
 8000772:	bf00      	nop
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	09db      	lsrs	r3, r3, #7
 800077a:	b29b      	uxth	r3, r3
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b00      	cmp	r3, #0
 8000782:	d107      	bne.n	8000794 <master_transmit+0xb4>
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	089b      	lsrs	r3, r3, #2
 800078a:	b29b      	uxth	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0ef      	beq.n	8000774 <master_transmit+0x94>

	/* generate STOP condition */
	*I2C_CR1 |= 1 << 9;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800079c:	b29a      	uxth	r2, r3
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	801a      	strh	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	3724      	adds	r7, #36	@ 0x24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40005400 	.word	0x40005400
 80007b4:	40005414 	.word	0x40005414
 80007b8:	40005418 	.word	0x40005418
 80007bc:	40005410 	.word	0x40005410

080007c0 <LCD_Init>:

void LCD_Init()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* after power on, wait for more than 40ms after VCC rises to 2.7 V */
	delay_ms(50);
 80007c4:	2032      	movs	r0, #50	@ 0x32
 80007c6:	f000 f973 	bl	8000ab0 <delay_ms>

	/* function set */
	write_4bits(0x03 << 4);
 80007ca:	2030      	movs	r0, #48	@ 0x30
 80007cc:	f7ff ff60 	bl	8000690 <write_4bits>
	delay_ms(5);
 80007d0:	2005      	movs	r0, #5
 80007d2:	f000 f96d 	bl	8000ab0 <delay_ms>
	write_4bits(0x03 << 4);
 80007d6:	2030      	movs	r0, #48	@ 0x30
 80007d8:	f7ff ff5a 	bl	8000690 <write_4bits>
	delay_us(110);
 80007dc:	206e      	movs	r0, #110	@ 0x6e
 80007de:	f000 f985 	bl	8000aec <delay_us>
	write_4bits(0x03 << 4);
 80007e2:	2030      	movs	r0, #48	@ 0x30
 80007e4:	f7ff ff54 	bl	8000690 <write_4bits>
	delay_us(110);
 80007e8:	206e      	movs	r0, #110	@ 0x6e
 80007ea:	f000 f97f 	bl	8000aec <delay_us>
	write_4bits(0x02 << 4);
 80007ee:	2020      	movs	r0, #32
 80007f0:	f7ff ff4e 	bl	8000690 <write_4bits>
	delay_us(110);
 80007f4:	206e      	movs	r0, #110	@ 0x6e
 80007f6:	f000 f979 	bl	8000aec <delay_us>

	/* select 4-bit operation and select 2 line display */
	LCD_WriteCMD(0x28);
 80007fa:	2028      	movs	r0, #40	@ 0x28
 80007fc:	f7ff ff30 	bl	8000660 <LCD_WriteCMD>
	delay_us(40);
 8000800:	2028      	movs	r0, #40	@ 0x28
 8000802:	f000 f973 	bl	8000aec <delay_us>

	/* Display ON & display cursor */
	LCD_WriteCMD(0x0C);
 8000806:	200c      	movs	r0, #12
 8000808:	f7ff ff2a 	bl	8000660 <LCD_WriteCMD>
	delay_us(40);
 800080c:	2028      	movs	r0, #40	@ 0x28
 800080e:	f000 f96d 	bl	8000aec <delay_us>

	/* clear display */
	LCD_WriteCMD(0x01);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff24 	bl	8000660 <LCD_WriteCMD>
	delay_ms(2);
 8000818:	2002      	movs	r0, #2
 800081a:	f000 f949 	bl	8000ab0 <delay_ms>

	/* entry mode set */
	LCD_WriteCMD(0x06);
 800081e:	2006      	movs	r0, #6
 8000820:	f7ff ff1e 	bl	8000660 <LCD_WriteCMD>
	delay_us(40);
 8000824:	2028      	movs	r0, #40	@ 0x28
 8000826:	f000 f961 	bl	8000aec <delay_us>

	/* display shift to the right */
	LCD_WriteCMD(0x1C);
 800082a:	201c      	movs	r0, #28
 800082c:	f7ff ff18 	bl	8000660 <LCD_WriteCMD>
	delay_us(40);
 8000830:	2028      	movs	r0, #40	@ 0x28
 8000832:	f000 f95b 	bl	8000aec <delay_us>

	/* return home */
	LCD_WriteCMD(0x02);
 8000836:	2002      	movs	r0, #2
 8000838:	f7ff ff12 	bl	8000660 <LCD_WriteCMD>
	delay_ms(2);
 800083c:	2002      	movs	r0, #2
 800083e:	f000 f937 	bl	8000ab0 <delay_ms>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <I2C1_Init>:
	GND: GND
	PB8: SCL
	PB9: SDA
 */
void I2C1_Init()
{
 8000848:	b480      	push	{r7}
 800084a:	b08b      	sub	sp, #44	@ 0x2c
 800084c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b30      	ldr	r3, [pc, #192]	@ (8000914 <I2C1_Init+0xcc>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a2f      	ldr	r2, [pc, #188]	@ (8000914 <I2C1_Init+0xcc>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b2d      	ldr	r3, [pc, #180]	@ (8000914 <I2C1_Init+0xcc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <I2C1_Init+0xd0>)
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRH = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 800086e:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <I2C1_Init+0xd4>)
 8000870:	623b      	str	r3, [r7, #32]
	uint32_t* GPIOB_OTYPER = (uint32_t*) (GPIOB_BASE_ADDR + 0x04);
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <I2C1_Init+0xd8>)
 8000874:	61fb      	str	r3, [r7, #28]

	/* Configure PB8 & PB9 at AF */
	*GPIOB_MODER &= ~(0xf << (8 * 2));
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800087e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000880:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << (8 * 2)) | (0b10 << (9 * 2));
 8000882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f443 2220 	orr.w	r2, r3, #655360	@ 0xa0000
 800088a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088c:	601a      	str	r2, [r3, #0]

	*GPIOB_OTYPER |= (1 << 8) | (1 << 9);
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	601a      	str	r2, [r3, #0]

	/* Select AF04 */
	*GPIOB_AFRH &= ~(0xff << 0);
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= (4 << 0) | (4 << 4);
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f043 0244 	orr.w	r2, r3, #68	@ 0x44
 80008ae:	6a3b      	ldr	r3, [r7, #32]
 80008b0:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <I2C1_Init+0xcc>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <I2C1_Init+0xcc>)
 80008bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <I2C1_Init+0xcc>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <I2C1_Init+0xdc>)
 80008d0:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_CR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x04);
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <I2C1_Init+0xe0>)
 80008d4:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_CCR = (uint16_t*) (I2C1_BASE_ADDR + 0x1C);
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <I2C1_Init+0xe4>)
 80008d8:	613b      	str	r3, [r7, #16]
	uint16_t* I2C_TRISE = (uint16_t*) (I2C1_BASE_ADDR + 0x20);
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <I2C1_Init+0xe8>)
 80008dc:	60fb      	str	r3, [r7, #12]

	/* configure I2C clock frequency = 16MHz */
	*I2C_CR2 |= 16 << 0;
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	801a      	strh	r2, [r3, #0]

	/* configure SCL to generate 100kHz */
	*I2C_CCR = 80;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	2250      	movs	r2, #80	@ 0x50
 80008f0:	801a      	strh	r2, [r3, #0]

	/* Set rise time */
	*I2C_TRISE = 16 + 1;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2211      	movs	r2, #17
 80008f6:	801a      	strh	r2, [r3, #0]

	/* enable I2C */
	*I2C_CR1 |= 1 << 0;
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	b29a      	uxth	r2, r3
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	801a      	strh	r2, [r3, #0]
}
 8000906:	bf00      	nop
 8000908:	372c      	adds	r7, #44	@ 0x2c
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40020424 	.word	0x40020424
 8000920:	40020404 	.word	0x40020404
 8000924:	40005400 	.word	0x40005400
 8000928:	40005404 	.word	0x40005404
 800092c:	4000541c 	.word	0x4000541c
 8000930:	40005420 	.word	0x40005420

08000934 <main>:

uint8_t data[5] = { 0 };
char data_correct = 0;

int main()
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	af04      	add	r7, sp, #16
	TIM2_Init();
 800093a:	f000 f8f1 	bl	8000b20 <TIM2_Init>
	DHT11_Init();
 800093e:	f7ff fd39 	bl	80003b4 <DHT11_Init>
	I2C1_Init();
 8000942:	f7ff ff81 	bl	8000848 <I2C1_Init>
	LCD_Init();
 8000946:	f7ff ff3b 	bl	80007c0 <LCD_Init>
	LCD_ClrScr();
 800094a:	f7ff fe5b 	bl	8000604 <LCD_ClrScr>
	LCD_gotoxy(2, 1);
 800094e:	2101      	movs	r1, #1
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fd65 	bl	8000420 <LCD_gotoxy>
	LCD_print_String("%c'm Slee%c%c %c%c%c", 0xAA, 0xF0, 0xF9, 0xA5, 0x5E, 0xA5);
 8000956:	23a5      	movs	r3, #165	@ 0xa5
 8000958:	9302      	str	r3, [sp, #8]
 800095a:	235e      	movs	r3, #94	@ 0x5e
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	23a5      	movs	r3, #165	@ 0xa5
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	23f9      	movs	r3, #249	@ 0xf9
 8000964:	22f0      	movs	r2, #240	@ 0xf0
 8000966:	21aa      	movs	r1, #170	@ 0xaa
 8000968:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <main+0x80>)
 800096a:	f7ff fdff 	bl	800056c <LCD_print_String>

	while (1)
	{
		receive_data(data);
 800096e:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <main+0x84>)
 8000970:	f7ff fc8e 	bl	8000290 <receive_data>
//		if (check_sum(data) == 1)
		{
//			LCD_ClrScr();
			delay_ms(200);
 8000974:	20c8      	movs	r0, #200	@ 0xc8
 8000976:	f000 f89b 	bl	8000ab0 <delay_ms>
			LCD_gotoxy(1, 2);
 800097a:	2102      	movs	r1, #2
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fd4f 	bl	8000420 <LCD_gotoxy>
			LCD_print_String_and_Scroll("HUMI: %d.%d %c, TEMP: %d.%d%cC", data[0], data[1], 0x25, data[2], data[3], 0xDF);
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <main+0x84>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <main+0x84>)
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	461c      	mov	r4, r3
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <main+0x84>)
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	461a      	mov	r2, r3
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <main+0x84>)
 8000996:	78db      	ldrb	r3, [r3, #3]
 8000998:	4619      	mov	r1, r3
 800099a:	23df      	movs	r3, #223	@ 0xdf
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	9101      	str	r1, [sp, #4]
 80009a0:	9200      	str	r2, [sp, #0]
 80009a2:	2325      	movs	r3, #37	@ 0x25
 80009a4:	4622      	mov	r2, r4
 80009a6:	4601      	mov	r1, r0
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <main+0x88>)
 80009aa:	f7ff fd88 	bl	80004be <LCD_print_String_and_Scroll>
		receive_data(data);
 80009ae:	bf00      	nop
 80009b0:	e7dd      	b.n	800096e <main+0x3a>
 80009b2:	bf00      	nop
 80009b4:	080015ac 	.word	0x080015ac
 80009b8:	20000070 	.word	0x20000070
 80009bc:	080015c4 	.word	0x080015c4

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a16:	f000 f8f9 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f000 f918 	bl	8000c84 <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20020000 	.word	0x20020000
 8000a80:	00000400 	.word	0x00000400
 8000a84:	20000078 	.word	0x20000078
 8000a88:	200001c8 	.word	0x200001c8

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	@ (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <delay_ms+0x38>)
 8000aba:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ac2:	fb02 f303 	mul.w	r3, r2, r3
 8000ac6:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 8000ace:	bf00      	nop
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d8fa      	bhi.n	8000ad0 <delay_ms+0x20>
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40000024 	.word	0x40000024

08000aec <delay_us>:

void delay_us(uint16_t us)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	80fb      	strh	r3, [r7, #6]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <delay_us+0x30>)
 8000af8:	60fb      	str	r3, [r7, #12]
	*TIM2_CNT = 0;
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	801a      	strh	r2, [r3, #0]
	while (*TIM2_CNT < us);
 8000b00:	bf00      	nop
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	88fa      	ldrh	r2, [r7, #6]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d8fa      	bhi.n	8000b02 <delay_us+0x16>
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40000024 	.word	0x40000024

08000b20 <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <TIM2_Init+0x84>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba4 <TIM2_Init+0x84>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <TIM2_Init+0x84>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 8000b42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b46:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <TIM2_Init+0x88>)
 8000b4a:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <TIM2_Init+0x8c>)
 8000b4e:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 8000b50:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <TIM2_Init+0x90>)
 8000b52:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_EGR = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <TIM2_Init+0x94>)
 8000b56:	607b      	str	r3, [r7, #4]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	f023 0310 	bic.w	r3, r3, #16
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	220f      	movs	r2, #15
 8000b6a:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b72:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]

	*TIM2_EGR |= 1 << 0;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	b29a      	uxth	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	801a      	strh	r2, [r3, #0]

	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	801a      	strh	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40000028 	.word	0x40000028
 8000bac:	4000002c 	.word	0x4000002c
 8000bb0:	40000024 	.word	0x40000024
 8000bb4:	40000014 	.word	0x40000014

08000bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbc:	f7ff ff66 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc2:	490d      	ldr	r1, [pc, #52]	@ (8000bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000be6:	f000 f853 	bl	8000c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bea:	f7ff fea3 	bl	8000934 <main>
  bx  lr    
 8000bee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000bfc:	08001628 	.word	0x08001628
  ldr r2, =_sbss
 8000c00:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000c04:	200001c8 	.word	0x200001c8

08000c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC_IRQHandler>
	...

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	2000007c 	.word	0x2000007c

08000c34 <_vsiprintf_r>:
 8000c34:	b510      	push	{r4, lr}
 8000c36:	b09a      	sub	sp, #104	@ 0x68
 8000c38:	2400      	movs	r4, #0
 8000c3a:	9100      	str	r1, [sp, #0]
 8000c3c:	9104      	str	r1, [sp, #16]
 8000c3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000c42:	9105      	str	r1, [sp, #20]
 8000c44:	9102      	str	r1, [sp, #8]
 8000c46:	4905      	ldr	r1, [pc, #20]	@ (8000c5c <_vsiprintf_r+0x28>)
 8000c48:	9103      	str	r1, [sp, #12]
 8000c4a:	4669      	mov	r1, sp
 8000c4c:	9419      	str	r4, [sp, #100]	@ 0x64
 8000c4e:	f000 f999 	bl	8000f84 <_svfiprintf_r>
 8000c52:	9b00      	ldr	r3, [sp, #0]
 8000c54:	701c      	strb	r4, [r3, #0]
 8000c56:	b01a      	add	sp, #104	@ 0x68
 8000c58:	bd10      	pop	{r4, pc}
 8000c5a:	bf00      	nop
 8000c5c:	ffff0208 	.word	0xffff0208

08000c60 <vsiprintf>:
 8000c60:	4613      	mov	r3, r2
 8000c62:	460a      	mov	r2, r1
 8000c64:	4601      	mov	r1, r0
 8000c66:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <vsiprintf+0x10>)
 8000c68:	6800      	ldr	r0, [r0, #0]
 8000c6a:	f7ff bfe3 	b.w	8000c34 <_vsiprintf_r>
 8000c6e:	bf00      	nop
 8000c70:	20000004 	.word	0x20000004

08000c74 <memset>:
 8000c74:	4402      	add	r2, r0
 8000c76:	4603      	mov	r3, r0
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d100      	bne.n	8000c7e <memset+0xa>
 8000c7c:	4770      	bx	lr
 8000c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8000c82:	e7f9      	b.n	8000c78 <memset+0x4>

08000c84 <__errno>:
 8000c84:	4b01      	ldr	r3, [pc, #4]	@ (8000c8c <__errno+0x8>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000004 	.word	0x20000004

08000c90 <__libc_init_array>:
 8000c90:	b570      	push	{r4, r5, r6, lr}
 8000c92:	4d0d      	ldr	r5, [pc, #52]	@ (8000cc8 <__libc_init_array+0x38>)
 8000c94:	4c0d      	ldr	r4, [pc, #52]	@ (8000ccc <__libc_init_array+0x3c>)
 8000c96:	1b64      	subs	r4, r4, r5
 8000c98:	10a4      	asrs	r4, r4, #2
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	42a6      	cmp	r6, r4
 8000c9e:	d109      	bne.n	8000cb4 <__libc_init_array+0x24>
 8000ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8000cd0 <__libc_init_array+0x40>)
 8000ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8000cd4 <__libc_init_array+0x44>)
 8000ca4:	f000 fc64 	bl	8001570 <_init>
 8000ca8:	1b64      	subs	r4, r4, r5
 8000caa:	10a4      	asrs	r4, r4, #2
 8000cac:	2600      	movs	r6, #0
 8000cae:	42a6      	cmp	r6, r4
 8000cb0:	d105      	bne.n	8000cbe <__libc_init_array+0x2e>
 8000cb2:	bd70      	pop	{r4, r5, r6, pc}
 8000cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb8:	4798      	blx	r3
 8000cba:	3601      	adds	r6, #1
 8000cbc:	e7ee      	b.n	8000c9c <__libc_init_array+0xc>
 8000cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cc2:	4798      	blx	r3
 8000cc4:	3601      	adds	r6, #1
 8000cc6:	e7f2      	b.n	8000cae <__libc_init_array+0x1e>
 8000cc8:	08001620 	.word	0x08001620
 8000ccc:	08001620 	.word	0x08001620
 8000cd0:	08001620 	.word	0x08001620
 8000cd4:	08001624 	.word	0x08001624

08000cd8 <__retarget_lock_acquire_recursive>:
 8000cd8:	4770      	bx	lr

08000cda <__retarget_lock_release_recursive>:
 8000cda:	4770      	bx	lr

08000cdc <_free_r>:
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4605      	mov	r5, r0
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	d041      	beq.n	8000d68 <_free_r+0x8c>
 8000ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ce8:	1f0c      	subs	r4, r1, #4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bfb8      	it	lt
 8000cee:	18e4      	addlt	r4, r4, r3
 8000cf0:	f000 f8e0 	bl	8000eb4 <__malloc_lock>
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d6c <_free_r+0x90>)
 8000cf6:	6813      	ldr	r3, [r2, #0]
 8000cf8:	b933      	cbnz	r3, 8000d08 <_free_r+0x2c>
 8000cfa:	6063      	str	r3, [r4, #4]
 8000cfc:	6014      	str	r4, [r2, #0]
 8000cfe:	4628      	mov	r0, r5
 8000d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d04:	f000 b8dc 	b.w	8000ec0 <__malloc_unlock>
 8000d08:	42a3      	cmp	r3, r4
 8000d0a:	d908      	bls.n	8000d1e <_free_r+0x42>
 8000d0c:	6820      	ldr	r0, [r4, #0]
 8000d0e:	1821      	adds	r1, r4, r0
 8000d10:	428b      	cmp	r3, r1
 8000d12:	bf01      	itttt	eq
 8000d14:	6819      	ldreq	r1, [r3, #0]
 8000d16:	685b      	ldreq	r3, [r3, #4]
 8000d18:	1809      	addeq	r1, r1, r0
 8000d1a:	6021      	streq	r1, [r4, #0]
 8000d1c:	e7ed      	b.n	8000cfa <_free_r+0x1e>
 8000d1e:	461a      	mov	r2, r3
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	b10b      	cbz	r3, 8000d28 <_free_r+0x4c>
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d9fa      	bls.n	8000d1e <_free_r+0x42>
 8000d28:	6811      	ldr	r1, [r2, #0]
 8000d2a:	1850      	adds	r0, r2, r1
 8000d2c:	42a0      	cmp	r0, r4
 8000d2e:	d10b      	bne.n	8000d48 <_free_r+0x6c>
 8000d30:	6820      	ldr	r0, [r4, #0]
 8000d32:	4401      	add	r1, r0
 8000d34:	1850      	adds	r0, r2, r1
 8000d36:	4283      	cmp	r3, r0
 8000d38:	6011      	str	r1, [r2, #0]
 8000d3a:	d1e0      	bne.n	8000cfe <_free_r+0x22>
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	6053      	str	r3, [r2, #4]
 8000d42:	4408      	add	r0, r1
 8000d44:	6010      	str	r0, [r2, #0]
 8000d46:	e7da      	b.n	8000cfe <_free_r+0x22>
 8000d48:	d902      	bls.n	8000d50 <_free_r+0x74>
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	602b      	str	r3, [r5, #0]
 8000d4e:	e7d6      	b.n	8000cfe <_free_r+0x22>
 8000d50:	6820      	ldr	r0, [r4, #0]
 8000d52:	1821      	adds	r1, r4, r0
 8000d54:	428b      	cmp	r3, r1
 8000d56:	bf04      	itt	eq
 8000d58:	6819      	ldreq	r1, [r3, #0]
 8000d5a:	685b      	ldreq	r3, [r3, #4]
 8000d5c:	6063      	str	r3, [r4, #4]
 8000d5e:	bf04      	itt	eq
 8000d60:	1809      	addeq	r1, r1, r0
 8000d62:	6021      	streq	r1, [r4, #0]
 8000d64:	6054      	str	r4, [r2, #4]
 8000d66:	e7ca      	b.n	8000cfe <_free_r+0x22>
 8000d68:	bd38      	pop	{r3, r4, r5, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001c4 	.word	0x200001c4

08000d70 <sbrk_aligned>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	4e0f      	ldr	r6, [pc, #60]	@ (8000db0 <sbrk_aligned+0x40>)
 8000d74:	460c      	mov	r4, r1
 8000d76:	6831      	ldr	r1, [r6, #0]
 8000d78:	4605      	mov	r5, r0
 8000d7a:	b911      	cbnz	r1, 8000d82 <sbrk_aligned+0x12>
 8000d7c:	f000 fba4 	bl	80014c8 <_sbrk_r>
 8000d80:	6030      	str	r0, [r6, #0]
 8000d82:	4621      	mov	r1, r4
 8000d84:	4628      	mov	r0, r5
 8000d86:	f000 fb9f 	bl	80014c8 <_sbrk_r>
 8000d8a:	1c43      	adds	r3, r0, #1
 8000d8c:	d103      	bne.n	8000d96 <sbrk_aligned+0x26>
 8000d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8000d92:	4620      	mov	r0, r4
 8000d94:	bd70      	pop	{r4, r5, r6, pc}
 8000d96:	1cc4      	adds	r4, r0, #3
 8000d98:	f024 0403 	bic.w	r4, r4, #3
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d0f8      	beq.n	8000d92 <sbrk_aligned+0x22>
 8000da0:	1a21      	subs	r1, r4, r0
 8000da2:	4628      	mov	r0, r5
 8000da4:	f000 fb90 	bl	80014c8 <_sbrk_r>
 8000da8:	3001      	adds	r0, #1
 8000daa:	d1f2      	bne.n	8000d92 <sbrk_aligned+0x22>
 8000dac:	e7ef      	b.n	8000d8e <sbrk_aligned+0x1e>
 8000dae:	bf00      	nop
 8000db0:	200001c0 	.word	0x200001c0

08000db4 <_malloc_r>:
 8000db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000db8:	1ccd      	adds	r5, r1, #3
 8000dba:	f025 0503 	bic.w	r5, r5, #3
 8000dbe:	3508      	adds	r5, #8
 8000dc0:	2d0c      	cmp	r5, #12
 8000dc2:	bf38      	it	cc
 8000dc4:	250c      	movcc	r5, #12
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	4606      	mov	r6, r0
 8000dca:	db01      	blt.n	8000dd0 <_malloc_r+0x1c>
 8000dcc:	42a9      	cmp	r1, r5
 8000dce:	d904      	bls.n	8000dda <_malloc_r+0x26>
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	6033      	str	r3, [r6, #0]
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000eb0 <_malloc_r+0xfc>
 8000dde:	f000 f869 	bl	8000eb4 <__malloc_lock>
 8000de2:	f8d8 3000 	ldr.w	r3, [r8]
 8000de6:	461c      	mov	r4, r3
 8000de8:	bb44      	cbnz	r4, 8000e3c <_malloc_r+0x88>
 8000dea:	4629      	mov	r1, r5
 8000dec:	4630      	mov	r0, r6
 8000dee:	f7ff ffbf 	bl	8000d70 <sbrk_aligned>
 8000df2:	1c43      	adds	r3, r0, #1
 8000df4:	4604      	mov	r4, r0
 8000df6:	d158      	bne.n	8000eaa <_malloc_r+0xf6>
 8000df8:	f8d8 4000 	ldr.w	r4, [r8]
 8000dfc:	4627      	mov	r7, r4
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	d143      	bne.n	8000e8a <_malloc_r+0xd6>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d04b      	beq.n	8000e9e <_malloc_r+0xea>
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	4639      	mov	r1, r7
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	eb04 0903 	add.w	r9, r4, r3
 8000e10:	f000 fb5a 	bl	80014c8 <_sbrk_r>
 8000e14:	4581      	cmp	r9, r0
 8000e16:	d142      	bne.n	8000e9e <_malloc_r+0xea>
 8000e18:	6821      	ldr	r1, [r4, #0]
 8000e1a:	1a6d      	subs	r5, r5, r1
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f7ff ffa6 	bl	8000d70 <sbrk_aligned>
 8000e24:	3001      	adds	r0, #1
 8000e26:	d03a      	beq.n	8000e9e <_malloc_r+0xea>
 8000e28:	6823      	ldr	r3, [r4, #0]
 8000e2a:	442b      	add	r3, r5
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	bb62      	cbnz	r2, 8000e90 <_malloc_r+0xdc>
 8000e36:	f8c8 7000 	str.w	r7, [r8]
 8000e3a:	e00f      	b.n	8000e5c <_malloc_r+0xa8>
 8000e3c:	6822      	ldr	r2, [r4, #0]
 8000e3e:	1b52      	subs	r2, r2, r5
 8000e40:	d420      	bmi.n	8000e84 <_malloc_r+0xd0>
 8000e42:	2a0b      	cmp	r2, #11
 8000e44:	d917      	bls.n	8000e76 <_malloc_r+0xc2>
 8000e46:	1961      	adds	r1, r4, r5
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	6025      	str	r5, [r4, #0]
 8000e4c:	bf18      	it	ne
 8000e4e:	6059      	strne	r1, [r3, #4]
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	bf08      	it	eq
 8000e54:	f8c8 1000 	streq.w	r1, [r8]
 8000e58:	5162      	str	r2, [r4, r5]
 8000e5a:	604b      	str	r3, [r1, #4]
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	f000 f82f 	bl	8000ec0 <__malloc_unlock>
 8000e62:	f104 000b 	add.w	r0, r4, #11
 8000e66:	1d23      	adds	r3, r4, #4
 8000e68:	f020 0007 	bic.w	r0, r0, #7
 8000e6c:	1ac2      	subs	r2, r0, r3
 8000e6e:	bf1c      	itt	ne
 8000e70:	1a1b      	subne	r3, r3, r0
 8000e72:	50a3      	strne	r3, [r4, r2]
 8000e74:	e7af      	b.n	8000dd6 <_malloc_r+0x22>
 8000e76:	6862      	ldr	r2, [r4, #4]
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	bf0c      	ite	eq
 8000e7c:	f8c8 2000 	streq.w	r2, [r8]
 8000e80:	605a      	strne	r2, [r3, #4]
 8000e82:	e7eb      	b.n	8000e5c <_malloc_r+0xa8>
 8000e84:	4623      	mov	r3, r4
 8000e86:	6864      	ldr	r4, [r4, #4]
 8000e88:	e7ae      	b.n	8000de8 <_malloc_r+0x34>
 8000e8a:	463c      	mov	r4, r7
 8000e8c:	687f      	ldr	r7, [r7, #4]
 8000e8e:	e7b6      	b.n	8000dfe <_malloc_r+0x4a>
 8000e90:	461a      	mov	r2, r3
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	42a3      	cmp	r3, r4
 8000e96:	d1fb      	bne.n	8000e90 <_malloc_r+0xdc>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	6053      	str	r3, [r2, #4]
 8000e9c:	e7de      	b.n	8000e5c <_malloc_r+0xa8>
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	6033      	str	r3, [r6, #0]
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f000 f80c 	bl	8000ec0 <__malloc_unlock>
 8000ea8:	e794      	b.n	8000dd4 <_malloc_r+0x20>
 8000eaa:	6005      	str	r5, [r0, #0]
 8000eac:	e7d6      	b.n	8000e5c <_malloc_r+0xa8>
 8000eae:	bf00      	nop
 8000eb0:	200001c4 	.word	0x200001c4

08000eb4 <__malloc_lock>:
 8000eb4:	4801      	ldr	r0, [pc, #4]	@ (8000ebc <__malloc_lock+0x8>)
 8000eb6:	f7ff bf0f 	b.w	8000cd8 <__retarget_lock_acquire_recursive>
 8000eba:	bf00      	nop
 8000ebc:	200001bc 	.word	0x200001bc

08000ec0 <__malloc_unlock>:
 8000ec0:	4801      	ldr	r0, [pc, #4]	@ (8000ec8 <__malloc_unlock+0x8>)
 8000ec2:	f7ff bf0a 	b.w	8000cda <__retarget_lock_release_recursive>
 8000ec6:	bf00      	nop
 8000ec8:	200001bc 	.word	0x200001bc

08000ecc <__ssputs_r>:
 8000ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed0:	688e      	ldr	r6, [r1, #8]
 8000ed2:	461f      	mov	r7, r3
 8000ed4:	42be      	cmp	r6, r7
 8000ed6:	680b      	ldr	r3, [r1, #0]
 8000ed8:	4682      	mov	sl, r0
 8000eda:	460c      	mov	r4, r1
 8000edc:	4690      	mov	r8, r2
 8000ede:	d82d      	bhi.n	8000f3c <__ssputs_r+0x70>
 8000ee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000ee4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000ee8:	d026      	beq.n	8000f38 <__ssputs_r+0x6c>
 8000eea:	6965      	ldr	r5, [r4, #20]
 8000eec:	6909      	ldr	r1, [r1, #16]
 8000eee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ef2:	eba3 0901 	sub.w	r9, r3, r1
 8000ef6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000efa:	1c7b      	adds	r3, r7, #1
 8000efc:	444b      	add	r3, r9
 8000efe:	106d      	asrs	r5, r5, #1
 8000f00:	429d      	cmp	r5, r3
 8000f02:	bf38      	it	cc
 8000f04:	461d      	movcc	r5, r3
 8000f06:	0553      	lsls	r3, r2, #21
 8000f08:	d527      	bpl.n	8000f5a <__ssputs_r+0x8e>
 8000f0a:	4629      	mov	r1, r5
 8000f0c:	f7ff ff52 	bl	8000db4 <_malloc_r>
 8000f10:	4606      	mov	r6, r0
 8000f12:	b360      	cbz	r0, 8000f6e <__ssputs_r+0xa2>
 8000f14:	6921      	ldr	r1, [r4, #16]
 8000f16:	464a      	mov	r2, r9
 8000f18:	f000 fae6 	bl	80014e8 <memcpy>
 8000f1c:	89a3      	ldrh	r3, [r4, #12]
 8000f1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f26:	81a3      	strh	r3, [r4, #12]
 8000f28:	6126      	str	r6, [r4, #16]
 8000f2a:	6165      	str	r5, [r4, #20]
 8000f2c:	444e      	add	r6, r9
 8000f2e:	eba5 0509 	sub.w	r5, r5, r9
 8000f32:	6026      	str	r6, [r4, #0]
 8000f34:	60a5      	str	r5, [r4, #8]
 8000f36:	463e      	mov	r6, r7
 8000f38:	42be      	cmp	r6, r7
 8000f3a:	d900      	bls.n	8000f3e <__ssputs_r+0x72>
 8000f3c:	463e      	mov	r6, r7
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	4632      	mov	r2, r6
 8000f42:	4641      	mov	r1, r8
 8000f44:	f000 faa6 	bl	8001494 <memmove>
 8000f48:	68a3      	ldr	r3, [r4, #8]
 8000f4a:	1b9b      	subs	r3, r3, r6
 8000f4c:	60a3      	str	r3, [r4, #8]
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	4433      	add	r3, r6
 8000f52:	6023      	str	r3, [r4, #0]
 8000f54:	2000      	movs	r0, #0
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462a      	mov	r2, r5
 8000f5c:	f000 fad2 	bl	8001504 <_realloc_r>
 8000f60:	4606      	mov	r6, r0
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d1e0      	bne.n	8000f28 <__ssputs_r+0x5c>
 8000f66:	6921      	ldr	r1, [r4, #16]
 8000f68:	4650      	mov	r0, sl
 8000f6a:	f7ff feb7 	bl	8000cdc <_free_r>
 8000f6e:	230c      	movs	r3, #12
 8000f70:	f8ca 3000 	str.w	r3, [sl]
 8000f74:	89a3      	ldrh	r3, [r4, #12]
 8000f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f7a:	81a3      	strh	r3, [r4, #12]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	e7e9      	b.n	8000f56 <__ssputs_r+0x8a>
	...

08000f84 <_svfiprintf_r>:
 8000f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f88:	4698      	mov	r8, r3
 8000f8a:	898b      	ldrh	r3, [r1, #12]
 8000f8c:	061b      	lsls	r3, r3, #24
 8000f8e:	b09d      	sub	sp, #116	@ 0x74
 8000f90:	4607      	mov	r7, r0
 8000f92:	460d      	mov	r5, r1
 8000f94:	4614      	mov	r4, r2
 8000f96:	d510      	bpl.n	8000fba <_svfiprintf_r+0x36>
 8000f98:	690b      	ldr	r3, [r1, #16]
 8000f9a:	b973      	cbnz	r3, 8000fba <_svfiprintf_r+0x36>
 8000f9c:	2140      	movs	r1, #64	@ 0x40
 8000f9e:	f7ff ff09 	bl	8000db4 <_malloc_r>
 8000fa2:	6028      	str	r0, [r5, #0]
 8000fa4:	6128      	str	r0, [r5, #16]
 8000fa6:	b930      	cbnz	r0, 8000fb6 <_svfiprintf_r+0x32>
 8000fa8:	230c      	movs	r3, #12
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	b01d      	add	sp, #116	@ 0x74
 8000fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb6:	2340      	movs	r3, #64	@ 0x40
 8000fb8:	616b      	str	r3, [r5, #20]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fbe:	2320      	movs	r3, #32
 8000fc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fc8:	2330      	movs	r3, #48	@ 0x30
 8000fca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001168 <_svfiprintf_r+0x1e4>
 8000fce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fd2:	f04f 0901 	mov.w	r9, #1
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	469a      	mov	sl, r3
 8000fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fde:	b10a      	cbz	r2, 8000fe4 <_svfiprintf_r+0x60>
 8000fe0:	2a25      	cmp	r2, #37	@ 0x25
 8000fe2:	d1f9      	bne.n	8000fd8 <_svfiprintf_r+0x54>
 8000fe4:	ebba 0b04 	subs.w	fp, sl, r4
 8000fe8:	d00b      	beq.n	8001002 <_svfiprintf_r+0x7e>
 8000fea:	465b      	mov	r3, fp
 8000fec:	4622      	mov	r2, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4638      	mov	r0, r7
 8000ff2:	f7ff ff6b 	bl	8000ecc <__ssputs_r>
 8000ff6:	3001      	adds	r0, #1
 8000ff8:	f000 80a7 	beq.w	800114a <_svfiprintf_r+0x1c6>
 8000ffc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ffe:	445a      	add	r2, fp
 8001000:	9209      	str	r2, [sp, #36]	@ 0x24
 8001002:	f89a 3000 	ldrb.w	r3, [sl]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 809f 	beq.w	800114a <_svfiprintf_r+0x1c6>
 800100c:	2300      	movs	r3, #0
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001016:	f10a 0a01 	add.w	sl, sl, #1
 800101a:	9304      	str	r3, [sp, #16]
 800101c:	9307      	str	r3, [sp, #28]
 800101e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001022:	931a      	str	r3, [sp, #104]	@ 0x68
 8001024:	4654      	mov	r4, sl
 8001026:	2205      	movs	r2, #5
 8001028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800102c:	484e      	ldr	r0, [pc, #312]	@ (8001168 <_svfiprintf_r+0x1e4>)
 800102e:	f7ff f8df 	bl	80001f0 <memchr>
 8001032:	9a04      	ldr	r2, [sp, #16]
 8001034:	b9d8      	cbnz	r0, 800106e <_svfiprintf_r+0xea>
 8001036:	06d0      	lsls	r0, r2, #27
 8001038:	bf44      	itt	mi
 800103a:	2320      	movmi	r3, #32
 800103c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001040:	0711      	lsls	r1, r2, #28
 8001042:	bf44      	itt	mi
 8001044:	232b      	movmi	r3, #43	@ 0x2b
 8001046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800104a:	f89a 3000 	ldrb.w	r3, [sl]
 800104e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001050:	d015      	beq.n	800107e <_svfiprintf_r+0xfa>
 8001052:	9a07      	ldr	r2, [sp, #28]
 8001054:	4654      	mov	r4, sl
 8001056:	2000      	movs	r0, #0
 8001058:	f04f 0c0a 	mov.w	ip, #10
 800105c:	4621      	mov	r1, r4
 800105e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001062:	3b30      	subs	r3, #48	@ 0x30
 8001064:	2b09      	cmp	r3, #9
 8001066:	d94b      	bls.n	8001100 <_svfiprintf_r+0x17c>
 8001068:	b1b0      	cbz	r0, 8001098 <_svfiprintf_r+0x114>
 800106a:	9207      	str	r2, [sp, #28]
 800106c:	e014      	b.n	8001098 <_svfiprintf_r+0x114>
 800106e:	eba0 0308 	sub.w	r3, r0, r8
 8001072:	fa09 f303 	lsl.w	r3, r9, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	9304      	str	r3, [sp, #16]
 800107a:	46a2      	mov	sl, r4
 800107c:	e7d2      	b.n	8001024 <_svfiprintf_r+0xa0>
 800107e:	9b03      	ldr	r3, [sp, #12]
 8001080:	1d19      	adds	r1, r3, #4
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	9103      	str	r1, [sp, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	bfbb      	ittet	lt
 800108a:	425b      	neglt	r3, r3
 800108c:	f042 0202 	orrlt.w	r2, r2, #2
 8001090:	9307      	strge	r3, [sp, #28]
 8001092:	9307      	strlt	r3, [sp, #28]
 8001094:	bfb8      	it	lt
 8001096:	9204      	strlt	r2, [sp, #16]
 8001098:	7823      	ldrb	r3, [r4, #0]
 800109a:	2b2e      	cmp	r3, #46	@ 0x2e
 800109c:	d10a      	bne.n	80010b4 <_svfiprintf_r+0x130>
 800109e:	7863      	ldrb	r3, [r4, #1]
 80010a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80010a2:	d132      	bne.n	800110a <_svfiprintf_r+0x186>
 80010a4:	9b03      	ldr	r3, [sp, #12]
 80010a6:	1d1a      	adds	r2, r3, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	9203      	str	r2, [sp, #12]
 80010ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010b0:	3402      	adds	r4, #2
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001178 <_svfiprintf_r+0x1f4>
 80010b8:	7821      	ldrb	r1, [r4, #0]
 80010ba:	2203      	movs	r2, #3
 80010bc:	4650      	mov	r0, sl
 80010be:	f7ff f897 	bl	80001f0 <memchr>
 80010c2:	b138      	cbz	r0, 80010d4 <_svfiprintf_r+0x150>
 80010c4:	9b04      	ldr	r3, [sp, #16]
 80010c6:	eba0 000a 	sub.w	r0, r0, sl
 80010ca:	2240      	movs	r2, #64	@ 0x40
 80010cc:	4082      	lsls	r2, r0
 80010ce:	4313      	orrs	r3, r2
 80010d0:	3401      	adds	r4, #1
 80010d2:	9304      	str	r3, [sp, #16]
 80010d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010d8:	4824      	ldr	r0, [pc, #144]	@ (800116c <_svfiprintf_r+0x1e8>)
 80010da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010de:	2206      	movs	r2, #6
 80010e0:	f7ff f886 	bl	80001f0 <memchr>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d036      	beq.n	8001156 <_svfiprintf_r+0x1d2>
 80010e8:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <_svfiprintf_r+0x1ec>)
 80010ea:	bb1b      	cbnz	r3, 8001134 <_svfiprintf_r+0x1b0>
 80010ec:	9b03      	ldr	r3, [sp, #12]
 80010ee:	3307      	adds	r3, #7
 80010f0:	f023 0307 	bic.w	r3, r3, #7
 80010f4:	3308      	adds	r3, #8
 80010f6:	9303      	str	r3, [sp, #12]
 80010f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80010fa:	4433      	add	r3, r6
 80010fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80010fe:	e76a      	b.n	8000fd6 <_svfiprintf_r+0x52>
 8001100:	fb0c 3202 	mla	r2, ip, r2, r3
 8001104:	460c      	mov	r4, r1
 8001106:	2001      	movs	r0, #1
 8001108:	e7a8      	b.n	800105c <_svfiprintf_r+0xd8>
 800110a:	2300      	movs	r3, #0
 800110c:	3401      	adds	r4, #1
 800110e:	9305      	str	r3, [sp, #20]
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 0c0a 	mov.w	ip, #10
 8001116:	4620      	mov	r0, r4
 8001118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800111c:	3a30      	subs	r2, #48	@ 0x30
 800111e:	2a09      	cmp	r2, #9
 8001120:	d903      	bls.n	800112a <_svfiprintf_r+0x1a6>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0c6      	beq.n	80010b4 <_svfiprintf_r+0x130>
 8001126:	9105      	str	r1, [sp, #20]
 8001128:	e7c4      	b.n	80010b4 <_svfiprintf_r+0x130>
 800112a:	fb0c 2101 	mla	r1, ip, r1, r2
 800112e:	4604      	mov	r4, r0
 8001130:	2301      	movs	r3, #1
 8001132:	e7f0      	b.n	8001116 <_svfiprintf_r+0x192>
 8001134:	ab03      	add	r3, sp, #12
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	462a      	mov	r2, r5
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <_svfiprintf_r+0x1f0>)
 800113c:	a904      	add	r1, sp, #16
 800113e:	4638      	mov	r0, r7
 8001140:	f3af 8000 	nop.w
 8001144:	1c42      	adds	r2, r0, #1
 8001146:	4606      	mov	r6, r0
 8001148:	d1d6      	bne.n	80010f8 <_svfiprintf_r+0x174>
 800114a:	89ab      	ldrh	r3, [r5, #12]
 800114c:	065b      	lsls	r3, r3, #25
 800114e:	f53f af2d 	bmi.w	8000fac <_svfiprintf_r+0x28>
 8001152:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001154:	e72c      	b.n	8000fb0 <_svfiprintf_r+0x2c>
 8001156:	ab03      	add	r3, sp, #12
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	462a      	mov	r2, r5
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <_svfiprintf_r+0x1f0>)
 800115e:	a904      	add	r1, sp, #16
 8001160:	4638      	mov	r0, r7
 8001162:	f000 f879 	bl	8001258 <_printf_i>
 8001166:	e7ed      	b.n	8001144 <_svfiprintf_r+0x1c0>
 8001168:	080015e3 	.word	0x080015e3
 800116c:	080015ed 	.word	0x080015ed
 8001170:	00000000 	.word	0x00000000
 8001174:	08000ecd 	.word	0x08000ecd
 8001178:	080015e9 	.word	0x080015e9

0800117c <_printf_common>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	4616      	mov	r6, r2
 8001182:	4698      	mov	r8, r3
 8001184:	688a      	ldr	r2, [r1, #8]
 8001186:	690b      	ldr	r3, [r1, #16]
 8001188:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800118c:	4293      	cmp	r3, r2
 800118e:	bfb8      	it	lt
 8001190:	4613      	movlt	r3, r2
 8001192:	6033      	str	r3, [r6, #0]
 8001194:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001198:	4607      	mov	r7, r0
 800119a:	460c      	mov	r4, r1
 800119c:	b10a      	cbz	r2, 80011a2 <_printf_common+0x26>
 800119e:	3301      	adds	r3, #1
 80011a0:	6033      	str	r3, [r6, #0]
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	0699      	lsls	r1, r3, #26
 80011a6:	bf42      	ittt	mi
 80011a8:	6833      	ldrmi	r3, [r6, #0]
 80011aa:	3302      	addmi	r3, #2
 80011ac:	6033      	strmi	r3, [r6, #0]
 80011ae:	6825      	ldr	r5, [r4, #0]
 80011b0:	f015 0506 	ands.w	r5, r5, #6
 80011b4:	d106      	bne.n	80011c4 <_printf_common+0x48>
 80011b6:	f104 0a19 	add.w	sl, r4, #25
 80011ba:	68e3      	ldr	r3, [r4, #12]
 80011bc:	6832      	ldr	r2, [r6, #0]
 80011be:	1a9b      	subs	r3, r3, r2
 80011c0:	42ab      	cmp	r3, r5
 80011c2:	dc26      	bgt.n	8001212 <_printf_common+0x96>
 80011c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011c8:	6822      	ldr	r2, [r4, #0]
 80011ca:	3b00      	subs	r3, #0
 80011cc:	bf18      	it	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	0692      	lsls	r2, r2, #26
 80011d2:	d42b      	bmi.n	800122c <_printf_common+0xb0>
 80011d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80011d8:	4641      	mov	r1, r8
 80011da:	4638      	mov	r0, r7
 80011dc:	47c8      	blx	r9
 80011de:	3001      	adds	r0, #1
 80011e0:	d01e      	beq.n	8001220 <_printf_common+0xa4>
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	6922      	ldr	r2, [r4, #16]
 80011e6:	f003 0306 	and.w	r3, r3, #6
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf02      	ittt	eq
 80011ee:	68e5      	ldreq	r5, [r4, #12]
 80011f0:	6833      	ldreq	r3, [r6, #0]
 80011f2:	1aed      	subeq	r5, r5, r3
 80011f4:	68a3      	ldr	r3, [r4, #8]
 80011f6:	bf0c      	ite	eq
 80011f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011fc:	2500      	movne	r5, #0
 80011fe:	4293      	cmp	r3, r2
 8001200:	bfc4      	itt	gt
 8001202:	1a9b      	subgt	r3, r3, r2
 8001204:	18ed      	addgt	r5, r5, r3
 8001206:	2600      	movs	r6, #0
 8001208:	341a      	adds	r4, #26
 800120a:	42b5      	cmp	r5, r6
 800120c:	d11a      	bne.n	8001244 <_printf_common+0xc8>
 800120e:	2000      	movs	r0, #0
 8001210:	e008      	b.n	8001224 <_printf_common+0xa8>
 8001212:	2301      	movs	r3, #1
 8001214:	4652      	mov	r2, sl
 8001216:	4641      	mov	r1, r8
 8001218:	4638      	mov	r0, r7
 800121a:	47c8      	blx	r9
 800121c:	3001      	adds	r0, #1
 800121e:	d103      	bne.n	8001228 <_printf_common+0xac>
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001228:	3501      	adds	r5, #1
 800122a:	e7c6      	b.n	80011ba <_printf_common+0x3e>
 800122c:	18e1      	adds	r1, r4, r3
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	2030      	movs	r0, #48	@ 0x30
 8001232:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001236:	4422      	add	r2, r4
 8001238:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800123c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001240:	3302      	adds	r3, #2
 8001242:	e7c7      	b.n	80011d4 <_printf_common+0x58>
 8001244:	2301      	movs	r3, #1
 8001246:	4622      	mov	r2, r4
 8001248:	4641      	mov	r1, r8
 800124a:	4638      	mov	r0, r7
 800124c:	47c8      	blx	r9
 800124e:	3001      	adds	r0, #1
 8001250:	d0e6      	beq.n	8001220 <_printf_common+0xa4>
 8001252:	3601      	adds	r6, #1
 8001254:	e7d9      	b.n	800120a <_printf_common+0x8e>
	...

08001258 <_printf_i>:
 8001258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800125c:	7e0f      	ldrb	r7, [r1, #24]
 800125e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001260:	2f78      	cmp	r7, #120	@ 0x78
 8001262:	4691      	mov	r9, r2
 8001264:	4680      	mov	r8, r0
 8001266:	460c      	mov	r4, r1
 8001268:	469a      	mov	sl, r3
 800126a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800126e:	d807      	bhi.n	8001280 <_printf_i+0x28>
 8001270:	2f62      	cmp	r7, #98	@ 0x62
 8001272:	d80a      	bhi.n	800128a <_printf_i+0x32>
 8001274:	2f00      	cmp	r7, #0
 8001276:	f000 80d1 	beq.w	800141c <_printf_i+0x1c4>
 800127a:	2f58      	cmp	r7, #88	@ 0x58
 800127c:	f000 80b8 	beq.w	80013f0 <_printf_i+0x198>
 8001280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001284:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001288:	e03a      	b.n	8001300 <_printf_i+0xa8>
 800128a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800128e:	2b15      	cmp	r3, #21
 8001290:	d8f6      	bhi.n	8001280 <_printf_i+0x28>
 8001292:	a101      	add	r1, pc, #4	@ (adr r1, 8001298 <_printf_i+0x40>)
 8001294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001298:	080012f1 	.word	0x080012f1
 800129c:	08001305 	.word	0x08001305
 80012a0:	08001281 	.word	0x08001281
 80012a4:	08001281 	.word	0x08001281
 80012a8:	08001281 	.word	0x08001281
 80012ac:	08001281 	.word	0x08001281
 80012b0:	08001305 	.word	0x08001305
 80012b4:	08001281 	.word	0x08001281
 80012b8:	08001281 	.word	0x08001281
 80012bc:	08001281 	.word	0x08001281
 80012c0:	08001281 	.word	0x08001281
 80012c4:	08001403 	.word	0x08001403
 80012c8:	0800132f 	.word	0x0800132f
 80012cc:	080013bd 	.word	0x080013bd
 80012d0:	08001281 	.word	0x08001281
 80012d4:	08001281 	.word	0x08001281
 80012d8:	08001425 	.word	0x08001425
 80012dc:	08001281 	.word	0x08001281
 80012e0:	0800132f 	.word	0x0800132f
 80012e4:	08001281 	.word	0x08001281
 80012e8:	08001281 	.word	0x08001281
 80012ec:	080013c5 	.word	0x080013c5
 80012f0:	6833      	ldr	r3, [r6, #0]
 80012f2:	1d1a      	adds	r2, r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6032      	str	r2, [r6, #0]
 80012f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001300:	2301      	movs	r3, #1
 8001302:	e09c      	b.n	800143e <_printf_i+0x1e6>
 8001304:	6833      	ldr	r3, [r6, #0]
 8001306:	6820      	ldr	r0, [r4, #0]
 8001308:	1d19      	adds	r1, r3, #4
 800130a:	6031      	str	r1, [r6, #0]
 800130c:	0606      	lsls	r6, r0, #24
 800130e:	d501      	bpl.n	8001314 <_printf_i+0xbc>
 8001310:	681d      	ldr	r5, [r3, #0]
 8001312:	e003      	b.n	800131c <_printf_i+0xc4>
 8001314:	0645      	lsls	r5, r0, #25
 8001316:	d5fb      	bpl.n	8001310 <_printf_i+0xb8>
 8001318:	f9b3 5000 	ldrsh.w	r5, [r3]
 800131c:	2d00      	cmp	r5, #0
 800131e:	da03      	bge.n	8001328 <_printf_i+0xd0>
 8001320:	232d      	movs	r3, #45	@ 0x2d
 8001322:	426d      	negs	r5, r5
 8001324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001328:	4858      	ldr	r0, [pc, #352]	@ (800148c <_printf_i+0x234>)
 800132a:	230a      	movs	r3, #10
 800132c:	e011      	b.n	8001352 <_printf_i+0xfa>
 800132e:	6821      	ldr	r1, [r4, #0]
 8001330:	6833      	ldr	r3, [r6, #0]
 8001332:	0608      	lsls	r0, r1, #24
 8001334:	f853 5b04 	ldr.w	r5, [r3], #4
 8001338:	d402      	bmi.n	8001340 <_printf_i+0xe8>
 800133a:	0649      	lsls	r1, r1, #25
 800133c:	bf48      	it	mi
 800133e:	b2ad      	uxthmi	r5, r5
 8001340:	2f6f      	cmp	r7, #111	@ 0x6f
 8001342:	4852      	ldr	r0, [pc, #328]	@ (800148c <_printf_i+0x234>)
 8001344:	6033      	str	r3, [r6, #0]
 8001346:	bf14      	ite	ne
 8001348:	230a      	movne	r3, #10
 800134a:	2308      	moveq	r3, #8
 800134c:	2100      	movs	r1, #0
 800134e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001352:	6866      	ldr	r6, [r4, #4]
 8001354:	60a6      	str	r6, [r4, #8]
 8001356:	2e00      	cmp	r6, #0
 8001358:	db05      	blt.n	8001366 <_printf_i+0x10e>
 800135a:	6821      	ldr	r1, [r4, #0]
 800135c:	432e      	orrs	r6, r5
 800135e:	f021 0104 	bic.w	r1, r1, #4
 8001362:	6021      	str	r1, [r4, #0]
 8001364:	d04b      	beq.n	80013fe <_printf_i+0x1a6>
 8001366:	4616      	mov	r6, r2
 8001368:	fbb5 f1f3 	udiv	r1, r5, r3
 800136c:	fb03 5711 	mls	r7, r3, r1, r5
 8001370:	5dc7      	ldrb	r7, [r0, r7]
 8001372:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001376:	462f      	mov	r7, r5
 8001378:	42bb      	cmp	r3, r7
 800137a:	460d      	mov	r5, r1
 800137c:	d9f4      	bls.n	8001368 <_printf_i+0x110>
 800137e:	2b08      	cmp	r3, #8
 8001380:	d10b      	bne.n	800139a <_printf_i+0x142>
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	07df      	lsls	r7, r3, #31
 8001386:	d508      	bpl.n	800139a <_printf_i+0x142>
 8001388:	6923      	ldr	r3, [r4, #16]
 800138a:	6861      	ldr	r1, [r4, #4]
 800138c:	4299      	cmp	r1, r3
 800138e:	bfde      	ittt	le
 8001390:	2330      	movle	r3, #48	@ 0x30
 8001392:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001396:	f106 36ff 	addle.w	r6, r6, #4294967295
 800139a:	1b92      	subs	r2, r2, r6
 800139c:	6122      	str	r2, [r4, #16]
 800139e:	f8cd a000 	str.w	sl, [sp]
 80013a2:	464b      	mov	r3, r9
 80013a4:	aa03      	add	r2, sp, #12
 80013a6:	4621      	mov	r1, r4
 80013a8:	4640      	mov	r0, r8
 80013aa:	f7ff fee7 	bl	800117c <_printf_common>
 80013ae:	3001      	adds	r0, #1
 80013b0:	d14a      	bne.n	8001448 <_printf_i+0x1f0>
 80013b2:	f04f 30ff 	mov.w	r0, #4294967295
 80013b6:	b004      	add	sp, #16
 80013b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	f043 0320 	orr.w	r3, r3, #32
 80013c2:	6023      	str	r3, [r4, #0]
 80013c4:	4832      	ldr	r0, [pc, #200]	@ (8001490 <_printf_i+0x238>)
 80013c6:	2778      	movs	r7, #120	@ 0x78
 80013c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	6831      	ldr	r1, [r6, #0]
 80013d0:	061f      	lsls	r7, r3, #24
 80013d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80013d6:	d402      	bmi.n	80013de <_printf_i+0x186>
 80013d8:	065f      	lsls	r7, r3, #25
 80013da:	bf48      	it	mi
 80013dc:	b2ad      	uxthmi	r5, r5
 80013de:	6031      	str	r1, [r6, #0]
 80013e0:	07d9      	lsls	r1, r3, #31
 80013e2:	bf44      	itt	mi
 80013e4:	f043 0320 	orrmi.w	r3, r3, #32
 80013e8:	6023      	strmi	r3, [r4, #0]
 80013ea:	b11d      	cbz	r5, 80013f4 <_printf_i+0x19c>
 80013ec:	2310      	movs	r3, #16
 80013ee:	e7ad      	b.n	800134c <_printf_i+0xf4>
 80013f0:	4826      	ldr	r0, [pc, #152]	@ (800148c <_printf_i+0x234>)
 80013f2:	e7e9      	b.n	80013c8 <_printf_i+0x170>
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	f023 0320 	bic.w	r3, r3, #32
 80013fa:	6023      	str	r3, [r4, #0]
 80013fc:	e7f6      	b.n	80013ec <_printf_i+0x194>
 80013fe:	4616      	mov	r6, r2
 8001400:	e7bd      	b.n	800137e <_printf_i+0x126>
 8001402:	6833      	ldr	r3, [r6, #0]
 8001404:	6825      	ldr	r5, [r4, #0]
 8001406:	6961      	ldr	r1, [r4, #20]
 8001408:	1d18      	adds	r0, r3, #4
 800140a:	6030      	str	r0, [r6, #0]
 800140c:	062e      	lsls	r6, r5, #24
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	d501      	bpl.n	8001416 <_printf_i+0x1be>
 8001412:	6019      	str	r1, [r3, #0]
 8001414:	e002      	b.n	800141c <_printf_i+0x1c4>
 8001416:	0668      	lsls	r0, r5, #25
 8001418:	d5fb      	bpl.n	8001412 <_printf_i+0x1ba>
 800141a:	8019      	strh	r1, [r3, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	6123      	str	r3, [r4, #16]
 8001420:	4616      	mov	r6, r2
 8001422:	e7bc      	b.n	800139e <_printf_i+0x146>
 8001424:	6833      	ldr	r3, [r6, #0]
 8001426:	1d1a      	adds	r2, r3, #4
 8001428:	6032      	str	r2, [r6, #0]
 800142a:	681e      	ldr	r6, [r3, #0]
 800142c:	6862      	ldr	r2, [r4, #4]
 800142e:	2100      	movs	r1, #0
 8001430:	4630      	mov	r0, r6
 8001432:	f7fe fedd 	bl	80001f0 <memchr>
 8001436:	b108      	cbz	r0, 800143c <_printf_i+0x1e4>
 8001438:	1b80      	subs	r0, r0, r6
 800143a:	6060      	str	r0, [r4, #4]
 800143c:	6863      	ldr	r3, [r4, #4]
 800143e:	6123      	str	r3, [r4, #16]
 8001440:	2300      	movs	r3, #0
 8001442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001446:	e7aa      	b.n	800139e <_printf_i+0x146>
 8001448:	6923      	ldr	r3, [r4, #16]
 800144a:	4632      	mov	r2, r6
 800144c:	4649      	mov	r1, r9
 800144e:	4640      	mov	r0, r8
 8001450:	47d0      	blx	sl
 8001452:	3001      	adds	r0, #1
 8001454:	d0ad      	beq.n	80013b2 <_printf_i+0x15a>
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	079b      	lsls	r3, r3, #30
 800145a:	d413      	bmi.n	8001484 <_printf_i+0x22c>
 800145c:	68e0      	ldr	r0, [r4, #12]
 800145e:	9b03      	ldr	r3, [sp, #12]
 8001460:	4298      	cmp	r0, r3
 8001462:	bfb8      	it	lt
 8001464:	4618      	movlt	r0, r3
 8001466:	e7a6      	b.n	80013b6 <_printf_i+0x15e>
 8001468:	2301      	movs	r3, #1
 800146a:	4632      	mov	r2, r6
 800146c:	4649      	mov	r1, r9
 800146e:	4640      	mov	r0, r8
 8001470:	47d0      	blx	sl
 8001472:	3001      	adds	r0, #1
 8001474:	d09d      	beq.n	80013b2 <_printf_i+0x15a>
 8001476:	3501      	adds	r5, #1
 8001478:	68e3      	ldr	r3, [r4, #12]
 800147a:	9903      	ldr	r1, [sp, #12]
 800147c:	1a5b      	subs	r3, r3, r1
 800147e:	42ab      	cmp	r3, r5
 8001480:	dcf2      	bgt.n	8001468 <_printf_i+0x210>
 8001482:	e7eb      	b.n	800145c <_printf_i+0x204>
 8001484:	2500      	movs	r5, #0
 8001486:	f104 0619 	add.w	r6, r4, #25
 800148a:	e7f5      	b.n	8001478 <_printf_i+0x220>
 800148c:	080015f4 	.word	0x080015f4
 8001490:	08001605 	.word	0x08001605

08001494 <memmove>:
 8001494:	4288      	cmp	r0, r1
 8001496:	b510      	push	{r4, lr}
 8001498:	eb01 0402 	add.w	r4, r1, r2
 800149c:	d902      	bls.n	80014a4 <memmove+0x10>
 800149e:	4284      	cmp	r4, r0
 80014a0:	4623      	mov	r3, r4
 80014a2:	d807      	bhi.n	80014b4 <memmove+0x20>
 80014a4:	1e43      	subs	r3, r0, #1
 80014a6:	42a1      	cmp	r1, r4
 80014a8:	d008      	beq.n	80014bc <memmove+0x28>
 80014aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014b2:	e7f8      	b.n	80014a6 <memmove+0x12>
 80014b4:	4402      	add	r2, r0
 80014b6:	4601      	mov	r1, r0
 80014b8:	428a      	cmp	r2, r1
 80014ba:	d100      	bne.n	80014be <memmove+0x2a>
 80014bc:	bd10      	pop	{r4, pc}
 80014be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80014c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80014c6:	e7f7      	b.n	80014b8 <memmove+0x24>

080014c8 <_sbrk_r>:
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	4d06      	ldr	r5, [pc, #24]	@ (80014e4 <_sbrk_r+0x1c>)
 80014cc:	2300      	movs	r3, #0
 80014ce:	4604      	mov	r4, r0
 80014d0:	4608      	mov	r0, r1
 80014d2:	602b      	str	r3, [r5, #0]
 80014d4:	f7ff faa4 	bl	8000a20 <_sbrk>
 80014d8:	1c43      	adds	r3, r0, #1
 80014da:	d102      	bne.n	80014e2 <_sbrk_r+0x1a>
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	b103      	cbz	r3, 80014e2 <_sbrk_r+0x1a>
 80014e0:	6023      	str	r3, [r4, #0]
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
 80014e4:	200001b8 	.word	0x200001b8

080014e8 <memcpy>:
 80014e8:	440a      	add	r2, r1
 80014ea:	4291      	cmp	r1, r2
 80014ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80014f0:	d100      	bne.n	80014f4 <memcpy+0xc>
 80014f2:	4770      	bx	lr
 80014f4:	b510      	push	{r4, lr}
 80014f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014fe:	4291      	cmp	r1, r2
 8001500:	d1f9      	bne.n	80014f6 <memcpy+0xe>
 8001502:	bd10      	pop	{r4, pc}

08001504 <_realloc_r>:
 8001504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001508:	4607      	mov	r7, r0
 800150a:	4614      	mov	r4, r2
 800150c:	460d      	mov	r5, r1
 800150e:	b921      	cbnz	r1, 800151a <_realloc_r+0x16>
 8001510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001514:	4611      	mov	r1, r2
 8001516:	f7ff bc4d 	b.w	8000db4 <_malloc_r>
 800151a:	b92a      	cbnz	r2, 8001528 <_realloc_r+0x24>
 800151c:	f7ff fbde 	bl	8000cdc <_free_r>
 8001520:	4625      	mov	r5, r4
 8001522:	4628      	mov	r0, r5
 8001524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001528:	f000 f81a 	bl	8001560 <_malloc_usable_size_r>
 800152c:	4284      	cmp	r4, r0
 800152e:	4606      	mov	r6, r0
 8001530:	d802      	bhi.n	8001538 <_realloc_r+0x34>
 8001532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001536:	d8f4      	bhi.n	8001522 <_realloc_r+0x1e>
 8001538:	4621      	mov	r1, r4
 800153a:	4638      	mov	r0, r7
 800153c:	f7ff fc3a 	bl	8000db4 <_malloc_r>
 8001540:	4680      	mov	r8, r0
 8001542:	b908      	cbnz	r0, 8001548 <_realloc_r+0x44>
 8001544:	4645      	mov	r5, r8
 8001546:	e7ec      	b.n	8001522 <_realloc_r+0x1e>
 8001548:	42b4      	cmp	r4, r6
 800154a:	4622      	mov	r2, r4
 800154c:	4629      	mov	r1, r5
 800154e:	bf28      	it	cs
 8001550:	4632      	movcs	r2, r6
 8001552:	f7ff ffc9 	bl	80014e8 <memcpy>
 8001556:	4629      	mov	r1, r5
 8001558:	4638      	mov	r0, r7
 800155a:	f7ff fbbf 	bl	8000cdc <_free_r>
 800155e:	e7f1      	b.n	8001544 <_realloc_r+0x40>

08001560 <_malloc_usable_size_r>:
 8001560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001564:	1f18      	subs	r0, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	bfbc      	itt	lt
 800156a:	580b      	ldrlt	r3, [r1, r0]
 800156c:	18c0      	addlt	r0, r0, r3
 800156e:	4770      	bx	lr

08001570 <_init>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	bf00      	nop
 8001574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001576:	bc08      	pop	{r3}
 8001578:	469e      	mov	lr, r3
 800157a:	4770      	bx	lr

0800157c <_fini>:
 800157c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157e:	bf00      	nop
 8001580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001582:	bc08      	pop	{r3}
 8001584:	469e      	mov	lr, r3
 8001586:	4770      	bx	lr
