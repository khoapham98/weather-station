
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000086c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08000a04  08000a04  00001a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a5c  08000a5c  0000203c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000a5c  08000a5c  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000a64  08000a64  0000203c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a64  08000a64  00001a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a68  08000a68  00001a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08000a6c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000003c  08000aa8  0000203c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000aa8  0000205c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002635  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c49  00000000  00000000  000046a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000308  00000000  00000000  000052f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000021e  00000000  00000000  000055f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015212  00000000  00000000  00005816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050a3  00000000  00000000  0001aa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829a7  00000000  00000000  0001facb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000980  00000000  00000000  000a24b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a2e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000003c 	.word	0x2000003c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080009ec 	.word	0x080009ec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000040 	.word	0x20000040
 80001d4:	080009ec 	.word	0x080009ec

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <DHT11_Init>:
	VCC: 3V
	DATA: PC14
	GND: GND
 */
void DHT11_Init()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	delay_ms(2000);
 80001ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001f2:	f000 fa7d 	bl	80006f0 <delay_ms>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	4b13      	ldr	r3, [pc, #76]	@ (8000248 <DHT11_Init+0x60>)
 80001fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fe:	4a12      	ldr	r2, [pc, #72]	@ (8000248 <DHT11_Init+0x60>)
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	6313      	str	r3, [r2, #48]	@ 0x30
 8000206:	4b10      	ldr	r3, [pc, #64]	@ (8000248 <DHT11_Init+0x60>)
 8000208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020a:	f003 0304 	and.w	r3, r3, #4
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOC_MODER = (uint32_t*) (GPIOC_BASE_ADDR + 0x00);
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <DHT11_Init+0x64>)
 8000214:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOC_ODR = (uint32_t*) (GPIOC_BASE_ADDR + 0x14);
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <DHT11_Init+0x68>)
 8000218:	60bb      	str	r3, [r7, #8]

	/* Set PC14 as OUTPUT */
	*GPIOC_MODER &= ~(0b11 << (14 * 2));
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	601a      	str	r2, [r3, #0]
	*GPIOC_MODER |= (0b01 << (14 * 2));
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	601a      	str	r2, [r3, #0]

	/* pull up voltage to work at free status */
	*GPIOC_ODR |= 1 << 14;
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	601a      	str	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40023800 	.word	0x40023800
 800024c:	40020800 	.word	0x40020800
 8000250:	40020814 	.word	0x40020814

08000254 <I2C1_Init>:
	GND: GND
	PB8: SCL
	PB9: SDA
 */
void I2C1_Init()
{
 8000254:	b480      	push	{r7}
 8000256:	b08b      	sub	sp, #44	@ 0x2c
 8000258:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	4b30      	ldr	r3, [pc, #192]	@ (8000320 <I2C1_Init+0xcc>)
 8000260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000262:	4a2f      	ldr	r2, [pc, #188]	@ (8000320 <I2C1_Init+0xcc>)
 8000264:	f043 0302 	orr.w	r3, r3, #2
 8000268:	6313      	str	r3, [r2, #48]	@ 0x30
 800026a:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <I2C1_Init+0xcc>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 8000276:	4b2b      	ldr	r3, [pc, #172]	@ (8000324 <I2C1_Init+0xd0>)
 8000278:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* GPIOB_AFRH = (uint32_t*) (GPIOB_BASE_ADDR + 0x24);
 800027a:	4b2b      	ldr	r3, [pc, #172]	@ (8000328 <I2C1_Init+0xd4>)
 800027c:	623b      	str	r3, [r7, #32]
	uint32_t* GPIOB_OTYPER = (uint32_t*) (GPIOB_BASE_ADDR + 0x04);
 800027e:	4b2b      	ldr	r3, [pc, #172]	@ (800032c <I2C1_Init+0xd8>)
 8000280:	61fb      	str	r3, [r7, #28]

	/* Configure PB8 & PB9 at AF */
	*GPIOB_MODER &= ~(0xf << (8 * 2));
 8000282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800028a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800028c:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |= (0b10 << (8 * 2)) | (0b10 << (9 * 2));
 800028e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f443 2220 	orr.w	r2, r3, #655360	@ 0xa0000
 8000296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000298:	601a      	str	r2, [r3, #0]

	*GPIOB_OTYPER |= (1 << 8) | (1 << 9);
 800029a:	69fb      	ldr	r3, [r7, #28]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	601a      	str	r2, [r3, #0]

	/* Select AF04 */
	*GPIOB_AFRH &= ~(0xff << 0);
 80002a6:	6a3b      	ldr	r3, [r7, #32]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRH |= (4 << 0) | (4 << 4);
 80002b2:	6a3b      	ldr	r3, [r7, #32]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f043 0244 	orr.w	r2, r3, #68	@ 0x44
 80002ba:	6a3b      	ldr	r3, [r7, #32]
 80002bc:	601a      	str	r2, [r3, #0]

	__HAL_RCC_I2C1_CLK_ENABLE();
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <I2C1_Init+0xcc>)
 80002c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c6:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <I2C1_Init+0xcc>)
 80002c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80002ce:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <I2C1_Init+0xcc>)
 80002d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]
	uint16_t* I2C_CR1 = (uint16_t*) (I2C1_BASE_ADDR + 0x00);
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <I2C1_Init+0xdc>)
 80002dc:	61bb      	str	r3, [r7, #24]
	uint16_t* I2C_CR2 = (uint16_t*) (I2C1_BASE_ADDR + 0x04);
 80002de:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <I2C1_Init+0xe0>)
 80002e0:	617b      	str	r3, [r7, #20]
	uint16_t* I2C_CCR = (uint16_t*) (I2C1_BASE_ADDR + 0x1C);
 80002e2:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <I2C1_Init+0xe4>)
 80002e4:	613b      	str	r3, [r7, #16]
	uint16_t* I2C_TRISE = (uint16_t*) (I2C1_BASE_ADDR + 0x20);
 80002e6:	4b15      	ldr	r3, [pc, #84]	@ (800033c <I2C1_Init+0xe8>)
 80002e8:	60fb      	str	r3, [r7, #12]

	/* configure I2C clock frequency = 16MHz */
	*I2C_CR2 |= 16 << 0;
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	b29a      	uxth	r2, r3
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	801a      	strh	r2, [r3, #0]

	/* configure SCL to generate 100kHz */
	*I2C_CCR = 80;
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	2250      	movs	r2, #80	@ 0x50
 80002fc:	801a      	strh	r2, [r3, #0]

	/* Set rise time */
	*I2C_TRISE = 16 + 1;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2211      	movs	r2, #17
 8000302:	801a      	strh	r2, [r3, #0]

	/* enable I2C */
	*I2C_CR1 |= 1 << 0;
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	b29a      	uxth	r2, r3
 800030e:	69bb      	ldr	r3, [r7, #24]
 8000310:	801a      	strh	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	372c      	adds	r7, #44	@ 0x2c
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020400 	.word	0x40020400
 8000328:	40020424 	.word	0x40020424
 800032c:	40020404 	.word	0x40020404
 8000330:	40005400 	.word	0x40005400
 8000334:	40005404 	.word	0x40005404
 8000338:	4000541c 	.word	0x4000541c
 800033c:	40005420 	.word	0x40005420

08000340 <main>:
time_t time;
date_t date;
uint8_t test[5] = { 30, 5, 34, 15, 0 };

int main()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	TIM2_Init();
 8000344:	f000 f9f2 	bl	800072c <TIM2_Init>
	DHT11_Init();
 8000348:	f7ff ff4e 	bl	80001e8 <DHT11_Init>
	I2C1_Init();
 800034c:	f7ff ff82 	bl	8000254 <I2C1_Init>
//	LCD_Init();
	RTC_Init();
 8000350:	f000 f89c 	bl	800048c <RTC_Init>
	UART_Init();
 8000354:	f000 fa74 	bl	8000840 <UART_Init>
//		{
//			LCD_gotoxy(1, 1);
//			LCD_print_String("HUMI : %d.%d %cRH  -  TEMP : %d.%d %cC", data[0], data[1], 0x25, data[2], data[3], 0xDF);
//		}
//		scroll_left();
		delay_ms(1500);
 8000358:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800035c:	f000 f9c8 	bl	80006f0 <delay_ms>
		UART_SendDATA(test);
 8000360:	4802      	ldr	r0, [pc, #8]	@ (800036c <main+0x2c>)
 8000362:	f000 fa2f 	bl	80007c4 <UART_SendDATA>
		delay_ms(1500);
 8000366:	bf00      	nop
 8000368:	e7f6      	b.n	8000358 <main+0x18>
 800036a:	bf00      	nop
 800036c:	20000000 	.word	0x20000000

08000370 <update_date>:
	_time.hour   = (((*RTC_TR >> 20) & 0b11 ) * 10) + ((*RTC_TR >> 16) & 0xf);
	return _time;
}

void update_date(uint8_t* date)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	char* DATE = __DATE__;
 8000378:	4b26      	ldr	r3, [pc, #152]	@ (8000414 <update_date+0xa4>)
 800037a:	613b      	str	r3, [r7, #16]
	int date_size = strlen(DATE);
 800037c:	6938      	ldr	r0, [r7, #16]
 800037e:	f7ff ff2b 	bl	80001d8 <strlen>
 8000382:	4603      	mov	r3, r0
 8000384:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 12; i++)
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
 800038a:	e015      	b.n	80003b8 <update_date+0x48>
	{
		if (strstr(DATE, months[i]) != NULL)
 800038c:	4a22      	ldr	r2, [pc, #136]	@ (8000418 <update_date+0xa8>)
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000394:	4619      	mov	r1, r3
 8000396:	6938      	ldr	r0, [r7, #16]
 8000398:	f000 faee 	bl	8000978 <strstr>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d007      	beq.n	80003b2 <update_date+0x42>
		{
			date[0] = ++i;
 80003a2:	69fb      	ldr	r3, [r7, #28]
 80003a4:	3301      	adds	r3, #1
 80003a6:	61fb      	str	r3, [r7, #28]
 80003a8:	69fb      	ldr	r3, [r7, #28]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	701a      	strb	r2, [r3, #0]
			break;
 80003b0:	e005      	b.n	80003be <update_date+0x4e>
	for (int i = 0; i < 12; i++)
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3301      	adds	r3, #1
 80003b6:	61fb      	str	r3, [r7, #28]
 80003b8:	69fb      	ldr	r3, [r7, #28]
 80003ba:	2b0b      	cmp	r3, #11
 80003bc:	dde6      	ble.n	800038c <update_date+0x1c>
		}
	}

	int index = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
	for (int i = 3; i < date_size; i++)
 80003c2:	2303      	movs	r3, #3
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e01b      	b.n	8000400 <update_date+0x90>
	{
		if (DATE[i] >= '0' && DATE[i] <= '9')
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	693a      	ldr	r2, [r7, #16]
 80003cc:	4413      	add	r3, r2
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80003d2:	d912      	bls.n	80003fa <update_date+0x8a>
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	693a      	ldr	r2, [r7, #16]
 80003d8:	4413      	add	r3, r2
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b39      	cmp	r3, #57	@ 0x39
 80003de:	d80c      	bhi.n	80003fa <update_date+0x8a>
		{
			date[index++] = DATE[i] - 48;
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	4413      	add	r3, r2
 80003e6:	781a      	ldrb	r2, [r3, #0]
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	1c59      	adds	r1, r3, #1
 80003ec:	61b9      	str	r1, [r7, #24]
 80003ee:	4619      	mov	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	440b      	add	r3, r1
 80003f4:	3a30      	subs	r2, #48	@ 0x30
 80003f6:	b2d2      	uxtb	r2, r2
 80003f8:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i < date_size; i++)
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	3301      	adds	r3, #1
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	429a      	cmp	r2, r3
 8000406:	dbdf      	blt.n	80003c8 <update_date+0x58>
		}
	}
}
 8000408:	bf00      	nop
 800040a:	bf00      	nop
 800040c:	3720      	adds	r7, #32
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	08000a44 	.word	0x08000a44
 8000418:	20000008 	.word	0x20000008

0800041c <update_time>:

void update_time(uint8_t* time)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	char* TIME = __TIME__;
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <update_time+0x6c>)
 8000426:	60fb      	str	r3, [r7, #12]
	int time_size = strlen(TIME);
 8000428:	68f8      	ldr	r0, [r7, #12]
 800042a:	f7ff fed5 	bl	80001d8 <strlen>
 800042e:	4603      	mov	r3, r0
 8000430:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < time_size; i++)
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
 800043a:	e01b      	b.n	8000474 <update_time+0x58>
	{
		if (TIME[i] >= '0' && TIME[i] <= '9')
 800043c:	693b      	ldr	r3, [r7, #16]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	4413      	add	r3, r2
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b2f      	cmp	r3, #47	@ 0x2f
 8000446:	d912      	bls.n	800046e <update_time+0x52>
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	4413      	add	r3, r2
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b39      	cmp	r3, #57	@ 0x39
 8000452:	d80c      	bhi.n	800046e <update_time+0x52>
		{
			time[index++] = TIME[i] - 48;
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	68fa      	ldr	r2, [r7, #12]
 8000458:	4413      	add	r3, r2
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	1c59      	adds	r1, r3, #1
 8000460:	6179      	str	r1, [r7, #20]
 8000462:	4619      	mov	r1, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	440b      	add	r3, r1
 8000468:	3a30      	subs	r2, #48	@ 0x30
 800046a:	b2d2      	uxtb	r2, r2
 800046c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < time_size; i++)
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	3301      	adds	r3, #1
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693a      	ldr	r2, [r7, #16]
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	429a      	cmp	r2, r3
 800047a:	dbdf      	blt.n	800043c <update_time+0x20>
		}
	}
}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	08000a50 	.word	0x08000a50

0800048c <RTC_Init>:

void RTC_Init()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08e      	sub	sp, #56	@ 0x38
 8000490:	af00      	add	r7, sp, #0
	uint32_t* RTC_TR  = (uint32_t*) (RTC_BASE_ADDR + 0x00);
 8000492:	4b6b      	ldr	r3, [pc, #428]	@ (8000640 <RTC_Init+0x1b4>)
 8000494:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t* RTC_DR  = (uint32_t*) (RTC_BASE_ADDR + 0x04);
 8000496:	4b6b      	ldr	r3, [pc, #428]	@ (8000644 <RTC_Init+0x1b8>)
 8000498:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t* RTC_PRER = (uint32_t*) (RTC_BASE_ADDR + 0x10);
 800049a:	4b6b      	ldr	r3, [pc, #428]	@ (8000648 <RTC_Init+0x1bc>)
 800049c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t* RTC_ISR  = (uint32_t*) (RTC_BASE_ADDR + 0x0C);
 800049e:	4b6b      	ldr	r3, [pc, #428]	@ (800064c <RTC_Init+0x1c0>)
 80004a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t* RTC_WPR  = (uint32_t*) (RTC_BASE_ADDR + 0x24);
 80004a2:	4b6b      	ldr	r3, [pc, #428]	@ (8000650 <RTC_Init+0x1c4>)
 80004a4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t* PWR_CR   = (uint32_t*) (PWR_BASE_ADDR + 0x00);
 80004a6:	4b6b      	ldr	r3, [pc, #428]	@ (8000654 <RTC_Init+0x1c8>)
 80004a8:	623b      	str	r3, [r7, #32]
	uint32_t* RCC_APB1ENR = (uint32_t*) (RCC_BASE_ADDR + 0x40);
 80004aa:	4b6b      	ldr	r3, [pc, #428]	@ (8000658 <RTC_Init+0x1cc>)
 80004ac:	61fb      	str	r3, [r7, #28]
	uint32_t* RCC_BDCR = (uint32_t*) (RCC_BASE_ADDR + 0x70);
 80004ae:	4b6b      	ldr	r3, [pc, #428]	@ (800065c <RTC_Init+0x1d0>)
 80004b0:	61bb      	str	r3, [r7, #24]
	uint32_t* RCC_CSR  = (uint32_t*) (RCC_BASE_ADDR + 0x74);
 80004b2:	4b6b      	ldr	r3, [pc, #428]	@ (8000660 <RTC_Init+0x1d4>)
 80004b4:	617b      	str	r3, [r7, #20]

	/* enable write access to RTC registers */
	*RCC_APB1ENR |= 1 << 28;
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	601a      	str	r2, [r3, #0]
	*PWR_CR |= 1 << 8;
 80004c2:	6a3b      	ldr	r3, [r7, #32]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80004ca:	6a3b      	ldr	r3, [r7, #32]
 80004cc:	601a      	str	r2, [r3, #0]

	/* enable LSI crystal */
	*RCC_CSR |= 1 << 0;
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f043 0201 	orr.w	r2, r3, #1
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	601a      	str	r2, [r3, #0]

	/* wait until LSI is ready */
	while (((*RCC_CSR >> 1) & 1) == 0);
 80004da:	bf00      	nop
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	085b      	lsrs	r3, r3, #1
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <RTC_Init+0x50>

	/* select LSI for RTC and enable RTC clock */
	*RCC_BDCR &= ~(0b11 << 8);
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	601a      	str	r2, [r3, #0]
	*RCC_BDCR |= 0b10 << 8;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	601a      	str	r2, [r3, #0]
	*RCC_BDCR |= 1 << 15;
 8000502:	69bb      	ldr	r3, [r7, #24]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	601a      	str	r2, [r3, #0]

	/* unlock the write protection */
	*RTC_WPR = 0xCA;
 800050e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000510:	22ca      	movs	r2, #202	@ 0xca
 8000512:	601a      	str	r2, [r3, #0]
	*RTC_WPR = 0x53;
 8000514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000516:	2253      	movs	r2, #83	@ 0x53
 8000518:	601a      	str	r2, [r3, #0]

	/* enter Init mode */
	*RTC_ISR |= 1 << 7;
 800051a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000524:	601a      	str	r2, [r3, #0]

	/* wait until RTC is in Init mode */
	while (((*RTC_ISR >> 6) & 1) == 0);
 8000526:	bf00      	nop
 8000528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	099b      	lsrs	r3, r3, #6
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f8      	beq.n	8000528 <RTC_Init+0x9c>

	/* configure ck_apre for calendar and ck_spre for sub secound counter */
	*RTC_PRER = (124 << 16) | 255;
 8000536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000538:	4a4a      	ldr	r2, [pc, #296]	@ (8000664 <RTC_Init+0x1d8>)
 800053a:	601a      	str	r2, [r3, #0]

	/* configure time and date for RTC */
	uint8_t time[6] = { 0 };
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	809a      	strh	r2, [r3, #4]
	update_time(time);
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ff66 	bl	800041c <update_time>
	*RTC_TR = (time[0] << 20) | (time[1] << 16) | (time[2] << 12) | (time[3] << 8) | (time[4] << 4) | time[5];
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	051a      	lsls	r2, r3, #20
 8000554:	7b7b      	ldrb	r3, [r7, #13]
 8000556:	041b      	lsls	r3, r3, #16
 8000558:	431a      	orrs	r2, r3
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	031b      	lsls	r3, r3, #12
 800055e:	431a      	orrs	r2, r3
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	021b      	lsls	r3, r3, #8
 8000564:	431a      	orrs	r2, r3
 8000566:	7c3b      	ldrb	r3, [r7, #16]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	4313      	orrs	r3, r2
 800056c:	7c7a      	ldrb	r2, [r7, #17]
 800056e:	4313      	orrs	r3, r2
 8000570:	461a      	mov	r2, r3
 8000572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000574:	601a      	str	r2, [r3, #0]

	uint8_t date[7] = { 0 };
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	f8c3 2003 	str.w	r2, [r3, #3]
	update_date(date);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fef4 	bl	8000370 <update_date>
	*RTC_DR &= ~0xffff;
 8000588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	0c1b      	lsrs	r3, r3, #16
 800058e:	041b      	lsls	r3, r3, #16
 8000590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000592:	6013      	str	r3, [r2, #0]
	if (date[6] == 0)
 8000594:	7abb      	ldrb	r3, [r7, #10]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d120      	bne.n	80005dc <RTC_Init+0x150>
	{
		*RTC_DR = (date[4] << 20) | (date[5] << 16) | ((date[0] / 10) << 12) | ((date[0] % 10) << 8) | date[1];
 800059a:	7a3b      	ldrb	r3, [r7, #8]
 800059c:	051a      	lsls	r2, r3, #20
 800059e:	7a7b      	ldrb	r3, [r7, #9]
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	431a      	orrs	r2, r3
 80005a4:	793b      	ldrb	r3, [r7, #4]
 80005a6:	4930      	ldr	r1, [pc, #192]	@ (8000668 <RTC_Init+0x1dc>)
 80005a8:	fba1 1303 	umull	r1, r3, r1, r3
 80005ac:	08db      	lsrs	r3, r3, #3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	031b      	lsls	r3, r3, #12
 80005b2:	ea42 0003 	orr.w	r0, r2, r3
 80005b6:	793a      	ldrb	r2, [r7, #4]
 80005b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <RTC_Init+0x1dc>)
 80005ba:	fba3 1302 	umull	r1, r3, r3, r2
 80005be:	08d9      	lsrs	r1, r3, #3
 80005c0:	460b      	mov	r3, r1
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	440b      	add	r3, r1
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	021b      	lsls	r3, r3, #8
 80005ce:	4303      	orrs	r3, r0
 80005d0:	797a      	ldrb	r2, [r7, #5]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	461a      	mov	r2, r3
 80005d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	e023      	b.n	8000624 <RTC_Init+0x198>
	}
	else
	{
		*RTC_DR = (date[5] << 20) | (date[6] << 16) | ((date[0] / 10) << 12) | ((date[0] % 10) << 8) | (date[1] << 4) | date[2];
 80005dc:	7a7b      	ldrb	r3, [r7, #9]
 80005de:	051a      	lsls	r2, r3, #20
 80005e0:	7abb      	ldrb	r3, [r7, #10]
 80005e2:	041b      	lsls	r3, r3, #16
 80005e4:	431a      	orrs	r2, r3
 80005e6:	793b      	ldrb	r3, [r7, #4]
 80005e8:	491f      	ldr	r1, [pc, #124]	@ (8000668 <RTC_Init+0x1dc>)
 80005ea:	fba1 1303 	umull	r1, r3, r1, r3
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	031b      	lsls	r3, r3, #12
 80005f4:	ea42 0003 	orr.w	r0, r2, r3
 80005f8:	793a      	ldrb	r2, [r7, #4]
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <RTC_Init+0x1dc>)
 80005fc:	fba3 1302 	umull	r1, r3, r3, r2
 8000600:	08d9      	lsrs	r1, r3, #3
 8000602:	460b      	mov	r3, r1
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	1ad3      	subs	r3, r2, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	ea40 0203 	orr.w	r2, r0, r3
 8000614:	797b      	ldrb	r3, [r7, #5]
 8000616:	011b      	lsls	r3, r3, #4
 8000618:	4313      	orrs	r3, r2
 800061a:	79ba      	ldrb	r2, [r7, #6]
 800061c:	4313      	orrs	r3, r2
 800061e:	461a      	mov	r2, r3
 8000620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000622:	601a      	str	r2, [r3, #0]
	}
	/* exit the Init mode to finish the sequence */
	*RTC_ISR &= ~(1 << 7);
 8000624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800062c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800062e:	601a      	str	r2, [r3, #0]

	/* re-active the write protection */
	*RTC_WPR = 0xFF;
 8000630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000632:	22ff      	movs	r2, #255	@ 0xff
 8000634:	601a      	str	r2, [r3, #0]
}
 8000636:	bf00      	nop
 8000638:	3738      	adds	r7, #56	@ 0x38
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40002800 	.word	0x40002800
 8000644:	40002804 	.word	0x40002804
 8000648:	40002810 	.word	0x40002810
 800064c:	4000280c 	.word	0x4000280c
 8000650:	40002824 	.word	0x40002824
 8000654:	40007000 	.word	0x40007000
 8000658:	40023840 	.word	0x40023840
 800065c:	40023870 	.word	0x40023870
 8000660:	40023874 	.word	0x40023874
 8000664:	007c00ff 	.word	0x007c00ff
 8000668:	cccccccd 	.word	0xcccccccd

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <NMI_Handler+0x4>

08000674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <MemManage_Handler+0x4>

08000684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <UsageFault_Handler+0x4>

08000694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c2:	f000 f945 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <SystemInit+0x20>)
 80006d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d6:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <SystemInit+0x20>)
 80006d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <delay_ms>:
 */
#include "main.h"
#include "timer.h"

void delay_ms(uint32_t ms)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	uint32_t* TIM2_CNT = (uint32_t*) (TIM2_BASE_ADDR + 0x24);
 80006f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <delay_ms+0x38>)
 80006fa:	60fb      	str	r3, [r7, #12]
	uint32_t time = ms * 1000;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000702:	fb02 f303 	mul.w	r3, r2, r3
 8000706:	60bb      	str	r3, [r7, #8]
	*TIM2_CNT = 0;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
	while (*TIM2_CNT < time);
 800070e:	bf00      	nop
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	429a      	cmp	r2, r3
 8000718:	d8fa      	bhi.n	8000710 <delay_ms+0x20>
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40000024 	.word	0x40000024

0800072c <TIM2_Init>:

/*
	TIMER 2 CHANNEL 2
 */
void TIM2_Init()
{
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <TIM2_Init+0x84>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073a:	4a1d      	ldr	r2, [pc, #116]	@ (80007b0 <TIM2_Init+0x84>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6413      	str	r3, [r2, #64]	@ 0x40
 8000742:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <TIM2_Init+0x84>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
	uint16_t* TIM2_CR1 = (uint16_t*) (TIM2_BASE_ADDR + 0x00);
 800074e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000752:	617b      	str	r3, [r7, #20]
	uint16_t* TIM2_PSC = (uint16_t*) (TIM2_BASE_ADDR + 0x28);
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <TIM2_Init+0x88>)
 8000756:	613b      	str	r3, [r7, #16]
	uint32_t* TIM2_ARR = (uint32_t*) (TIM2_BASE_ADDR + 0x2C);
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <TIM2_Init+0x8c>)
 800075a:	60fb      	str	r3, [r7, #12]
	uint16_t* TIM2_CNT = (uint16_t*) (TIM2_BASE_ADDR + 0x24);
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <TIM2_Init+0x90>)
 800075e:	60bb      	str	r3, [r7, #8]
	uint16_t* TIM2_EGR = (uint16_t*) (TIM2_BASE_ADDR + 0x14);
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <TIM2_Init+0x94>)
 8000762:	607b      	str	r3, [r7, #4]

	/* Counter used as up-counter */
	*TIM2_CR1 &= ~(1 << 4);
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	f023 0310 	bic.w	r3, r3, #16
 800076c:	b29a      	uxth	r2, r3
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 freq = 1MHz */
	*TIM2_PSC = 15;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	220f      	movs	r2, #15
 8000776:	801a      	strh	r2, [r3, #0]

	/* set TIMER2 */
	*TIM2_ARR = 0xffffffff;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f04f 32ff 	mov.w	r2, #4294967295
 800077e:	601a      	str	r2, [r3, #0]

	/* Reset counter value */
	*TIM2_CNT = 0;
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2200      	movs	r2, #0
 8000784:	801a      	strh	r2, [r3, #0]

	*TIM2_EGR |= 1 << 0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	b29a      	uxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	801a      	strh	r2, [r3, #0]

	/* Enable counter */
	*TIM2_CR1 |= 1 << 0;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	b29a      	uxth	r2, r3
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	801a      	strh	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	371c      	adds	r7, #28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40000028 	.word	0x40000028
 80007b8:	4000002c 	.word	0x4000002c
 80007bc:	40000024 	.word	0x40000024
 80007c0:	40000014 	.word	0x40000014

080007c4 <UART_SendDATA>:
 */
#include "main.h"
#include "uart.h"

void UART_SendDATA(uint8_t* _data)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	UART_SendByte(START_BYTE);
 80007cc:	20aa      	movs	r0, #170	@ 0xaa
 80007ce:	f000 f817 	bl	8000800 <UART_SendByte>
	for (int i = 0; i < 4; i++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e009      	b.n	80007ec <UART_SendDATA+0x28>
	{
		UART_SendByte(_data[i]);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f80d 	bl	8000800 <UART_SendByte>
	for (int i = 0; i < 4; i++)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	3301      	adds	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	ddf2      	ble.n	80007d8 <UART_SendDATA+0x14>
	}
	UART_SendByte(STOP_BYTE);
 80007f2:	20ff      	movs	r0, #255	@ 0xff
 80007f4:	f000 f804 	bl	8000800 <UART_SendByte>
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <UART_SendByte>:

void UART_SendByte(uint8_t data)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	uint32_t* UART_SR = (uint32_t*) (UART1_BASE_ADDR + 0x00);
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <UART_SendByte+0x38>)
 800080c:	60fb      	str	r3, [r7, #12]
	uint32_t* UART_DR = (uint32_t*) (UART1_BASE_ADDR + 0x04);
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <UART_SendByte+0x3c>)
 8000810:	60bb      	str	r3, [r7, #8]

	/* send data */
	*UART_DR = data;
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	601a      	str	r2, [r3, #0]

	/* wait until the transmission is completed */
	while (((*UART_SR >> 7) & 1) == 0);
 8000818:	bf00      	nop
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	09db      	lsrs	r3, r3, #7
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f8      	beq.n	800081a <UART_SendByte+0x1a>
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40011000 	.word	0x40011000
 800083c:	40011004 	.word	0x40011004

08000840 <UART_Init>:
	PB6: UART1 TX
	Parity: even
	baud rate: 9600 bps
 */
void UART_Init()
{
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
	uint32_t* GPIOB_MODER = (uint32_t*) (GPIOB_BASE_ADDR + 0x00);
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <UART_Init+0xa8>)
 8000848:	617b      	str	r3, [r7, #20]
	uint32_t* GPIOB_AFRL  = (uint32_t*) (GPIOB_BASE_ADDR + 0x20);
 800084a:	4b28      	ldr	r3, [pc, #160]	@ (80008ec <UART_Init+0xac>)
 800084c:	613b      	str	r3, [r7, #16]

	/* configure PB6 as AF */
	*GPIOB_MODER &= ~(0b11 << (6 * 2));
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	601a      	str	r2, [r3, #0]
	*GPIOB_MODER |=  (0b10 << (6 * 2));
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	601a      	str	r2, [r3, #0]

	/* select AF07 for PB6 */
	*GPIOB_AFRL &= ~(0xf << (6 * 4));
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	601a      	str	r2, [r3, #0]
	*GPIOB_AFRL |=  (7 << (6 * 4));
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f043 62e0 	orr.w	r2, r3, #117440512	@ 0x7000000
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	601a      	str	r2, [r3, #0]

	__HAL_RCC_USART1_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b1b      	ldr	r3, [pc, #108]	@ (80008f0 <UART_Init+0xb0>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	4a1a      	ldr	r2, [pc, #104]	@ (80008f0 <UART_Init+0xb0>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	6453      	str	r3, [r2, #68]	@ 0x44
 800088e:	4b18      	ldr	r3, [pc, #96]	@ (80008f0 <UART_Init+0xb0>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
	uint32_t* UART_CR1 = (uint32_t*) (UART1_BASE_ADDR + 0x0C);
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <UART_Init+0xb4>)
 800089c:	60fb      	str	r3, [r7, #12]
	uint32_t* UART_BRR = (uint32_t*) (UART1_BASE_ADDR + 0x08);
 800089e:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <UART_Init+0xb8>)
 80008a0:	60bb      	str	r3, [r7, #8]

	/* select word length = 9 data bits */
	*UART_CR1 |= 1 << 12;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	601a      	str	r2, [r3, #0]

	/* enable even parity bit */
	*UART_CR1 |= 1 << 10;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	601a      	str	r2, [r3, #0]

	/* enable transmitter */
	*UART_CR1 |= 1 << 3;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f043 0208 	orr.w	r2, r3, #8
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	601a      	str	r2, [r3, #0]

	/* configure baud rate = 9600 bps */
	*UART_BRR = (104 << 4) | (3 << 0);
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	f240 6283 	movw	r2, #1667	@ 0x683
 80008cc:	601a      	str	r2, [r3, #0]

	/* enable UART */
	*UART_CR1 |= 1 << 13;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	371c      	adds	r7, #28
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40020400 	.word	0x40020400
 80008ec:	40020420 	.word	0x40020420
 80008f0:	40023800 	.word	0x40023800
 80008f4:	4001100c 	.word	0x4001100c
 80008f8:	40011008 	.word	0x40011008

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000900:	f7ff fee4 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	@ (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f000 f83b 	bl	80009a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fd07 	bl	8000340 <main>
  bx  lr    
 8000932:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000940:	08000a6c 	.word	0x08000a6c
  ldr r2, =_sbss
 8000944:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000948:	2000005c 	.word	0x2000005c

0800094c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>
	...

08000950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000038 	.word	0x20000038
 8000974:	20000058 	.word	0x20000058

08000978 <strstr>:
 8000978:	780a      	ldrb	r2, [r1, #0]
 800097a:	b570      	push	{r4, r5, r6, lr}
 800097c:	b96a      	cbnz	r2, 800099a <strstr+0x22>
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	429a      	cmp	r2, r3
 8000982:	d109      	bne.n	8000998 <strstr+0x20>
 8000984:	460c      	mov	r4, r1
 8000986:	4605      	mov	r5, r0
 8000988:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f6      	beq.n	800097e <strstr+0x6>
 8000990:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000994:	429e      	cmp	r6, r3
 8000996:	d0f7      	beq.n	8000988 <strstr+0x10>
 8000998:	3001      	adds	r0, #1
 800099a:	7803      	ldrb	r3, [r0, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1ef      	bne.n	8000980 <strstr+0x8>
 80009a0:	4618      	mov	r0, r3
 80009a2:	e7ec      	b.n	800097e <strstr+0x6>

080009a4 <__libc_init_array>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	4d0d      	ldr	r5, [pc, #52]	@ (80009dc <__libc_init_array+0x38>)
 80009a8:	4c0d      	ldr	r4, [pc, #52]	@ (80009e0 <__libc_init_array+0x3c>)
 80009aa:	1b64      	subs	r4, r4, r5
 80009ac:	10a4      	asrs	r4, r4, #2
 80009ae:	2600      	movs	r6, #0
 80009b0:	42a6      	cmp	r6, r4
 80009b2:	d109      	bne.n	80009c8 <__libc_init_array+0x24>
 80009b4:	4d0b      	ldr	r5, [pc, #44]	@ (80009e4 <__libc_init_array+0x40>)
 80009b6:	4c0c      	ldr	r4, [pc, #48]	@ (80009e8 <__libc_init_array+0x44>)
 80009b8:	f000 f818 	bl	80009ec <_init>
 80009bc:	1b64      	subs	r4, r4, r5
 80009be:	10a4      	asrs	r4, r4, #2
 80009c0:	2600      	movs	r6, #0
 80009c2:	42a6      	cmp	r6, r4
 80009c4:	d105      	bne.n	80009d2 <__libc_init_array+0x2e>
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009cc:	4798      	blx	r3
 80009ce:	3601      	adds	r6, #1
 80009d0:	e7ee      	b.n	80009b0 <__libc_init_array+0xc>
 80009d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d6:	4798      	blx	r3
 80009d8:	3601      	adds	r6, #1
 80009da:	e7f2      	b.n	80009c2 <__libc_init_array+0x1e>
 80009dc:	08000a64 	.word	0x08000a64
 80009e0:	08000a64 	.word	0x08000a64
 80009e4:	08000a64 	.word	0x08000a64
 80009e8:	08000a68 	.word	0x08000a68

080009ec <_init>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr

080009f8 <_fini>:
 80009f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fa:	bf00      	nop
 80009fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fe:	bc08      	pop	{r3}
 8000a00:	469e      	mov	lr, r3
 8000a02:	4770      	bx	lr
